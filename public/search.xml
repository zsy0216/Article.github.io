<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis学习记录</title>
      <link href="/2019/10/18/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/10/18/Redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p style="text-align:center;font-size:100px;">Redis</p># 一、从NoSQL说起<p>NoSQL是Not only SQL的缩写，大意为“不只是SQL”，说明这项技术是<b><font color="red">传统关系型数据库的补充</font></b>而非替代。在整个NoSQL技术栈中<b><font color="blue">MemCache</font></b>、<b><font color="blue">Redis</font></b>、<b><font color="blue">MongoDB</font></b>被称为NoSQL三剑客。那么时代为什么需要NoSQL数据库呢？我们来做个对比：</p><table><thead><tr><th>对比</th><th align="center">关系型数据库</th><th align="center">NoSQL数据库</th></tr></thead><tbody><tr><td>数据存储位置</td><td align="center">硬盘</td><td align="center">内存</td></tr><tr><td>数据结构</td><td align="center">高度组织化结构化数据</td><td align="center">没有预定义的模式</td></tr><tr><td>数据操作方式</td><td align="center">SQL</td><td align="center">所有数据都是键值对，没有声明性查询语言</td></tr><tr><td>事务控制</td><td align="center">严格的基础事务ACID原则</td><td align="center">CAP定理</td></tr></tbody></table><p>所以NoSQL数据库的最大优势体现为：高性能、高可用性和可伸缩性。</p><h1 id="二、Redis简介"><a href="#二、Redis简介" class="headerlink" title="二、Redis简介"></a>二、Redis简介</h1><p>Redis英文官网介绍：</p><blockquote><p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.</p></blockquote><p>Redis中文官网介绍：</p><blockquote><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p></blockquote><p>Redis命令参考文档网址：<a href="http://redisdoc.com" target="_blank" rel="noopener">http://redisdoc.com</a></p><h1 id="三、Redis安装"><a href="#三、Redis安装" class="headerlink" title="三、Redis安装"></a>三、Redis安装</h1><h2 id="1-下载并解压安装"><a href="#1-下载并解压安装" class="headerlink" title="1. 下载并解压安装"></a>1. 下载并解压安装</h2><ol><li><p>下载<code>redis-4.0.2.tar.gz</code>到<code>/opt</code>目录下</p></li><li><p>解压到当前目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-4.0.2.tar.gz</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-安装C语言编译环境"><a href="#2-安装C语言编译环境" class="headerlink" title="2. 安装C语言编译环境"></a>2. 安装C语言编译环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum intall -y gcc-c++</span><br></pre></td></tr></table></figure><h2 id="3-修改安装位置"><a href="#3-修改安装位置" class="headerlink" title="3. 修改安装位置"></a>3. 修改安装位置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim opt/src/Makefile</span><br><span class="line"><span class="meta">#</span><span class="bash">修改第27行</span></span><br><span class="line">PREFIX?=/user/local/redis</span><br></pre></td></tr></table></figure><h2 id="4-编译安装"><a href="#4-编译安装" class="headerlink" title="4. 编译安装"></a>4. 编译安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make #编译</span><br><span class="line">make install #安装 建议先拍快照</span><br></pre></td></tr></table></figure><h2 id="5-启动Redis服务器"><a href="#5-启动Redis服务器" class="headerlink" title="5.启动Redis服务器"></a>5.启动Redis服务器</h2><h3 id="①默认启动"><a href="#①默认启动" class="headerlink" title="①默认启动"></a>①默认启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/redis/bin/redis-server</span><br><span class="line">7239:C 07 Oct 18:59:12.144 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">7239:C 07 Oct 18:59:12.144 # Redis version=4.0.2, bits=64, commit=00000000, modified=0, pid=7239, just started</span><br><span class="line">7239:C 07 Oct 18:59:12.144 # Warning: no config file specified, using the default config. In order to specify a config file use /usr/local/redis/bin/redis-server /path/to/redis.conf</span><br><span class="line">7239:M 07 Oct 18:59:12.145 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ ''-._                                             </span><br><span class="line">      _.-``    `.  `_.  ''-._           Redis 4.0.2 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ ''-._                                   </span><br><span class="line"> (    '      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-'    |     PID: 7239</span><br><span class="line">  `-._    `-._  `-./  _.-'    _.-'                                   </span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|                                  </span><br><span class="line"> |    `-._`-._        _.-'_.-'    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'                                   </span><br><span class="line"> |`-._`-._    `-.__.-'    _.-'_.-'|                                  </span><br><span class="line"> |    `-._`-._        _.-'_.-'    |                                  </span><br><span class="line">  `-._    `-._`-.__.-'_.-'    _.-'                                   </span><br><span class="line">      `-._    `-.__.-'    _.-'                                       </span><br><span class="line">          `-._        _.-'                                           </span><br><span class="line">              `-.__.-'                                               </span><br><span class="line"></span><br><span class="line">7239:M 07 Oct 18:59:12.148 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">7239:M 07 Oct 18:59:12.148 # Server initialized</span><br><span class="line">7239:M 07 Oct 18:59:12.148 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span><br><span class="line">7239:M 07 Oct 18:59:12.148 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span><br><span class="line">7239:M 07 Oct 18:59:12.148 * Ready to accept connections</span><br></pre></td></tr></table></figure><p>停止Redis服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli shutdown</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7239:M 07 Oct 19:00:53.208 # User requested shutdown...</span><br><span class="line">7239:M 07 Oct 19:00:53.208 * Saving the final RDB snapshot before exiting.</span><br><span class="line">7239:M 07 Oct 19:00:53.214 * DB saved on disk</span><br><span class="line">7239:M 07 Oct 19:00:53.214 # Redis is now ready to exit, bye bye...</span><br></pre></td></tr></table></figure><h3 id="②定制配置项启动"><a href="#②定制配置项启动" class="headerlink" title="②定制配置项启动"></a>②定制配置项启动</h3><h4 id="1-准备配置文件"><a href="#1-准备配置文件" class="headerlink" title="[1]准备配置文件"></a>[1]准备配置文件</h4><p><code>cp /opt/redis-4.0.2/redis.conf /usr/local/redis/</code></p><h4 id="2-修改配置项"><a href="#2-修改配置项" class="headerlink" title="[2]修改配置项"></a>[2]修改配置项</h4><table><thead><tr><th>配置项名称</th><th>作用</th><th>取值</th></tr></thead><tbody><tr><td>daemonize</td><td>控制是否以守护进程形式运行Redis服务器</td><td>yes</td></tr><tr><td>logfile</td><td>指定日志文件位置</td><td>“/usr/local/redis/redis.log”</td></tr><tr><td>dir</td><td>Redis工作目录</td><td>/usr/local/redis</td></tr></tbody></table><p>注意：/var/logs目录需要我们提前创建好</p><h4 id="3-让Redis根据指定的配置文件启动"><a href="#3-让Redis根据指定的配置文件启动" class="headerlink" title="[3]让Redis根据指定的配置文件启动"></a>[3]让Redis根据指定的配置文件启动</h4><p>格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server文件路径 redis.conf文件路径</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/redis.conf</span><br></pre></td></tr></table></figure><h2 id="6-客户端登录"><a href="#6-客户端登录" class="headerlink" title="6.客户端登录"></a>6.客户端登录</h2><p><code>/usr/local/redis/bin/redis-cli -h 127.0.0.1 -p 6379</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br></pre></td></tr></table></figure><p>关闭redis服务：/usr/local/bin/redis-cli -h IP地址 -p 端口号 shutdown</p><h1 id="四、Redis五种常用数据结构"><a href="#四、Redis五种常用数据结构" class="headerlink" title="四、Redis五种常用数据结构"></a>四、Redis五种常用数据结构</h1><h2 id="1-总体结构"><a href="#1-总体结构" class="headerlink" title="1.总体结构"></a>1.总体结构</h2><table>    <tr>        <th rowspan="1">KEY</th>        <th>VALUE</th>        </tr><tr><td rowspan="5">string</td>        <td>string</td>    </tr>    <tr>        <td>list</td>    </tr>    <tr>        <td>set</td>    </tr>    <tr>        <td>hash</td>    </tr>    <tr>        <td>zset</td>    </tr></table><p>Redis中的数据，总体上是键值对，不同数据类型指的是键值对中值的类型。</p><h2 id="2-string类型"><a href="#2-string类型" class="headerlink" title="2.string类型"></a>2.string类型</h2><p>Redis中最基本的类型，它是key对应的一个单一值。二进制安全，不必担心由于编码等问题导致二进制数据变化。所以redis的string可以包含任何数据，比如jpg图片或者序列化的对象。Redis中一个字符串值的最大容量是512M。</p><h2 id="3-list类型"><a href="#3-list类型" class="headerlink" title="3.list类型"></a>3.list类型</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。说明它的底层是基于链表实现的，所以它操作时头尾效率高，中间效率低。</p><p><img src="https://zsy0216.github.io/image/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/redis/p01.png" alt="p01"></p><h2 id="2-set类型"><a href="#2-set类型" class="headerlink" title="2.set类型"></a>2.set类型</h2><p>Redis的set是string类型的无序集合。它是基于哈希表实现的。</p><h2 id="3-hash类型"><a href="#3-hash类型" class="headerlink" title="3.hash类型"></a>3.hash类型</h2><p>本身就是一个键值对集合。可以当做Java中的Map&lt;String,Object&gt;对待。</p><h2 id="4-zset类型"><a href="#4-zset类型" class="headerlink" title="4.zset类型"></a>4.zset类型</h2><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。</p><h1 id="五、Redis命令行操作"><a href="#五、Redis命令行操作" class="headerlink" title="五、Redis命令行操作"></a>五、Redis命令行操作</h1><h2 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1.基本操作"></a>1.基本操作</h2><h3 id="①切换数据库"><a href="#①切换数据库" class="headerlink" title="①切换数据库"></a>①切换数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Redis默认有16个数据库。</span><br><span class="line">115 # Set the number of databases. The default database is DB 0, you can select</span><br><span class="line">116 # a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span><br><span class="line">117 # dbid is a number between 0 and 'databases'-1</span><br><span class="line">118 databases 16</span><br><span class="line">使用select进行切换，数据库索引从0开始</span><br><span class="line">127.0.0.1:6379&gt; select 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="②查看数据库长度"><a href="#②查看数据库长度" class="headerlink" title="②查看数据库长度"></a>②查看数据库长度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h2 id="2-KEY操作"><a href="#2-KEY操作" class="headerlink" title="2.KEY操作"></a>2.KEY操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">●KEYS PATTERN</span><br><span class="line">●TYPE KEY</span><br><span class="line">返回KEY对应的值的类型</span><br><span class="line">●MOVE KEY DB</span><br><span class="line">把一组键值对数据移动到另一个数据库中</span><br><span class="line">●DEL KEY [KEY ...]</span><br><span class="line">根据KEY进行删除，至少要指定一个KEY</span><br><span class="line">●EXISTS KEY</span><br><span class="line">检查指定的KEY是否存在。指定一个KEY时，存在返回1，不存在返回0。可以指定多个，返回存在的KEY的数量。</span><br><span class="line">●RANDOMKEY</span><br><span class="line">在现有的KEY中随机返回一个</span><br><span class="line">●RENAME KEY NEWKEY</span><br><span class="line">重命名一个KEY，NEWKEY不管是否是已经存在的都会执行，如果NEWKEY已经存在则会被覆盖。</span><br><span class="line">●RENAMENX KEY NEWKEY</span><br><span class="line">只有在NEWKEY不存在时能够执行成功，否则失败</span><br><span class="line">●TIME</span><br><span class="line">返回当前UNIX时间戳</span><br><span class="line">●TTL KEY</span><br><span class="line">以秒为单位查看KEY还能存在多长时间</span><br><span class="line">●PTTL KEY</span><br><span class="line">以毫秒为单位查看KEY还能存在多长时间</span><br><span class="line">●EXPIRE KEY SECONDS</span><br><span class="line">给一个KEY设置在SECONDS秒后过期，过期会被Redis移除。</span><br><span class="line">●EXPIREAT KEY TIMESTAMP</span><br><span class="line">设置一个KEY在TIMESTAMP指定的时间过期</span><br><span class="line">●PEXPIRE KEY MILLISECONDS</span><br><span class="line">以毫秒为单位指定过期时间</span><br><span class="line">●PEXPIREAT KEY MILLISECONDS-TIMESTAMP</span><br><span class="line">以毫秒为单位指定过期的时间戳</span><br><span class="line">●PERSIST KEY</span><br><span class="line">移除过期时间，变成永久key</span><br></pre></td></tr></table></figure><h2 id="2-string操作"><a href="#2-string操作" class="headerlink" title="2.string操作"></a>2.string操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">●SET KEY VALUE [EX SECONDS] [PX MILLISECONDS] [NX|XX]</span><br><span class="line">给KEY设置一个string类型的值。</span><br><span class="line">EX参数用于设置存活的秒数。</span><br><span class="line">PX参数用于设置存活的毫秒数。</span><br><span class="line">NX参数表示当前命令中指定的KEY不存在才行。</span><br><span class="line">XX参数表示当前命令中指定的KEY存在才行。</span><br><span class="line">●GET KEY</span><br><span class="line">根据key得到值，只能用于string类型。</span><br><span class="line">●APPEND KEY VALUE</span><br><span class="line">把指定的value追加到KEY对应的原来的值后面，返回值是追加后字符串长度</span><br><span class="line">●STRLEN KEY</span><br><span class="line">直接返回字符串长度</span><br><span class="line">●INCR KEY</span><br><span class="line">自增1</span><br><span class="line">●DECR KEY</span><br><span class="line">自减1</span><br><span class="line">●INCRBY KEY INCREMENT</span><br><span class="line">原值+INCREMENT</span><br><span class="line">●DECRBY KEY DECREMENT</span><br><span class="line">原值-DECREMENT</span><br><span class="line">●GETRANGE KEY START END</span><br><span class="line">从字符串中取指定的一段</span><br><span class="line">●SETRANGE KEY OFFSET VALUE</span><br><span class="line">从offset开始使用VALUE进行替换</span><br><span class="line">●SETEX KEY SECONDS VALUE</span><br><span class="line">设置KEY,VALUE时指定存在秒数</span><br><span class="line">●SETNX KEY VALUE</span><br><span class="line">新建字符串类型的键值对</span><br><span class="line">●MSET KEY VALUE [KEY VALUE ...]</span><br><span class="line">一次性设置一组多个键值对</span><br><span class="line">●MGET KEY [KEY ...]</span><br><span class="line">一次性指定多个KEY，返回它们对应的值，没有值的KEY返回值是(nil)</span><br><span class="line">●MSETNX KEY VALUE [KEY VALUE ...]</span><br><span class="line">一次性新建多个值</span><br><span class="line">●GETSET KEY VALUE</span><br><span class="line">设置新值，同时能够将旧值返回</span><br></pre></td></tr></table></figure><h2 id="3-list操作"><a href="#3-list操作" class="headerlink" title="3.list操作"></a>3.list操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">●LPUSH key value [value ...]</span><br><span class="line">●RPUSH key value [value ...]</span><br><span class="line">●LRANGE key start stop</span><br><span class="line">根据list集合的索引打印元素数据</span><br><span class="line">正着数：0,1,2,3,...</span><br><span class="line">倒着数：-1,-2,-3,...</span><br><span class="line">●LLEN key</span><br><span class="line">●LPOP key</span><br><span class="line">从左边弹出一个元素。</span><br><span class="line">弹出=返回+删除。</span><br><span class="line">●RPOP key</span><br><span class="line">从右边弹出一个元素。</span><br><span class="line">●RPOPLPUSH source destination</span><br><span class="line">从source中RPOP一个元素，LPUSH到destination中</span><br><span class="line">●LINDEX key index</span><br><span class="line">根据索引从集合中取值</span><br><span class="line">●LINSERT key BEFORE|AFTER pivot value</span><br><span class="line">在pivot指定的值前面或后面插入value</span><br><span class="line">●LPUSHX key value</span><br><span class="line">只能针对存在的list执行LPUSH</span><br><span class="line">●LREM key count value</span><br><span class="line">根据count指定的数量从key对应的list中删除value</span><br><span class="line">●LSET key index value</span><br><span class="line">把指定索引位置的元素替换为另一个值</span><br><span class="line">●LTRIM key start stop</span><br><span class="line">仅保留指定区间的数据，两边的数据被删除</span><br></pre></td></tr></table></figure><h2 id="4-set操作"><a href="#4-set操作" class="headerlink" title="4.set操作"></a>4.set操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">●SADD key member [member ...]</span><br><span class="line">●SMEMBERS key</span><br><span class="line">●SCARD key</span><br><span class="line">返回集合中元素的数量</span><br><span class="line">●SISMEMBER key member</span><br><span class="line">检查当前指定member是否是集合中的元素</span><br><span class="line">●SREM key member [member ...]</span><br><span class="line">从集合中删除元素</span><br><span class="line">●SINTER key [key ...]</span><br><span class="line">将指定的集合进行“交集”操作</span><br><span class="line">集合A：a,b,c</span><br><span class="line">集合B：b,c,d</span><br><span class="line">交集：b,c</span><br><span class="line">●SINTERSTORE destination key [key ...]</span><br><span class="line">取交集后存入destination</span><br><span class="line">●SDIFF key [key ...]</span><br><span class="line">将指定的集合执行“差集”操作</span><br><span class="line">集合A：a,b,c</span><br><span class="line">集合B：b,c,d</span><br><span class="line">A对B执行diff：a</span><br><span class="line">相当于：A-交集部分</span><br><span class="line">●SDIFFSTORE destination key [key ...]</span><br><span class="line">●SUNION key [key ...]</span><br><span class="line">将指定的集合执行“并集”操作</span><br><span class="line">集合A：a,b,c</span><br><span class="line">集合B：b,c,d</span><br><span class="line">并集：a,b,c,d</span><br><span class="line">●SUNIONSTORE destination key [key ...]</span><br><span class="line">●SMOVE source destination member</span><br><span class="line">把member从source移动到destination</span><br><span class="line">●SPOP key [count]</span><br><span class="line">从集合中随机弹出count个数量的元素，count不指定就弹出1个</span><br><span class="line">●SRANDMEMBER key [count]</span><br><span class="line">从集合中随机返回count个数量的元素，count不指定就返回1个</span><br><span class="line">●SSCAN key cursor [MATCH pattern] [COUNT count]</span><br><span class="line">基于游标的遍历</span><br></pre></td></tr></table></figure><h2 id="5-hash操作"><a href="#5-hash操作" class="headerlink" title="5.hash操作"></a>5.hash操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">●HSET key field value</span><br><span class="line">●HGETALL key</span><br><span class="line">●HGET key field</span><br><span class="line">●HLEN key</span><br><span class="line">●HKEYS key</span><br><span class="line">●HVALS key</span><br><span class="line">●HEXISTS key field</span><br><span class="line">●HDEL key field [field ...]</span><br><span class="line">●HINCRBY key field increment</span><br><span class="line">●HMGET key field [field ...]</span><br><span class="line">●HMSET key field value [field value ...]</span><br><span class="line">●HSETNX key field value</span><br><span class="line">●HSCAN key cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure><h2 id="6-zset操作"><a href="#6-zset操作" class="headerlink" title="6.zset操作"></a>6.zset操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">●ZADD key [NX|XX] [CH] [INCR] score member [score member ...]</span><br><span class="line">●ZRANGE key start stop [WITHSCORES]</span><br><span class="line">●ZCARD key</span><br><span class="line">●ZCOUNT key min max</span><br><span class="line">根据分数在min，max之间查找元素</span><br><span class="line">●ZSCORE key member</span><br><span class="line">●ZINCRBY key increment member</span><br><span class="line">●ZLEXCOUNT key min max</span><br><span class="line">●ZRANGEBYLEX key min max [LIMIT offset count]</span><br><span class="line">按照字母顺序在区间内返回member</span><br><span class="line">min和max使用“[a”表示闭区间，使用“(a”表示开区间</span><br><span class="line">-表示负无穷</span><br><span class="line">+表示正无穷</span><br><span class="line">●ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</span><br><span class="line">在分数的指定区间内返回数据</span><br><span class="line">●ZRANK key member</span><br><span class="line">先对分数进行升序排序，返回member的排名</span><br><span class="line">●ZREM key member [member ...]</span><br><span class="line">●ZREMRANGEBYLEX key min max</span><br><span class="line">●ZREMRANGEBYRANK key start stop</span><br><span class="line">●ZREMRANGEBYSCORE key min max</span><br><span class="line">●ZREVRANGE key start stop [WITHSCORES]</span><br><span class="line">●ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</span><br><span class="line">●ZREVRANK key member</span><br><span class="line">●ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</span><br><span class="line">●ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]</span><br><span class="line">把指定集合的member取交集，分数会相加</span><br><span class="line">●ZSCAN key cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure><h1 id="六、Redis持久化机制"><a href="#六、Redis持久化机制" class="headerlink" title="六、Redis持久化机制"></a>六、Redis持久化机制</h1><p><a href="https://redis.io/topics/persistence#snapshotting" target="_blank" rel="noopener">官网描述</a></p><p>Redis工作时数据都存储在内存中，万一服务器断电，则所有数据都会丢失。针对这种情况，Redis采用持久化机制来增强数据安全性。</p><h2 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1.RDB"></a>1.RDB</h2><h3 id="①机制描述"><a href="#①机制描述" class="headerlink" title="①机制描述"></a>①机制描述</h3><p>每隔一定的时间把内存中的数据作为一个快照保存到硬盘上的文件中。Redis默认开启RDB机制。</p><h3 id="②触发时机"><a href="#②触发时机" class="headerlink" title="②触发时机"></a>②触发时机</h3><h4 id="1-基于默认配置"><a href="#1-基于默认配置" class="headerlink" title="[1]基于默认配置"></a>[1]基于默认配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>含义</p><table><thead><tr><th>配置</th><th>含义</th></tr></thead><tbody><tr><td>save 900 1</td><td>900秒内至少有一次修改则触发保存操作</td></tr><tr><td>save 300 10</td><td>300秒内至少有10次修改则触发保存操作</td></tr><tr><td>save 60 10000</td><td>60秒内至少有1万次修改则触发保存操作</td></tr></tbody></table><h4 id="2-使用保存命令"><a href="#2-使用保存命令" class="headerlink" title="[2]使用保存命令"></a>[2]使用保存命令</h4><p>save或bgsave</p><h4 id="3-使用flushall命令"><a href="#3-使用flushall命令" class="headerlink" title="[3]使用flushall命令"></a>[3]使用flushall命令</h4><p>这个命令也会产生dump.rdb文件，但里面是空的，没有意义，相当于删除所有数据。</p><h4 id="4-服务器关闭"><a href="#4-服务器关闭" class="headerlink" title="[4]服务器关闭"></a>[4]服务器关闭</h4><p>如果执行SHUTDOWN命令让Redis正常退出，那么此前Redis就会执行一次持久化保存。</p><h3 id="③相关配置"><a href="#③相关配置" class="headerlink" title="③相关配置"></a>③相关配置</h3><table><thead><tr><th>配置项</th><th>取值</th><th>作用</th></tr></thead><tbody><tr><td>save</td><td>“”</td><td>禁用RDB机制</td></tr><tr><td>dbfilename</td><td>文件名，例如：dump.rdb</td><td>设置RDB机制下，数据存储文件的文件名</td></tr><tr><td>dir</td><td>Redis工作目录路径</td><td>指定存放持久化文件的目录的路径。注意：这里指定的必须是目录不能是文件名</td></tr></tbody></table><h3 id="④思考"><a href="#④思考" class="headerlink" title="④思考"></a>④思考</h3><p>RDB机制能够保证数据的绝对安全吗？</p><h2 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2.AOF"></a>2.AOF</h2><h3 id="①机制描述-1"><a href="#①机制描述-1" class="headerlink" title="①机制描述"></a>①机制描述</h3><p>根据配置文件中指定的策略，把生成数据的命令保存到硬盘上的文件中。一个AOF文件的内容可以参照下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">*2</span><br><span class="line">$6</span><br><span class="line">SELECT</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">*3</span><br><span class="line">$3</span><br><span class="line">set</span><br><span class="line">$3</span><br><span class="line">num</span><br><span class="line">$2</span><br><span class="line">10</span><br><span class="line">*2</span><br><span class="line">$4</span><br><span class="line">incr</span><br><span class="line">$3</span><br><span class="line">num</span><br><span class="line">*2</span><br><span class="line">$4</span><br><span class="line">incr</span><br><span class="line">$3</span><br><span class="line">num</span><br><span class="line">*2</span><br><span class="line">$4</span><br><span class="line">incr</span><br><span class="line">$3</span><br><span class="line">num</span><br></pre></td></tr></table></figure><p>生成上面文件内容的Redis命令是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set num 10</span><br><span class="line">incr num</span><br><span class="line">incr num</span><br><span class="line">incr num</span><br></pre></td></tr></table></figure><h3 id="②AOF基本配置"><a href="#②AOF基本配置" class="headerlink" title="②AOF基本配置"></a>②AOF基本配置</h3><table><thead><tr><th>配置项</th><th>取值</th><th>作用</th></tr></thead><tbody><tr><td>appendonly</td><td>yes</td><td>启用AOF持久化机制</td></tr><tr><td></td><td>no</td><td>禁用AOF持久化机制[默认值]</td></tr><tr><td>appendfilename</td><td>“文件名”</td><td>AOF持久化文件名</td></tr><tr><td>dir</td><td>Redis工作目录路径</td><td>指定存放持久化文件的目录的路径。注意：这里指定的必须是目录不能是文件名</td></tr><tr><td>appendfsync</td><td>always</td><td>每一次数据修改后都将执行文件写入操作，缓慢但是最安全。</td></tr><tr><td></td><td>everysec</td><td>每秒执行一次写入操作。折中。</td></tr><tr><td></td><td>no</td><td>由操作系统在适当的时候执行写入操作，最快。</td></tr></tbody></table><h3 id="③AOF重写"><a href="#③AOF重写" class="headerlink" title="③AOF重写"></a>③AOF重写</h3><p>对比下面两组命令：</p><table><thead><tr><th>AOF重写前</th><th>AOF重写后</th></tr></thead><tbody><tr><td>set count 1<br>incr count<br>incr count<br>incr count</td><td>set count 4</td></tr></tbody></table><p>两组命令执行后对于count来说最终的值是一致的，但是进行AOF重写后省略了中间过程，可以让AOF文件体积更小。而Redis会根据AOF文件的体积来决定是否进行AOF重写。参考的配置项如下：</p><table><thead><tr><th>配置项</th><th>含义</th></tr></thead><tbody><tr><td>auto-aof-rewrite-percentage 100</td><td>文件体积增大100%时执行AOF重写</td></tr><tr><td>auto-aof-rewrite-min-size 64mb</td><td>文件体积增长到64mb时执行AOF重写</td></tr></tbody></table><p>实际工作中不要进行频繁的AOF重写，因为CPU资源和硬盘资源二者之间肯定是CPU资源更加宝贵，所以不应该过多耗费CPU性能去节省硬盘空间。</p><h2 id="3-持久化文件损坏修复"><a href="#3-持久化文件损坏修复" class="headerlink" title="3.持久化文件损坏修复"></a>3.持久化文件损坏修复</h2><p>Redis服务器启动时如果读取了损坏的持久化文件会导致启动失败，此时为了让Redis服务器能够正常启动，需要对损坏的持久化文件进行修复。这里以AOF文件为例介绍修复操作的步骤。</p><ul><li><p>第一步：备份要修复的appendonly.aof文件</p></li><li><p>第二步：执行修复程序</p><p>/usr/local/redis/bin/redis-check-aof –fix /usr/local/redis/appendonly.aof</p></li><li><p>第三步：重启Redis</p></li></ul><p>注意：所谓修复持久化文件仅仅是把损坏的部分去掉，而没法把受损的数据找回。</p><h2 id="4-扩展阅读：两种持久化机制的取舍"><a href="#4-扩展阅读：两种持久化机制的取舍" class="headerlink" title="4.扩展阅读：两种持久化机制的取舍"></a>4.扩展阅读：两种持久化机制的取舍</h2><h3 id="①RDB"><a href="#①RDB" class="headerlink" title="①RDB"></a>①RDB</h3><h4 id="1-优势"><a href="#1-优势" class="headerlink" title="[1]优势"></a>[1]优势</h4><p>适合大规模的数据恢复，速度较快</p><h4 id="2-劣势"><a href="#2-劣势" class="headerlink" title="[2]劣势"></a>[2]劣势</h4><p>会丢失最后一次快照后的所有修改，不能绝对保证数据的高度一致性和完整性。Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑，但上述成立有条件，Linux也有优化手段</p><h3 id="②AOF"><a href="#②AOF" class="headerlink" title="②AOF"></a>②AOF</h3><h4 id="1-优势-1"><a href="#1-优势-1" class="headerlink" title="[1]优势"></a>[1]优势</h4><p>选择appendfsync always方式运行时理论上能够做到数据完整一致，但此时性能又不好。文件内容具备一定可读性，能够用来分析Redis工作情况。</p><h4 id="2-劣势-1"><a href="#2-劣势-1" class="headerlink" title="[2]劣势"></a>[2]劣势</h4><p>持久化相同的数据，文件体积比RDB大，恢复速度比RDB慢。效率在同步写入时低于RDB，不同步写入时与RDB相同。</p><h3 id="③RDB和AOF并存"><a href="#③RDB和AOF并存" class="headerlink" title="③RDB和AOF并存"></a>③RDB和AOF并存</h3><p>Redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整</p><p>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)、快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</p><h3 id="④使用建议"><a href="#④使用建议" class="headerlink" title="④使用建议"></a>④使用建议</h3><p>如果Redis仅仅作为缓存可以不使用任何持久化方式。</p><p>其他应用方式综合考虑性能和完整性、一致性要求。</p><p>RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。如果Enalbe AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。如果不开启AOF，仅靠Master-Slave Replication 实现高可用性能也不错。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。新浪微博就选用了这种架构。</p><h1 id="七、Redis事务控制"><a href="#七、Redis事务控制" class="headerlink" title="七、Redis事务控制"></a>七、Redis事务控制</h1><h2 id="1-Redis事务控制的相关命令"><a href="#1-Redis事务控制的相关命令" class="headerlink" title="1.Redis事务控制的相关命令"></a>1.Redis事务控制的相关命令</h2><table><thead><tr><th>命令名</th><th>作用</th></tr></thead><tbody><tr><td>MULTI</td><td>表示开始收集命令，后面所有命令都不是马上执行，而是加入到一个队列中。</td></tr><tr><td>EXEC</td><td>执行MULTI后面命令队列中的所有命令。</td></tr><tr><td>DISCARD</td><td>放弃执行队列中的命令。</td></tr><tr><td>WATCH</td><td>“观察“、”监控“一个KEY，在当前队列外的其他命令操作这个KEY时，放弃执行自己队列的命令</td></tr><tr><td>UNWATCH</td><td>放弃监控一个KEY</td></tr></tbody></table><h2 id="2-命令队列执行失败的两种情况"><a href="#2-命令队列执行失败的两种情况" class="headerlink" title="2.命令队列执行失败的两种情况"></a>2.命令队列执行失败的两种情况</h2><h3 id="①加入队列时失败"><a href="#①加入队列时失败" class="headerlink" title="①加入队列时失败"></a>①加入队列时失败</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set age 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr age</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr age www</span><br><span class="line">(error) ERR wrong number of arguments for 'incr' command</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure><p>遇到了入队时即可检测到的错误，整个队列都不会执行。</p><h3 id="②执行队列时失败"><a href="#②执行队列时失败" class="headerlink" title="②执行队列时失败"></a>②执行队列时失败</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set age 30</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby age 5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby age 5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby age ww</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby age 5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) (integer) 35</span><br><span class="line">3) (integer) 40</span><br><span class="line">4) (error) ERR value is not an integer or out of range</span><br><span class="line">5) (integer) 45</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">"45"</span><br></pre></td></tr></table></figure><p>错误在入队时检测不出来，整个队列执行时有错的命令执行失败，但是其他命令并没有回滚。</p><h3 id="③Redis为什么不支持回滚"><a href="#③Redis为什么不支持回滚" class="headerlink" title="③Redis为什么不支持回滚"></a>③Redis为什么不支持回滚</h3><p>官方解释如下：</p><blockquote><pre><code>如果你有使用关系式数据库的经验， 那么 “Redis 在事务失败时不进行回滚，而是继续执行余下的命令”这种做法可能会让你觉得有点奇怪。以下是这种做法的优点：    1.Redis 命令只会因为错误的语法而失败（并且这些问题不能在入队时发现），或是命令用在了错误类型的键上面：这也就是说，从实用性的角度来说，失败的命令是由编程错误造成的，而这些错误应该在开发的过程中被发现，而不应该出现在生产环境中。     2.因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。    有种观点认为 Redis 处理事务的做法会产生 bug ， 然而需要注意的是， 在通常情况下， 回滚并不能解决编程错误带来的问题。 举个例子， 如果你本来想通过 INCR 命令将键的值加上 1 ， 却不小心加上了 2 ， 又或者对错误类型的键执行了 INCR ， 回滚是没有办法处理这些情况的。</code></pre></blockquote><h2 id="3-悲观锁和乐观锁"><a href="#3-悲观锁和乐观锁" class="headerlink" title="3.悲观锁和乐观锁"></a>3.悲观锁和乐观锁</h2><p>在使用WATCH命令监控一个KEY后，当前队列中的命令会由于外部命令的执行而放弃，这是乐观锁的体现。</p><ul><li><p>悲观锁</p><p>认为当前环境非常容易发生碰撞，所以执行操作前需要把数据锁定，操作完成后释放锁，其他操作才可以继续操作。</p></li><li><p>乐观锁</p><p>认为当前环境不容易发生碰撞，所以执行操作前不锁定数据，万一碰撞真的发生了，那么放弃自己的操作。</p></li></ul><h1 id="八、Redis主从复制机制"><a href="#八、Redis主从复制机制" class="headerlink" title="八、Redis主从复制机制"></a>八、Redis主从复制机制</h1><p><img src="https://zsy0216.github.io/image/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/redis/p02.png" alt="p02"></p><h2 id="1-读写分离的好处："><a href="#1-读写分离的好处：" class="headerlink" title="1.读写分离的好处："></a>1.读写分离的好处：</h2><ul><li>性能优化：主服务器专注于写操作，可以用更适合写入数据的模式工作；同样，从服务器专注于读操作，可以用更适合读取数据的模式工作。</li><li>强化数据安全，避免单点故障：由于数据同步机制的存在，各个服务器之间数据保持一致，所以其中某个服务器宕机不会导致数据丢失或无法访问。从这个角度说参与主从复制的Redis服务器构成了一个<b><font color="blue">集群</font></b>。</li></ul><h2 id="2-搭建步骤"><a href="#2-搭建步骤" class="headerlink" title="2.搭建步骤"></a>2.搭建步骤</h2><h3 id="①思路"><a href="#①思路" class="headerlink" title="①思路"></a>①思路</h3><p>Redis集群在运行时使用的是同一个可执行文件，只是对应的配置文件不同。</p><p><img src="https://zsy0216.github.io/image/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/redis/p03.png" alt="p03"></p><p>每个配置文件中相同的参数是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">dir /usr/local/cluster-redis</span><br></pre></td></tr></table></figure><p>不同的参数有：</p><table><thead><tr><th>配置项名称</th><th>作用</th><th>取值</th></tr></thead><tbody><tr><td>port</td><td>Redis服务器启动后监听的端口号</td><td>6000<br>7000<br>8000</td></tr><tr><td>dbfilename</td><td>RDB文件存储位置</td><td>dump6000.rdb<br>dump7000.rdb<br>dump8000.rdb</td></tr><tr><td>logfile</td><td>日志文件位置</td><td>/usr/local/cluster-redis/logs/redis6000.log<br>/usr/local/cluster-redis/logs/redis7000.log<br>/usr/local/cluster-redis/logs/redis8000.log</td></tr><tr><td>pidfile</td><td>pid文件位置</td><td>/var/run/redis6000.pid<br>/var/run/redis7000.pid<br>/var/run/redis8000.pid</td></tr></tbody></table><h3 id="②步骤"><a href="#②步骤" class="headerlink" title="②步骤"></a>②步骤</h3><ul><li>第一步：创建/usr/local/cluster-redis目录</li><li>第二步：把原始未经修改的redis.conf复制到/usr/local/cluster-redis目录</li><li>第三步：把/usr/local/cluster-redis目录下的redis.conf复制为redis6000.conf</li><li>第四步：按照既定计划修改redis6000.conf中的相关配置项<ul><li>daemonize yes</li><li>dir</li><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li><li>第五步：复制redis6000.conf为redis7000.conf</li><li>第六步：修改redis7000.conf中的相关配置项<ul><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li><li>第七步：复制redis6000.conf为redis8000.conf</li><li>第八步：修改redis8000.conf中的相关配置项<ul><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li></ul><h3 id="③启动Redis主从复制集群"><a href="#③启动Redis主从复制集群" class="headerlink" title="③启动Redis主从复制集群"></a>③启动Redis主从复制集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/cluster-redis/redis6000.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/cluster-redis/redis7000.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/cluster-redis/redis8000.conf</span><br></pre></td></tr></table></figure><p>使用redis-cli停止指定服务器的命令格式如下：<br><code>/usr/local/bin/redis-cli -h IP地址 -p 端口号 shutdown</code></p><h2 id="3-主从关系"><a href="#3-主从关系" class="headerlink" title="3.主从关系"></a>3.主从关系</h2><h3 id="①查看主从关系"><a href="#①查看主从关系" class="headerlink" title="①查看主从关系"></a>①查看主从关系</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6000&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br></pre></td></tr></table></figure><p>刚刚启动的集群服务器中每一个节点服务器都认为自己是主服务器。需要建立主从关系。</p><h3 id="②设定主从关系"><a href="#②设定主从关系" class="headerlink" title="②设定主从关系"></a>②设定主从关系</h3><p>在从机上指定主机位置即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SLAVEOF 127.0.0.1 6000</span><br></pre></td></tr></table></figure><h3 id="③取消主从关系"><a href="#③取消主从关系" class="headerlink" title="③取消主从关系"></a>③取消主从关系</h3><p>在从机上执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SLAVEOF NO ONE</span><br></pre></td></tr></table></figure><h2 id="4-初步测试"><a href="#4-初步测试" class="headerlink" title="4.初步测试"></a>4.初步测试</h2><ul><li><p>测试1：在主机写入数据，在从机查看</p></li><li><p>测试2：在从机写入数据报错。配置文件中的依据是：slave-read-only yes</p></li><li><p>测试3：主机执行SHUTDOWN看从机状态</p><p>从机依旧是slave状态，显示主机下线，可以查询数据</p></li><li><p>测试4：主机恢复启动，看从机状态</p><p>显示主机上线，可以查询数据</p></li><li><p>测试5：从机SHUTDOWN，此时主机写入数据，从机恢复启动查看状态。重新设定主从关系后看新写入的数据是否同步。</p><p>从机重新启动又变成master状态，需要重新建立主从关系才可以同步主机新写的数据。</p></li></ul><h2 id="5-哨兵模式"><a href="#5-哨兵模式" class="headerlink" title="5.哨兵模式"></a>5.哨兵模式</h2><h3 id="①作用"><a href="#①作用" class="headerlink" title="①作用"></a>①作用</h3><p>通过哨兵服务器监控master/slave实现主从复制集群的自动管理。</p><p><img src="https://zsy0216.github.io/image/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/redis/p04.png" alt="p04"></p><h3 id="②相关概念"><a href="#②相关概念" class="headerlink" title="②相关概念"></a>②相关概念</h3><h4 id="1-主观下线"><a href="#1-主观下线" class="headerlink" title="[1]主观下线"></a>[1]主观下线</h4><p>1台哨兵检测到某节点服务器下线。</p><h4 id="2-客观下线"><a href="#2-客观下线" class="headerlink" title="[2]客观下线"></a>[2]客观下线</h4><p>认为某个节点服务器下线的哨兵服务器达到指定数量。这个数量后面在哨兵的启动配置文件中指定。</p><h3 id="③配置方式"><a href="#③配置方式" class="headerlink" title="③配置方式"></a>③配置方式</h3><p>简单起见我们只配置一台哨兵。我们所需要做的就是创建一个哨兵服务器运行所需要的配置文件。</p><p>新建并编辑sentinel的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/cluster-redis/sentinel.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置文件加入：</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6000 1</span><br></pre></td></tr></table></figure><table><thead><tr><th>格式</th><th>sentinel monitor 为主机命名 主机IP 主机端口号 将主机判定为下线时需要Sentinel同意的数量</th></tr></thead><tbody><tr><td>例子</td><td>sentinel monitor mymaster 127.0.0.1 6000 1</td></tr></tbody></table><h3 id="④启动哨兵"><a href="#④启动哨兵" class="headerlink" title="④启动哨兵"></a>④启动哨兵</h3><p>根据新建的sentinel的配置文件启动redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/cluster-redis/sentinel.conf --sentinel</span><br></pre></td></tr></table></figure><p>下面是哨兵模式的日志打印情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动哨兵模式，根据配置指定主服务器，并自动建立主从关系</span></span><br><span class="line">+monitor master mymaster 127.0.0.1 6000 quorum 1</span><br><span class="line">8516:X 17 Oct 20:45:45.960 * </span><br><span class="line">+slave slave 127.0.0.1:8000 127.0.0.1 8000 @ mymaster 127.0.0.1 6000</span><br><span class="line">8516:X 17 Oct 20:45:45.961 * </span><br><span class="line">+slave slave 127.0.0.1:7000 127.0.0.1 7000 @ mymaster 127.0.0.1 6000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown7000从服务器 从服务器[主观下线]</span></span><br><span class="line">+sdown slave 127.0.0.1:7000 127.0.0.1 7000 @ mymaster 127.0.0.1 6000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7000从服务器重新启动</span></span><br><span class="line">+reboot slave 127.0.0.1:7000 127.0.0.1 7000 @ mymaster 127.0.0.1 6000</span><br><span class="line">-sdown slave 127.0.0.1:7000 127.0.0.1 7000 @ mymaster 127.0.0.1 6000</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 从服务器会重新设置主从关系到主服务器</span></span></span><br><span class="line">+convert-to-slave slave 127.0.0.1:7000 127.0.0.1 7000 @ mymaster 127.0.0.1 6000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> shotdown6000主服务器------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 主服务器[主观下线]</span></span></span><br><span class="line">+sdown master mymaster 127.0.0.1 6000</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 主服务器[客观下线]</span></span></span><br><span class="line">+odown master mymaster 127.0.0.1 6000 #quorum 1/1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 选举leader</span></span></span><br><span class="line">+vote-for-leader 55717050322c1b4fc6888971e37d3dc2b6131cd4 1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 把其中一个从服务器设置为主服务器，并将其他作为从服务器</span></span></span><br><span class="line">+failover-state-send-slaveof-noone slave 127.0.0.1:8000 127.0.0.1 8000 @ mymaster 127.0.0.1 6000</span><br><span class="line">+switch-master mymaster 127.0.0.1 6000 127.0.0.1 8000</span><br><span class="line">+slave slave 127.0.0.1:7000 127.0.0.1 7000 @ mymaster 127.0.0.1 8000</span><br><span class="line">+slave slave 127.0.0.1:6000 127.0.0.1 6000 @ mymaster 127.0.0.1 8000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动原来的主服务器6000 </span></span><br><span class="line">-sdown slave 127.0.0.1:6000 127.0.0.1 6000 @ mymaster 127.0.0.1 8000</span><br><span class="line">+convert-to-slave slave 127.0.0.1:6000 127.0.0.1 6000 @ mymaster 127.0.0.1 8000</span><br></pre></td></tr></table></figure><h1 id="九、发布订阅"><a href="#九、发布订阅" class="headerlink" title="九、发布订阅"></a>九、发布订阅</h1><h2 id="1-订阅一个频道"><a href="#1-订阅一个频道" class="headerlink" title="1.订阅一个频道"></a>1.订阅一个频道</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE cctv1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) "subscribe"</span><br><span class="line">2) "cctv1"</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><h2 id="2-在一个频道上发布信息"><a href="#2-在一个频道上发布信息" class="headerlink" title="2.在一个频道上发布信息"></a>2.在一个频道上发布信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH cctv1 weather</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE cctv1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) "subscribe"</span><br><span class="line">2) "cctv1"</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) "message"</span><br><span class="line">2) "cctv1"</span><br><span class="line">3) "weather"</span><br></pre></td></tr></table></figure><h1 id="十、Jedis"><a href="#十、Jedis" class="headerlink" title="十、Jedis"></a>十、Jedis</h1><p>代码示例：<a href="https://github.com/zsy0216/JedisDemo" target="_blank" rel="noopener">Github-JedisDemo</a></p><h2 id="1-一个对比"><a href="#1-一个对比" class="headerlink" title="1.一个对比"></a>1.一个对比</h2><table><thead><tr><th></th><th>MySQL</th><th>Redis</th></tr></thead><tbody><tr><td>连接</td><td>Connection</td><td>Jedis</td></tr><tr><td>连接池</td><td>C3P0等等</td><td>JedisPool</td></tr><tr><td>操作完成</td><td>关闭连接</td><td>关闭连接</td></tr></tbody></table><h2 id="2-Redis准备"><a href="#2-Redis准备" class="headerlink" title="2.Redis准备"></a>2.Redis准备</h2><h3 id="①理解Redis配置文件中bind配置项含义"><a href="#①理解Redis配置文件中bind配置项含义" class="headerlink" title="①理解Redis配置文件中bind配置项含义"></a>①理解Redis配置文件中bind配置项含义</h3><p>bind后面跟的ip地址是客户端访问Redis时使用的IP地址。看下面例子：<br>| bind值          | 访问方式                       |<br>| ————— | —————————— |<br>| 127.0.0.1       | ./redis-cli -h 127.0.0.1       |<br>| 192.168.200.100 | ./redis-cli -h 192.168.200.100 |</p><h3 id="②查看Linux系统本机IP"><a href="#②查看Linux系统本机IP" class="headerlink" title="②查看Linux系统本机IP"></a>②查看Linux系统本机IP</h3><p>远程客户端访问Linux服务器时不能使用127.0.0.1，要使用网络上的实际IP。可以用ifconfig命令查看。</p><h3 id="③将Redis配置文件中的bind配置项设置为本机IP。"><a href="#③将Redis配置文件中的bind配置项设置为本机IP。" class="headerlink" title="③将Redis配置文件中的bind配置项设置为本机IP。"></a>③将Redis配置文件中的bind配置项设置为本机IP。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind [你的实际IP]</span><br><span class="line">bind 192.168.252.128</span><br></pre></td></tr></table></figure><h2 id="3-Jedis"><a href="#3-Jedis" class="headerlink" title="3.Jedis"></a>3.Jedis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定Redis服务器的IP地址和端口号</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.252.128"</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行ping命令</span></span><br><span class="line">String ping = jedis.ping();</span><br><span class="line">System.out.println(ping);   <span class="comment">// PONG</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h2 id="4-JedisPool"><a href="#4-JedisPool" class="headerlink" title="4.JedisPool"></a>4.JedisPool</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明Linux服务器IP地址</span></span><br><span class="line">String host = <span class="string">"192.168.252.128"</span>;</span><br><span class="line"><span class="comment">//声明Redis端口号</span></span><br><span class="line"><span class="keyword">int</span> port = Protocol.DEFAULT_PORT;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接池对象</span></span><br><span class="line">JedisPool jedisPool = <span class="keyword">new</span> JedisPool(host, port);</span><br><span class="line"><span class="comment">//获取Jedis对象连接Redis</span></span><br><span class="line">Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行具体操作</span></span><br><span class="line">String ping = jedis.ping();</span><br><span class="line">System.out.println(ping);  <span class="comment">// PONG</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">jedisPool.close();</span><br></pre></td></tr></table></figure><p>代码示例：<a href="https://github.com/zsy0216/JedisDemo" target="_blank" rel="noopener">Github-JedisDemo</a></p>]]></content>
      
      
      <categories>
          
          <category> 分布式架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper学习记录</title>
      <link href="/2019/10/18/Zookeeper%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/10/18/Zookeeper%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Zookeeper"><a href="#1-Zookeeper" class="headerlink" title="1. Zookeeper"></a>1. Zookeeper</h1><p><img src="https://zsy0216.github.io/image/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/zookeeper/001.jpg" alt="graphic"></p><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1    简介"></a>1.1    简介</h2><blockquote><p>ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services. All of these kinds of services are used in some form or another by distributed applications. Each time they are implemented there is a lot of work that goes into fixing the bugs and race conditions that are inevitable. Because of the difficulty of implementing these kinds of services, applications initially usually skimp on them, which make them brittle in the presence of change and difficult to manage. Even when done correctly, different implementations of these services lead to management complexity when the applications are deployed.</p></blockquote><h2 id="1-2-树形目录结构"><a href="#1-2-树形目录结构" class="headerlink" title="1.2    树形目录结构"></a>1.2    树形目录结构</h2><p><img src="https://zsy0216.github.io/image/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/zookeeper/002.gif" alt="img"></p><p>ZooKeeper使用树形结构管理数据。而且以“/”作为树形结构的根节点。树形结构中的每一个节点都称为“znode”。文件系统中的目录可以存放其他目录和文件，znode中可以存放其他znode，也可以对应一个具体的值。znode和它对应的值之间是键值对的关系。</p><p>每一个znode上同时还有一套状态信息，称为：stat。</p><h2 id="1-3-异步通知机制"><a href="#1-3-异步通知机制" class="headerlink" title="1.3    异步通知机制"></a>1.3    异步通知机制</h2><p><img src="https://zsy0216.github.io/image/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/zookeeper/003.gif" alt="img"></p><p>在分布式项目中随着业务功能越来越多，具体的功能模块也会越来越多，一个大型的电商项目能达到几十个模块甚至更多。这么多业务模块的工程有可能需要共享一些信息，这些信息一旦发生变化，在各个相关模块工程中手动逐一修改会非常麻烦，甚至可能发生遗漏，严重的可能导致系统崩溃，造成经济损失。</p><p>使用ZooKeeper的通知机制后，各个模块工程在特定znode上设置Watcher（观察者）来监控当前节点上值的变化。一旦Watcher检测到了数据变化就会立即通知模块工程，从而自动实现“一处修改，处处生效”的效果。</p><h2 id="1-4-leader-follower集群"><a href="#1-4-leader-follower集群" class="headerlink" title="1.4    leader-follower集群"></a>1.4    leader-follower集群</h2><p><img src="https://zsy0216.github.io/image/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/zookeeper/004.gif" alt="img"></p><h1 id="2-Zookeeper安装"><a href="#2-Zookeeper安装" class="headerlink" title="2. Zookeeper安装"></a>2. Zookeeper安装</h1><h2 id="2-1-环境准备——JDK"><a href="#2-1-环境准备——JDK" class="headerlink" title="2.1 环境准备——JDK"></a>2.1 环境准备——JDK</h2><p>·Zookeeper需要在JVM虚拟机上运行，所以一定要保证有JDK支持。</p><ol><li><p>下载jdk-8u231-linux-x64.tar.gz到/opt目录</p></li><li><p>解压到/opt目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /opt/jdk-8u231-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> JAVA_HOME 目录：/opt/jdk1.8.0_231</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后加上</span></span><br><span class="line">JAVA_HOME=/opt/jdk1.8.0_231</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> :wq 保存退出</span></span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br><span class="line"><span class="meta">#</span><span class="bash"> /opt/jdk1.8.0_231</span></span><br><span class="line">echo $PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> /opt/jdk1.8.0_231/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin</span></span><br><span class="line"></span><br><span class="line">java -version</span><br><span class="line"><span class="meta">#</span><span class="bash"> java version <span class="string">"1.8.0_231"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-2-下载Zookeeper"><a href="#2-2-下载Zookeeper" class="headerlink" title="2.2 下载Zookeeper"></a>2.2 下载Zookeeper</h2><p>下载zookeeper-3.4.9.tar.gz到/opt目录</p><h2 id="2-3-解压"><a href="#2-3-解压" class="headerlink" title="2.3 解压"></a>2.3 解压</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /opt/zookeeper-3.4.9.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2-4-准备配置文件"><a href="#2-4-准备配置文件" class="headerlink" title="2.4 准备配置文件"></a>2.4 准备配置文件</h2><p>将解压完文件的配置文件名称改为zoo.cfg，这是Zookeeper的默认要求。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/zookeeper-3.4.9/conf/zoo_sample.cfg /opt/zookeeper-3.4.9/conf/zoo.cfg</span><br></pre></td></tr></table></figure><p>Zookeeper要求配置文件的文件名必须是：zoo.cfg</p><h2 id="2-5-创建数据目录"><a href="#2-5-创建数据目录" class="headerlink" title="2.5 创建数据目录"></a>2.5 创建数据目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/zookeeper-3.4.9/data</span><br></pre></td></tr></table></figure><h2 id="2-6-在zoo-cfg中配置数据目录的位置"><a href="#2-6-在zoo-cfg中配置数据目录的位置" class="headerlink" title="2.6 在zoo.cfg中配置数据目录的位置"></a>2.6 在zoo.cfg中配置数据目录的位置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/zookeeper-3.4.9/conf/zoo.cfg</span><br><span class="line">dataDir=/opt/zookeeper-3.4.9/data</span><br></pre></td></tr></table></figure><h1 id="3-Zookeeper服务器端操作"><a href="#3-Zookeeper服务器端操作" class="headerlink" title="3. Zookeeper服务器端操作"></a>3. Zookeeper服务器端操作</h1><h2 id="3-1-zoo-cfg文件解读"><a href="#3-1-zoo-cfg文件解读" class="headerlink" title="3.1    zoo.cfg文件解读"></a>3.1    zoo.cfg文件解读</h2><p><strong><code>tickTime</code></strong><br>       通信心跳数,ZooKeeper服务器心跳时间，单位毫秒<br>       ZooKeeper使用的基本时间，服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳，时间单位为毫秒。<br>       用于心跳机制，并且设置最小的session超时时间为两倍心跳时间(session的最小超时时间是2<em>tickTime)。<br>*</em><code>initLimit</code>**       LF初始通信时限<br>       集群中的Follower跟随者服务器(F)与Leader领导者服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）。<br>       投票选举新Leader的初始化时间，Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。<br>       Leader允许Follower在initLimit时间内完成这个工作。<br><strong><code>syncLimit</code></strong><br>       LF同步通信时限<br>       集群中Leader与Follower之间的最大响应时间单位，假如响应超过syncLimit * tickTime，Leader认为Follwer死掉，从服务器列表中删除Follwer。<br>       在运行过程中，Leader负责与ZooKeeper集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。<br>       如果L发出心跳包在syncLimit之后，还没有从F那收到响应，那么就认为这个F已经不在线了。<br><strong><code>dataDir</code></strong><br>       数据文件目录+数据持久化路径<br>       保存内存数据库快照信息的位置，如果没有其他说明，更新的事务日志也保存到数据库。<br><strong><code>clientPort</code></strong><br>       客户端连接端口</p><h2 id="3-2-常用命令"><a href="#3-2-常用命令" class="headerlink" title="3.2 常用命令"></a>3.2 常用命令</h2><h3 id="服务器与客户端"><a href="#服务器与客户端" class="headerlink" title="服务器与客户端"></a>服务器与客户端</h3><p>启动服务器：<code>./zkServer.sh start</code></p><p>停止服务器：<code>./zkServer.sh stop</code></p><p>启动客户端：<code>./zkCli.sh</code></p><p>退出客户端：[zk: localhost:2181(CONNECTED) 6]  <code>quit</code></p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>查看当前znode中所包含的内容</p><h3 id="ls2"><a href="#ls2" class="headerlink" title="ls2"></a>ls2</h3><p>查看当前节点数据并能看到更新次数等数据</p><h3 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h3><p>查看节点状态</p><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><p><code>create [-s] [-e] path data acl</code></p><p>普通创建：不带有-s、-e参数</p><p>-s：含有序列</p><p>-e：临时（重启或者超时消失）</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>设置节点的具体值</p><p>set 节点 value值</p><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>获得节点的值</p><p>get节点</p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>可以删除指定znode，当该znode拥有子znode时，必须先删除其所有子znode，否则操作将失败。</p><h3 id="rmr"><a href="#rmr" class="headerlink" title="rmr"></a>rmr</h3><p>rmr命令可用于代替delete命令，rmr是一个递归删除命令，如果发生指定节点拥有子节点时，rmr命令会首先删除子节点。</p><h2 id="3-3-Zookeeper节点类型"><a href="#3-3-Zookeeper节点类型" class="headerlink" title="3.3    Zookeeper节点类型"></a>3.3    Zookeeper节点类型</h2><ol><li><p>PERSISTENT-持久化目录节点</p><p>客户端与zookeeper断开连接后，该节点依旧存在</p></li><li><p>PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点</p><p><code>create -s</code></p><p>客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号</p></li><li><p>EPHEMERAL-临时目录节点</p><p><code>create -e</code></p><p>客户端与zookeeper断开连接后，该节点被删除</p></li><li><p>EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点</p><p><code>create -s -e</code></p><p>客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号</p></li></ol><h2 id="3-4-Zookeeper节点状态"><a href="#3-4-Zookeeper节点状态" class="headerlink" title="3.4    Zookeeper节点状态"></a>3.4    Zookeeper节点状态</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>znode维护了一个stat结构，这个stat包含数据变化的版本号、访问控制列表变化、还有时间戳。版本号和时间戳一起，可让ZooKeeper验证缓存和协调更新。每次znode的数据发生了变化，版本号就增加。</p><p>例如：无论何时客户端检索数据，它也一起检索数据的版本号。并且当客户端执行更新或删除时，客户端必须提供他正在改变的znode的版本号。如果它提供的版本号和真实的数据版本号不一致，更新将会失败。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>czxid：引起这个znode创建的zxid，创建节点的事务的zxid（ZooKeeper Transaction Id）</p><p>ctime：znode被创建的毫秒数(从1970年开始)</p><p>mzxid：znode最后更新的zxid</p><p>mtime：znode最后修改的毫秒数(从1970年开始)</p><p>pZxid：znode最后更新的子节点zxid</p><p>cversion：znode子节点变化号，znode子节点修改次数</p><p>dataversion：znode数据变化号</p><p>aclVersion：znode访问控制列表的变化号</p><p>ephemeralOwner：如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0。</p><p>dataLength：znode的数据长度</p><p>numChildren：znode子节点数量</p><h2 id="3-5-四字命令"><a href="#3-5-四字命令" class="headerlink" title="3.5 四字命令"></a>3.5 四字命令</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>ZooKeeper支持某些特定的四字命令，他们大多是用来查询ZooKeeper服务的当前状态及相关信息的，使用时通过telnet或nc向ZooKeeper提交相应命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@right bin]# echo ruok | nc localhost 2181</span><br><span class="line"></span><br><span class="line">imok[root@right bin]#</span><br></pre></td></tr></table></figure><h3 id="nc命令"><a href="#nc命令" class="headerlink" title="nc命令"></a>nc命令</h3><p>nc命令需要安装对应的程序才可以使用。</p><p>yum install -y nc</p><h3 id="常用四字命令"><a href="#常用四字命令" class="headerlink" title="常用四字命令"></a>常用四字命令</h3><p>ruok：测试服务是否处于正确状态。如果确实如此，那么服务返回“imok ”，否则不做任何响应</p><p>stat：输出关于性能和连接的客户端的列表</p><p>conf：输出相关服务配置的详细信息</p><p>cons：列出所有连接到服务器的客户端的完全的连接 /会话的详细信息。包括“接受 / 发送”的包数量、会话id 、操作延迟、最后的操作执行等等信息</p><p>dump：列出未经处理的会话和临时节点</p><p>envi：输出关于服务环境的详细信息（区别于conf命令）</p><p>reqs：列出未经处理的请求</p><p>wchs：列出服务器watch的详细信息</p><p>wchc：通过session列出服务器watch的详细信息，它的输出是一个与watch相关的会话的列表</p><p>wchp：通过路径列出服务器 watch的详细信息。它输出一个与 session相关的路径</p><h1 id="4-Java客户端"><a href="#4-Java客户端" class="headerlink" title="4. Java客户端"></a>4. Java客户端</h1><p>代码示例：<a href="https://github.com/zsy0216/ZookeeperDemo" target="_blank" rel="noopener">Github-ZookeeperDemo</a></p><h2 id="4-1-依赖信息"><a href="#4-1-依赖信息" class="headerlink" title="4.1 依赖信息"></a>4.1 依赖信息</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-使用Junit测试类方法"><a href="#4-2-使用Junit测试类方法" class="headerlink" title="4.2 使用Junit测试类方法"></a>4.2 使用Junit测试类方法</h2><ul><li>创建Zookeeper对象：用于连接Zookeeper服务；</li><li>Zookeeper构造器参数：<ul><li>connectString：192.168.252.128:2181</li><li>sessionTimeOut：5000</li><li>Watcher对象：监控对象，数据有变化时调用方法返回通知</li></ul></li></ul><p><strong>修改节点数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 连接Zookeeper服务的对象</span></span><br><span class="line">    ZooKeeper zooKeeper;</span><br><span class="line">    <span class="comment">// 连接信息</span></span><br><span class="line">    String connectString = <span class="string">"192.168.252.128:2181"</span>;</span><br><span class="line">    <span class="comment">// 连接超时时间 ms</span></span><br><span class="line">    <span class="keyword">int</span> sessionTimeOut = <span class="number">5000</span>;</span><br><span class="line"><span class="comment">// Watcher对象用于检测节点是否变更，变更时调用对象内的方法异步通知</span></span><br><span class="line">    Watcher watcher = <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 在代码块中初始化Zookeeper对象</span></span><br><span class="line">            zooKeeper = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeOut, watcher);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateNodeData</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 要操作的节点的路径</span></span><br><span class="line">        String path = <span class="string">"/animal/cat"</span>;</span><br><span class="line">        <span class="comment">// 获取当前节点值</span></span><br><span class="line">        <span class="keyword">byte</span>[] resultByteArray = zooKeeper.getData(path, <span class="keyword">false</span>, <span class="keyword">new</span> Stat());</span><br><span class="line">        <span class="comment">// 将字节数组封装为字符串，输出</span></span><br><span class="line">        String result = <span class="keyword">new</span> String(resultByteArray);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取新值字符串对应的字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] newValueByteArray = <span class="keyword">new</span> String(<span class="string">"mimi"</span>).getBytes();</span><br><span class="line">        <span class="comment">// 指定当前操作所基于的版本号，不确定可使用-1</span></span><br><span class="line">        <span class="keyword">int</span> version = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 执行节点值的修改</span></span><br><span class="line">        Stat stat = zooKeeper.setData(path, newValueByteArray, version);</span><br><span class="line">        <span class="comment">// 获取最新的版本号</span></span><br><span class="line">        <span class="keyword">int</span> newVersion = stat.getVersion();</span><br><span class="line">        System.out.println(<span class="string">"newVersion="</span> + newVersion);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取最新的值，输出</span></span><br><span class="line">        resultByteArray = zooKeeper.getData(path,<span class="keyword">false</span>,<span class="keyword">new</span> Stat());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(resultByteArray));</span><br><span class="line">        zooKeeper.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码示例：<a href="https://github.com/zsy0216/ZookeeperDemo" target="_blank" rel="noopener">Github-ZookeeperDemo</a></p><h1 id="5-异步通知机制"><a href="#5-异步通知机制" class="headerlink" title="5. 异步通知机制"></a>5. 异步通知机制</h1><h2 id="5-1-工作机制介绍"><a href="#5-1-工作机制介绍" class="headerlink" title="5.1    工作机制介绍"></a>5.1    工作机制介绍</h2><blockquote><p>客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。</p><p>ZooKeeper支持Watch（观察）机制，客户端可以在每个znode结点上设置一个Watcher（观察者）。如果被观察服务端的znode结点有变更，那么Watcher就会被触发，这个Watcher所属的客户端将接收到一个通知包被告知结点已经发生变化，这就是把相应的事件通知给设置过Watcher的Client端。</p><p>ZooKeeper里的所有读取操作：getData(),getChildren()和exists()都有设置Watch的选项。</p><p>总结成一句话：<strong>ZooKeeper的观察机制是一种异步回调的触发机制</strong>。</p><p>当数据有了变化时zkServer向客户端发送一个Watch通知，这是个一次性动作，触发一次就失效了。</p><p>如果想继续Watch的话，需要客户端重新设置Watcher。因此如果你得到了一个Watch事件，并且在将来继续得到节点变化通知，那么就必须另外设置一个新的Watcher继续观察。</p><p>节点有不同的改动方式。可以认为ZooKeeper维护两个观察列表：数据观察和子节点观察。getData()和exists()设置数据观察。getChildren()设置子节点观察。此外，还可以认为不同的返回数据有不同的观察。getData()和exists()返回节点的数据，而getChildren()返回子节点列表。所以，setData()将为znode触发数据观察。成功的create()将为新创建的节点触发数据观察，为其父节点触发子节点观察。成功的delete()将会为被删除的节点触发数据观察以及子节点观察（因为节点不能再有子节点了），为其父节点触发子节点观察。如果一个节点设置存在观察时尚未创建，并且在断开连接后执行节点创建以及删除操作，那么这个节点上设置的观察事件客户端接收不到，事件会丢失。</p></blockquote><h2 id="5-2-一次性通知"><a href="#5-2-一次性通知" class="headerlink" title="5.2 一次性通知"></a>5.2 一次性通知</h2><p>下面的代码测试继续在上面使用Java客户端连接Zookeeper的测试类中添加，共用测试类中声明的Zookeeper对象，新增测试方法测试一次性通知。</p><p>Watcher调用一次方法后会释放资源，所以只能进行一次性通知。</p><p>注意：异步通知机制要依赖于log4j的日志信息查看具体内容，这里需要导入log4j的配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNoticeOnce</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 要操作的节点路径</span></span><br><span class="line">    String path = <span class="string">"/animal/cat"</span>;</span><br><span class="line">    Watcher watcher = <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="comment">// 当前Watcher检测到节点值的变化，会调用process方法（异步通知）</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">            System.err.println(<span class="string">"接收到了通知，值发生了修改！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 修改前的值</span></span><br><span class="line">    <span class="keyword">byte</span>[] oldValue = zooKeeper.getData(path, watcher, <span class="keyword">new</span> Stat());</span><br><span class="line">    System.out.println(<span class="string">"oldValue="</span> + oldValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 持续运行程序，等待Zookeeper修改值进行异步通知</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.err.println(<span class="string">"当前方法要执行的业务逻辑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-持续通知"><a href="#5-3-持续通知" class="headerlink" title="5.3 持续通知"></a>5.3 持续通知</h2><p>下面的代码测试继续在上面使用Java客户端连接Zookeeper的测试类中添加，共用测试类中声明的Zookeeper对象，新增测试方法测试持续通知。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNoticeForever</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 要操作的节点路径</span></span><br><span class="line">    String path = <span class="string">"/animal/cat"</span>;</span><br><span class="line">    getDataWithNotice(zooKeeper, path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 持续运行程序，等待Zookeeper修改值进行异步通知</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.err.println(<span class="string">"当前方法要执行的业务逻辑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDataWithNotice</span><span class="params">(ZooKeeper zooKeeper, String path)</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] resultByteArray = zooKeeper.getData(path, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 以类似递归的方式调用getDataWithNotice()方法实现持续监控</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 这里不是真正的递归，这个process()方法是异步执行；</span></span><br><span class="line"><span class="comment">                 * 当getDataWithNotice()执行时，在创建完Watcher对象之后，继续执行到结束并释放资源</span></span><br><span class="line"><span class="comment">                 * 此时Watcher对象还在内存中，当接收到了修改时，再异步调用process()方法;</span></span><br><span class="line"><span class="comment">                 * 然后重新调用getDataWithNotice()方法，创建Watcher对象，实现持续监控。</span></span><br><span class="line"><span class="comment">                 * */</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"*接收到了修改*"</span>);</span><br><span class="line">                getDataWithNotice(zooKeeper, path);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="keyword">new</span> Stat());</span><br><span class="line"></span><br><span class="line">    String result = <span class="keyword">new</span> String(resultByteArray);</span><br><span class="line">    System.out.println(<span class="string">"当前节点值="</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-集群"><a href="#6-集群" class="headerlink" title="6. 集群"></a>6. 集群</h1><h2 id="6-1-数据通信机制"><a href="#6-1-数据通信机制" class="headerlink" title="6.1  数据通信机制"></a>6.1  数据通信机制</h2><p>同一台服务器上：IP地址一样，端口号必须得不一样</p><p>不同的服务器上：IP地址不一样，端口号可以用同一个</p><p>注意：启动完成后，会自动选举出leader/follower，leader和follower均可读可写，并进行数据的同步。</p><h2 id="6-2-搭建步骤"><a href="#6-2-搭建步骤" class="headerlink" title="6.2    搭建步骤"></a>6.2    搭建步骤</h2><h3 id="第1步：创建集群所在目录"><a href="#第1步：创建集群所在目录" class="headerlink" title="第1步：创建集群所在目录"></a>第1步：创建集群所在目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/cluster-zk</span><br></pre></td></tr></table></figure><h3 id="第2步：重新解压tar包到集群目录"><a href="#第2步：重新解压tar包到集群目录" class="headerlink" title="第2步：重新解压tar包到集群目录"></a>第2步：重新解压tar包到集群目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /opt/zookeeper-3.4.9.tar.gz -C /opt/cluster-zk/</span><br></pre></td></tr></table></figure><h3 id="第3步：复制新的解压目录"><a href="#第3步：复制新的解压目录" class="headerlink" title="第3步：复制新的解压目录"></a>第3步：复制新的解压目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /opt/cluster-zk/zookeeper-3.4.9/ /opt/cluster-zk/zkone</span><br></pre></td></tr></table></figure><h3 id="第4步：配置zkone"><a href="#第4步：配置zkone" class="headerlink" title="第4步：配置zkone"></a>第4步：配置zkone</h3><ol><li><p>创建zoo.cfg配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/cluster-zk/zkone/conf/zoo_sample.cfg /opt/cluster-zk/zkone/conf/zoo.cfg</span><br></pre></td></tr></table></figure></li><li><p>创建数据目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/cluster-zk/zkone/data</span><br></pre></td></tr></table></figure></li><li><p>在数据目录中创建编号文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/cluster-zk/zkone/data/myid</span><br></pre></td></tr></table></figure></li><li><p>编辑编号文件，内容就是当前服务器实例的编号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">myid</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>配置zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/cluster-zk/zkone/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> zoo.cfg</span></span><br><span class="line">dataDir=/opt/cluster-zk/zkone/data</span><br><span class="line">clientPort=1000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件末尾追加</span></span><br><span class="line">server.1=127.0.0.1:1001:1002</span><br><span class="line">server.2=127.0.0.1:2001:2002</span><br><span class="line">server.3=127.0.0.1:3001:3002</span><br><span class="line"><span class="meta">#</span><span class="bash">格式解释：server.服务器实例编号=IP地址:数据通信端口号:选举端口号</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="第5步：配置zktwo"><a href="#第5步：配置zktwo" class="headerlink" title="第5步：配置zktwo"></a>第5步：配置zktwo</h3><ol><li><p>把zktwo复制出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /opt/cluster-zk/zkone /opt/cluster-zk/zktwo</span><br></pre></td></tr></table></figure></li><li><p>修改myid文件中编号值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/cluster-zk/zktwo/data/myid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">myid</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure></li><li><p>修改zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/cluster-zk/zktwo/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">zoo.cfg</span></span><br><span class="line">dataDir=/opt/cluster-zk/zktwo/data</span><br><span class="line">clientPort=2000</span><br></pre></td></tr></table></figure></li></ol><h3 id="第6步：配置zkthree"><a href="#第6步：配置zkthree" class="headerlink" title="第6步：配置zkthree"></a>第6步：配置zkthree</h3><ol><li><p>把zkthree复制出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /opt/cluster-zk/zktwo /opt/cluster-zk/zkthree</span><br></pre></td></tr></table></figure></li><li><p>修改myid文件中编号值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/cluster-zk/zkthree/data/myid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">myid</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>修改zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/cluster-zk/zkthree/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">zoo.cfg</span></span><br><span class="line">dataDir=/opt/cluster-zk/zkthree/data</span><br><span class="line">clientPort=3000</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-3-创建操作服务器的可执行脚本"><a href="#6-3-创建操作服务器的可执行脚本" class="headerlink" title="6.3 创建操作服务器的可执行脚本"></a>6.3 创建操作服务器的可执行脚本</h2><h3 id="6-3-1-创建启动服务器命令脚本文件"><a href="#6-3-1-创建启动服务器命令脚本文件" class="headerlink" title="6.3.1 创建启动服务器命令脚本文件"></a>6.3.1 创建启动服务器命令脚本文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建并编辑文件</span></span><br><span class="line">vim /opt/cluster-zk/start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">start.sh</span></span><br><span class="line">/opt/cluster-zk/zkone/bin/zkServer.sh start</span><br><span class="line">/opt/cluster-zk/zktwo/bin/zkServer.sh start</span><br><span class="line">/opt/cluster-zk/zkthree/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><h3 id="6-3-2-创建停止服务器命令脚本文件"><a href="#6-3-2-创建停止服务器命令脚本文件" class="headerlink" title="6.3.2 创建停止服务器命令脚本文件"></a>6.3.2 创建停止服务器命令脚本文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建并编辑文件</span></span><br><span class="line">vim /opt/cluster-zk/stop.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">stop.sh</span></span><br><span class="line">/opt/cluster-zk/zkone/bin/zkServer.sh stop</span><br><span class="line">/opt/cluster-zk/zktwo/bin/zkServer.sh stop</span><br><span class="line">/opt/cluster-zk/zkthree/bin/zkServer.sh stop</span><br></pre></td></tr></table></figure><h3 id="6-3-3-创建查看服务器状态命令脚本文件"><a href="#6-3-3-创建查看服务器状态命令脚本文件" class="headerlink" title="6.3.3 创建查看服务器状态命令脚本文件"></a>6.3.3 创建查看服务器状态命令脚本文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建并编辑文件</span></span><br><span class="line">vim /opt/cluster-zk/status.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">status.sh</span></span><br><span class="line">/opt/cluster-zk/zkone/bin/zkServer.sh status</span><br><span class="line">/opt/cluster-zk/zktwo/bin/zkServer.sh status</span><br><span class="line">/opt/cluster-zk/zkthree/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><h3 id="6-3-4-给脚本文件设置可执行权限"><a href="#6-3-4-给脚本文件设置可执行权限" class="headerlink" title="6.3.4 给脚本文件设置可执行权限"></a>6.3.4 给脚本文件设置可执行权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /opt/cluster-zk/start.sh </span><br><span class="line">chmod 755 /opt/cluster-zk/stop.sh </span><br><span class="line">chmod 755 /opt/cluster-zk/status.sh</span><br></pre></td></tr></table></figure><h3 id="6-3-5-执行脚本命令"><a href="#6-3-5-执行脚本命令" class="headerlink" title="6.3.5 执行脚本命令"></a>6.3.5 执行脚本命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/opt/cluster-zk/start.sh </span><br><span class="line">/opt/cluster-zk/stop.sh </span><br><span class="line">/opt/cluster-zk/status.sh </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动命令执行完毕后查看状态，会自动选举出leader/follower</span></span><br></pre></td></tr></table></figure><h3 id="6-3-6-客户端登录"><a href="#6-3-6-客户端登录" class="headerlink" title="6.3.6 客户端登录"></a>6.3.6 客户端登录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/opt/zookeeper-3.4.9/bin/zkCli.sh -server 127.0.0.1:1000</span><br><span class="line">/opt/zookeeper-3.4.9/bin/zkCli.sh -server 127.0.0.1:2000</span><br><span class="line">/opt/zookeeper-3.4.9/bin/zkCli.sh -server 127.0.0.1:3000</span><br></pre></td></tr></table></figure><h3 id="6-3-7-客户端的测试"><a href="#6-3-7-客户端的测试" class="headerlink" title="6.3.7 客户端的测试"></a>6.3.7 客户端的测试</h3><p>此时zkone(127.0.0.1:1000)为leader，zktwo和zkthree为follower。</p><ul><li><p>测试1：follower-zktwo中写入数据</p><p><strong>follower可读可写，follower写的数据，其他follower(zkthree)和leader(zkone)都可以进行数据同步。</strong></p></li><li><p>测试2：follower-zktwo宕机</p><p><code>/opt/cluster-zk/zktwo/bin/zkServer.sh stop</code></p><p><strong>对其他follower(zkthree)和leader(zkone)无影响，数据同步正常。</strong></p></li></ul><ul><li><p>测试3：follower-zktwo重新启动</p><p><code>/opt/cluster-zk/zktwo/bin/zkServer.sh start</code></p><p>未自动连接时执行<code>connect 127.0.0.1:2000</code></p><p><strong>启动后，follower-zktwo自动进行数据同步，并自动设置自己为follower。</strong></p></li><li><p>测试4：leader-zkone宕机</p><p><code>/opt/cluster-zk/zkone/bin/zkServer.sh stop</code></p><p><strong>此时follower(zktwo,zkthree)连接正常，数据同步正常，并自动选举出新的leader。</strong></p></li><li><p>测试5：zk-one（曾经的leader）重新启动</p><p><code>/opt/cluster-zk/zkone/bin/zkServer.sh start</code></p><p>未自动连接时执行<code>connect 127.0.0.1:1000</code></p><p><strong>启动后数据同步正常，并自动设置自己为follower。</strong></p></li></ul><h2 id="6-4-集群中服务器数量"><a href="#6-4-集群中服务器数量" class="headerlink" title="6.4    集群中服务器数量"></a>6.4    集群中服务器数量</h2><p>结论：一般来说，集群中服务器数量最好设置为单数。</p><p>原则：集群中有超过一半的服务器正常工程，则整个集群判断为正常工作。对外提供服务时大致满足预期。</p><p>推导：</p><p>共2实例：宕机1实例，剩下1=2/2，没有超过一半。死亡容忍度为0。</p><p>共3实例：宕机1实例，剩下2&gt;3/2，超过一半。死亡容忍度为1。</p><p>共4实例：宕机1实例，剩下3&gt;4/2，超过一半。死亡容忍度为1。</p><p>共5实例：宕机2实例，剩下3&gt;5/2，超过一半。死亡容忍度为2。</p><p>共6实例：宕机2实例，剩下4&gt;6/2，超过一半。死亡容忍度为2。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo+zookeeper实现远程方法调用</title>
      <link href="/2019/10/18/dubbo-zookeeper%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/"/>
      <url>/2019/10/18/dubbo-zookeeper%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Dubbo介绍"><a href="#1-Dubbo介绍" class="headerlink" title="1. Dubbo介绍"></a>1. Dubbo介绍</h1><p>代码示例：<a href="https://github.com/zsy0216/DubboDemo" target="_blank" rel="noopener">Github</a></p><h2 id="1-1-RPC"><a href="#1-1-RPC" class="headerlink" title="1.1 RPC"></a>1.1 RPC</h2><p><strong>Remote Procedure Call</strong>：远程过程调用</p><p><img src="https://zsy0216.github.io/image/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/dubbo/1.png" alt="rpc"></p><h2 id="1-2-Dubbo架构"><a href="#1-2-Dubbo架构" class="headerlink" title="1.2 Dubbo架构"></a>1.2 Dubbo架构</h2><p><img src="https://zsy0216.github.io/image/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/dubbo/2.png" alt="dubbo"></p><p>Subscribe 订阅；签署；赞成</p><p>Monitor 监听器；监控器</p><h2 id="1-3-Dubbo在Zookeeper中注册信息的结构"><a href="#1-3-Dubbo在Zookeeper中注册信息的结构" class="headerlink" title="1.3 Dubbo在Zookeeper中注册信息的结构"></a>1.3 Dubbo在Zookeeper中注册信息的结构</h2><p><img src="https://zsy0216.github.io/image/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/dubbo/3.png" alt="zookeeper"></p><h1 id="2-Dubbo使用"><a href="#2-Dubbo使用" class="headerlink" title="2. Dubbo使用"></a>2. Dubbo使用</h1><h2 id="2-1-创建Common工程"><a href="#2-1-创建Common工程" class="headerlink" title="2.1 创建Common工程"></a>2.1 创建Common工程</h2><blockquote><p>group id：com.joker.dubbo</p><p>artifact id：dubbo-common</p><p>package：jar</p></blockquote><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p>com.joker.dubbo.entity.Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.joker.dubbo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(Integer empId, String empName, Double salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empId = empId;</span><br><span class="line">        <span class="keyword">this</span>.empName = empName;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter、setter略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建远程调用的接口"><a href="#创建远程调用的接口" class="headerlink" title="创建远程调用的接口"></a>创建远程调用的接口</h3><p>package com.joker.dubbo.service.EmployeeRemoteService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.joker.dubbo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.joker.dubbo.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRemoteService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">getEmployeeByConditionRemote</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-创建Provider工程"><a href="#2-2-创建Provider工程" class="headerlink" title="2.2 创建Provider工程"></a>2.2 创建Provider工程</h2><blockquote><p>group id：com.joker.dubbo</p><p>artifact id：dubbo-provider</p><p>package：war</p><p>依赖于：Common工程，使用其中的实体类和接口</p></blockquote><h3 id="依赖信息"><a href="#依赖信息" class="headerlink" title="依赖信息"></a>依赖信息</h3><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 依赖于dubbo-common --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.joker.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置log4j日志文件"><a href="#配置log4j日志文件" class="headerlink" title="配置log4j日志文件"></a>配置log4j日志文件</h3><p>log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,myConsole</span><br><span class="line">log4j.appender.myConsole=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.myConsole.Target=System.out</span><br><span class="line">log4j.appender.myConsole.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.myConsole.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br></pre></td></tr></table></figure><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-dubbo.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring配置文件中Dubbo的配置"><a href="#Spring配置文件中Dubbo的配置" class="headerlink" title="Spring配置文件中Dubbo的配置"></a>Spring配置文件中Dubbo的配置</h3><p>spring-dubbo.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo配置：指定当前Web应用名称，便于在注册中心中注册 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbo-provider"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo配置：指定注册中心的种类以及位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.252.128"</span> <span class="attr">port</span>=<span class="string">"2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo配置：指定Dubbo的Provider本身监听的端口号 consumer访问时要使用这个端口号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置接口实现类的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"employeeRemoteServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.joker.dubbo.service.impl.EmployeeRemoteServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo配置：给远程方法接口指定实现类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.joker.dubbo.service.EmployeeRemoteService"</span> <span class="attr">ref</span>=<span class="string">"employeeRemoteServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建远程调用接口的实现类"><a href="#创建远程调用接口的实现类" class="headerlink" title="创建远程调用接口的实现类"></a>创建远程调用接口的实现类</h3><p>com.joker.dubbo.service.impl.EmployeeRemoteServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.joker.dubbo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.joker.dubbo.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> com.joker.dubbo.service.EmployeeRemoteService;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.joker.dubbo.service.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2019/10/18 14:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zsy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeRemoteServiceImpl</span> <span class="keyword">implements</span> <span class="title">EmployeeRemoteService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmployeeByConditionRemote</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"***provider***:"</span> + employee);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假数据用于数据测试</span></span><br><span class="line">        List&lt;Employee&gt; empList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        empList.add(<span class="keyword">new</span> Employee(<span class="number">111</span>, <span class="string">"empName111"</span>, <span class="number">111.11</span>));</span><br><span class="line">        empList.add(<span class="keyword">new</span> Employee(<span class="number">222</span>, <span class="string">"empName222"</span>, <span class="number">222.22</span>));</span><br><span class="line">        empList.add(<span class="keyword">new</span> Employee(<span class="number">333</span>, <span class="string">"empName333"</span>, <span class="number">333.33</span>));</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册简单测试"><a href="#注册简单测试" class="headerlink" title="注册简单测试"></a>注册简单测试</h3><p>运行web项目，启动tomcat服务器，尝试连接Zookeeper，此时要确保服务器Zookeeper已启动</p><p>启动成功可以看到控制台日志打印心跳检查信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[2019-10-18 02:19:51,355] Artifact dubbo-provider:war exploded: Artifact is deployed successfully</span><br><span class="line">[2019-10-18 02:19:51,355] Artifact dubbo-provider:war exploded: Deploy took 24,538 milliseconds</span><br><span class="line">[DEBUG] 2019-10-18 14:20:01,235(31554) --&gt; [RMI TCP Connection(192.168.252.128:2181)] org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:758): Got ping response for sessionid: 0x16ddd844d9a0000 after 2ms  </span><br><span class="line">[DEBUG] 2019-10-18 14:20:11,241(41560) --&gt; [RMI TCP Connection(192.168.252.128:2181)] org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:758): Got ping response for sessionid: 0x16ddd844d9a0000 after 2ms</span><br></pre></td></tr></table></figure><p>此时到服务器端启动Zookeeper客户端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/opt/zookeeper3.4.9/bin/zkCli.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动后查看是否已经注册上provider的信息</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] ls /</span><br><span class="line">[animal, dubbo, zookeeper, fruits]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] ls /dubbo</span><br><span class="line">[com.joker.dubbo.service.EmployeeRemoteService]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] ls /dubbo/com.joker.dubbo.service.EmployeeRemoteService</span><br><span class="line">[configurators, providers]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] ls /dubbo/com.joker.dubbo.service.EmployeeRemoteService/providers</span><br><span class="line"><span class="meta">[dubbo%</span><span class="bash">3A%2F%2F192.168.252.1%3A20880%2Fcom.joker.dubbo.service.EmployeeRemoteService%3Fanyhost%3Dtrue%26application%3Ddubbo-provider%26dubbo%3D2.5.5%26generic%3Dfalse%26interface%3Dcom.joker.dubbo.service.EmployeeRemoteService%26methods%3DgetEmployeeByConditionRemote%26pid%3D6364%26revision%3D1.0-SNAPSHOT%26side%3Dprovider%26timestamp%3D1571379571726]</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 4]</span><br></pre></td></tr></table></figure><p>通过<code>ls /dubbo/com.joker.dubbo.service.EmployeeRemoteService/providers</code>我们看到下面注册的provider，通过Url解码得到内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo://192.168.252.1:20880/com.joker.dubbo.service.EmployeeRemoteService?anyhost=true&amp;application=dubbo-provider&amp;dubbo=2.5.5&amp;generic=false&amp;interface=com.joker.dubbo.service.EmployeeRemoteService&amp;methods=getEmployeeByConditionRemote&amp;pid=6364&amp;revision=1.0-SNAPSHOT&amp;side=provider&amp;timestamp=1571379571726</span><br></pre></td></tr></table></figure><p>至此，证明Provider配置成功！</p><h2 id="2-3-创建Consumer工程"><a href="#2-3-创建Consumer工程" class="headerlink" title="2.3 创建Consumer工程"></a>2.3 创建Consumer工程</h2><blockquote><p>group id：com.joker.dubbo</p><p>artifact id：dubbo-consumer</p><p>package：war</p></blockquote><h3 id="依赖信息-1"><a href="#依赖信息-1" class="headerlink" title="依赖信息"></a>依赖信息</h3><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 依赖于dubbo-common --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.joker.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-mvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jsp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3-b06<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置log4j日志配置文件"><a href="#配置log4j日志配置文件" class="headerlink" title="配置log4j日志配置文件"></a>配置log4j日志配置文件</h3><p>log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,myConsole</span><br><span class="line">log4j.appender.myConsole=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.myConsole.Target=System.out</span><br><span class="line">log4j.appender.myConsole.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.myConsole.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br></pre></td></tr></table></figure><h3 id="配置web-xml-1"><a href="#配置web-xml-1" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置SpringMVC"><a href="#配置SpringMVC" class="headerlink" title="配置SpringMVC"></a>配置SpringMVC</h3><p>spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC相关配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.joker.dubbo.handler"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo配置：当前应用名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbo-consumer"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo配置：指定Dubbo注册中心类型和位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.252.128"</span> <span class="attr">port</span>=<span class="string">"2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo配置：引用Provider提供的可以远程调用的服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"employeeRemoteService"</span> <span class="attr">interface</span>=<span class="string">"com.joker.dubbo.service.EmployeeRemoteService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建Handler类映射远程接口请求"><a href="#创建Handler类映射远程接口请求" class="headerlink" title="创建Handler类映射远程接口请求"></a>创建Handler类映射远程接口请求</h3><p>com.joker.dubbo.handler.EmployeeHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.joker.dubbo.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.joker.dubbo.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> com.joker.dubbo.service.EmployeeRemoteService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.joker.dubbo.handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2019/10/18 14:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zsy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeRemoteService employeeRemoteService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/get/emp/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmpList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee(<span class="number">666</span>, <span class="string">"empName666"</span>, <span class="number">666.66</span>);</span><br><span class="line">        List&lt;Employee&gt; empList = employeeRemoteService.getEmployeeByConditionRemote(employee);</span><br><span class="line">        <span class="keyword">for</span> (Employee emp : empList) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建返回成功页面"><a href="#创建返回成功页面" class="headerlink" title="创建返回成功页面"></a>创建返回成功页面</h3><p>success.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt; Success !&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="注册简单测试-1"><a href="#注册简单测试-1" class="headerlink" title="注册简单测试"></a>注册简单测试</h3><p>运行consumer的web项目，启动一个新的tomcat服务器，并设置不同的端口号；</p><p>同provider，启动完成后可以看到控制台日志打印心跳检查信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] 2019-10-18 16:21:14,947(31499) --&gt; [RMI TCP Connection(192.168.252.128:2181)] org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:758): Got ping response for sessionid: 0x16ddd844d9a000b after 3ms  </span><br><span class="line">[DEBUG] 2019-10-18 16:21:24,947(41499) --&gt; [RMI TCP Connection(192.168.252.128:2181)] org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:758): Got ping response for sessionid: 0x16ddd844d9a000b after 1ms  </span><br><span class="line">[DEBUG] 2019-10-18 16:21:34,949(51501) --&gt; [RMI TCP Connection(192.168.252.128:2181)] org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:758): Got ping response for sessionid: 0x16ddd844d9a000b after 1ms</span><br></pre></td></tr></table></figure><p>此时到Zookeeper服务端查看服务注册信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 21] ls /dubbo/com.joker.dubbo.service.EmployeeRemoteService</span><br><span class="line">[consumers, configurators, routers, providers]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 22]</span><br></pre></td></tr></table></figure><p>这是可以看到Zookeeper注册中心不仅有providers，还有了新注册的consumers；</p><p>这时执行命令：<code>ls /dubbo/com.joker.dubbo.service.EmployeeRemoteService/consumers</code></p><p>可以看到我们注册的consumer信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[consumer%</span><span class="bash">3A%2F%2F192.168.252.1%2Fcom.joker.dubbo.service.EmployeeRemoteService%3Fapplication%3Ddubbo-consumer%26category%3Dconsumers%26check%3Dfalse%26dubbo%3D2.5.5%26interface%3Dcom.joker.dubbo.service.EmployeeRemoteService%26methods%3DgetEmployeeByConditionRemote%26pid%3D13468%26revision%3D1.0-SNAPSHOT%26side%3Dconsumer%26timestamp%3D1571386846115]</span></span><br></pre></td></tr></table></figure><p>通过URL解码可以看到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consumer://192.168.252.1/com.joker.dubbo.service.EmployeeRemoteService?application=dubbo-consumer&amp;category=consumers&amp;check=false&amp;dubbo=2.5.5&amp;interface=com.joker.dubbo.service.EmployeeRemoteService&amp;methods=getEmployeeByConditionRemote&amp;pid=13468&amp;revision=1.0-SNAPSHOT&amp;side=consumer&amp;timestamp=1571386846115</span><br></pre></td></tr></table></figure><p>这里显示的是调用接口的消费者信息。</p><hr><p>这时打开浏览器输出<a href="http://localhost:8081/consumer/get/emp/list" target="_blank" rel="noopener">http://localhost:8081/consumer/get/emp/list</a>  </p><p>注意：本项目中配置consumer的tomcat端口号为8081</p><p>可以看到成功页面返回！</p><p>同时看到tomcat运行控制台打印信息：</p><p>consumer端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee&#123;empId=111, empName='empName111', salary=111.11&#125;</span><br><span class="line">Employee&#123;empId=222, empName='empName222', salary=222.22&#125;</span><br><span class="line">Employee&#123;empId=333, empName='empName333', salary=333.33&#125;</span><br></pre></td></tr></table></figure><p>provider端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***provider***:Employee&#123;empId=666, empName='empName666', salary=666.66&#125;</span><br></pre></td></tr></table></figure><p>证明远程方法调用成功，consumer调用了远程方法，并传递给provider一个Employee对象。</p><p>provider成功接收，并执行getEmployeeByConditionRemote()方法，返回一个Employee的List。</p><p>至此，consumer配置成功！</p><p>Dubbo+Zookeeper实现远程调用成功！</p><p>代码示例：<a href="https://github.com/zsy0216/DubboDemo" target="_blank" rel="noopener">Github</a></p>]]></content>
      
      
      <categories>
          
          <category> 分布式架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-cli3 配置跨域问题</title>
      <link href="/2019/10/01/Vue-cli-CROS/"/>
      <url>/2019/10/01/Vue-cli-CROS/</url>
      
        <content type="html"><![CDATA[<h1 id="关于vue-cli3中配置请求跨域的问题"><a href="#关于vue-cli3中配置请求跨域的问题" class="headerlink" title="关于vue-cli3中配置请求跨域的问题"></a>关于vue-cli3中配置请求跨域的问题</h1><p>根据Vue CLI3官方文档，<a href="https://cli.vuejs.org/zh/config/#devserver-proxy" target="_blank" rel="noopener"></a></p><p>需要在<code>vue.config.js</code>文件中配置<code>devServer.proxy</code>选项来解决跨域问题。</p><ol><li><p>关于<code>vue.config.js</code>文件</p><p>此文件在vue-cli3中不会自动生成，需要手动在项目根目录下创建。</p></li><li><p>配置<code>devServer.proxy</code>选项</p><p>以豆瓣的电影接口为例，进行如下配置。</p><ul><li><code>proxy</code>中的<code>/j/search_subjects</code>代表匹配<code>api</code>的路径，当命中请求中的<code>url</code>时进入这个代理，进行跨域请求；</li><li><code>target</code>代表想要跨域的目标<code>url</code>；</li><li><code>changeOrigin</code>：true代表允许跨域；</li><li><code>pathRewrite</code>：代表当匹配到上面的路径<code>/j/search_subjects</code>时需要在<code>target</code>后面拼接什么路径;</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/j/search_subjects'</span>: &#123;</span><br><span class="line">                target: <span class="string">'https://movie.douban.com'</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/j/search_subjects'</span>: <span class="string">'/j/search_subjects'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在发起请求时：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.axios.get(<span class="string">"/j/search_subjects?type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;page_limit=5&amp;page_start=0"</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(responses);</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p><strong>可以看到，当在此发起get请求时，在上面的配置文件中匹配到了请求url中的“/j/search_subjects”，此时配置就会生效，把这个请求拼接到上面的target后面，请求不同域中远端的资源。</strong></p><p>而此时打开浏览器开发者模式，通过network可以看到，</p><p>这个请求的路径显示为：<code>http://localhost:8080/j/search_subjects?type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;page_limit=5&amp;page_start=0</code>,</p><p>而实际请求的地址却是：<code>https://movie.douban.com/j/search_subjects?type=movie&amp;tag=%E7%83%AD%E9%97%A8&amp;page_limit=5&amp;page_start=0</code></p><p>这就是实际解决跨域的方式，通过把域名修改来达到跨域的目的，而实际访问的路径却是另一个域名的资源，这就是通过proxy来实现跨域的方法。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6入门</title>
      <link href="/2019/10/01/ES6%E5%85%A5%E9%97%A8/"/>
      <url>/2019/10/01/ES6%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>ES6：ECMScript6</p><p>首先，一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p><ul><li><p>ECMAScript是一个国际通过的标准化脚本语言；</p></li><li><p>JavaScript由ECMAScript和DOM、BOM三者组成；</p></li><li><p>可以简单理解为：ECMAScript是JavaScript的语言规范，JavaScript是ECMAScript的实现和扩展；</p></li></ul><p>2011 年，ECMAScript 5.1 版发布。之前我们大部分人用的也就是ES5。</p><p>2015 年 6 月，ECMAScript 6 正式通过，成为国际标准。</p><h1 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h1><ul><li>ES5 中作用域有：全局作用域、函数作用域（function scope）。没有块作用域（block scope）的概念。</li><li>ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域。</li></ul><h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><p>变量声明的三种方式：<code>var</code>、<code>let</code>、<code>const</code></p><p><code>var</code>声明的变量属于函数作用域（function scope），函数内部有效，可以在同一个作用域重复声明和赋值；</p><p><code>let</code>声明的变量属于块级作用域（block scope），块作用域内部有效；</p><p><code>const</code>声明的变量定义为常量，使用时必须初始化（赋值），属于块级作用域，块级作用域内部有效；</p><table><thead><tr><th align="center">比较</th><th align="center">var</th><th align="center">let</th><th align="center">const</th></tr></thead><tbody><tr><td align="center"><strong>所属作用域</strong></td><td align="center">函数作用域</td><td align="center">块级作用域</td><td align="center">块级级作用域</td></tr><tr><td align="center"><strong>是否可以重复声明</strong></td><td align="center">可以</td><td align="center">作用域内不可以</td><td align="center">作用域内不可以</td></tr><tr><td align="center"><strong>是否可以重复赋值</strong></td><td align="center">可以</td><td align="center">可以</td><td align="center">不可以</td></tr><tr><td align="center"><strong>未赋值时打印</strong></td><td align="center">undefined</td><td align="center">undefined</td><td align="center">必须赋值</td></tr></tbody></table><h2 id="临时性死区和变量提升"><a href="#临时性死区和变量提升" class="headerlink" title="临时性死区和变量提升"></a>临时性死区和变量提升</h2><p>临时性死区：Temporal Dead Zone（TDZ）；</p><p>变量提升：Hoisting；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(color); <span class="comment">//undefined 变量提升</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">'yellow'</span>;</span><br></pre></td></tr></table></figure><p>在JavaScript中，function中variables（变量）会被提升；</p><p>变量提升是指JavaScript将声明移至当前作用域(scope)顶部的行为；</p><p>所以以上代码可以理解为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color;</span><br><span class="line"><span class="built_in">console</span>.log(color); <span class="comment">//undefined</span></span><br><span class="line">color = <span class="string">'yellow'</span>;</span><br></pre></td></tr></table></figure><p>对于let和const关键字来说也有变量提升的概念，但是在let和const中还存在一个临时性死区的概念，即在当前变量的作用域开始到变量声明之前都是处在临时性死区中的，处于临时性死区的变量引用时会报referenceError错误；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(color); <span class="comment">//referenceError 临时性死区</span></span><br><span class="line"><span class="keyword">let</span> color = <span class="string">'yellow'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="var、let、const取舍之道"><a href="#var、let、const取舍之道" class="headerlink" title="var、let、const取舍之道"></a>var、let、const取舍之道</h2><ul><li>默认使用<code>const</code>声明变量（use <code>const</code> by default)</li><li>当需要改变变量值时使用<code>let</code>（only use <code>let</code> if rebinding is needed）</li><li>尽量不使用<code>var</code>（<code>var</code>shouldn’t be used in ES6）</li></ul><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p><code>arrow function</code></p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">18</span>,<span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//一般方式</span></span><br><span class="line"><span class="keyword">const</span> double = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数,当且仅当只有一个参数时可以省略小括号，无参数也不可省略</span></span><br><span class="line"><span class="keyword">const</span> double2 = numbers.map(<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数,当函数内部只有一句时可以省略大括号，称为隐式返回</span></span><br><span class="line"><span class="keyword">const</span> double2 = numbers.map(<span class="function">(<span class="params">number, i</span>)=&gt;</span> number * <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>箭头函数属于匿名函数，可以通过赋值给变量得到匿名函数引用；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greet = <span class="function"><span class="params">number</span> =&gt;</span> &#123;alert(<span class="string">'The number is $&#123;number&#125;'</span>)&#125;;</span><br></pre></td></tr></table></figure><p>箭头函数没有其this值，它的this值是继承于它的父作用域的；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Jelly = &#123;</span><br><span class="line">name: <span class="string">'jelly'</span>,</span><br><span class="line">    hobbies: [<span class="string">'coding'</span>, <span class="string">'Sleeping'</span>, <span class="string">'Reading'</span>],</span><br><span class="line">    printHobbies: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hobbies.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// Window,全局变量,严格模式下undefined</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//修改为箭头函数即可</span></span><br><span class="line">        <span class="keyword">this</span>.hobbies.map(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// Jelly</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p>ES6提供了模板字符串，使用模板字符串可以更简洁的进行字符串的拼接，也可以直接在模板字符串中书写html代码，由此可以方便的引用模板；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="string">'tom'</span>;</span><br><span class="line"><span class="keyword">const</span> pass = <span class="string">'123'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sentence = <span class="string">'username: '</span>+ user + <span class="string">', password: '</span>+ pass;</span><br><span class="line"><span class="built_in">console</span>.log(sentence);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sentence2 = <span class="string">`username: <span class="subst">$&#123;user&#125;</span> , password: <span class="subst">$&#123;pass&#125;</span>`</span>; <span class="comment">//使用模板字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(sentence2);</span><br></pre></td></tr></table></figure><h1 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user =  &#123;</span><br><span class="line">name : <span class="string">'tom'</span>,</span><br><span class="line">    pass : <span class="string">'123'</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span> : n, pass, age = <span class="number">18</span> &#125; = user</span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">// 'tom'</span></span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(age)  <span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>我们在结构对象变量后面可以设置变量的别名，此时初始化的为别名变量，原名变量为声明即为undefined；</p><p>如果我们在解构声明变量时，定义了对象中不存在的属性，那么这个变量的值为<code>undefined</code>。我们可以给变量设置默认值，当对象中没有对应的属性时，这个变量的值就是设置的默认值。</p><h1 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>];</span><br><span class="line"><span class="keyword">const</span> [one, two] = numbers; <span class="comment">// 获得第一个和第二个位置的值</span></span><br><span class="line"><span class="keyword">const</span> [one, ,three] = numbers; <span class="comment">// 获得第一、三位置的值</span></span><br><span class="line"><span class="keyword">const</span> [one, ...others] = numbers; <span class="comment">// 获得第一和后面所有的值</span></span><br><span class="line"><span class="built_in">console</span>.log(one, others) <span class="comment">// one ['two', 'three', 'four']</span></span><br></pre></td></tr></table></figure><p>数组解构和对象解构类似，也可以在变量声明的后面起别名，赋初值等。。。</p><h1 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for of循环"></a>for of循环</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通for循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; numbers.length; i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(numbers[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forEach遍历</span></span><br><span class="line">numbers.forEach(<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(number);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//for in循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> numbers)&#123; <span class="comment">//每次循环的是索引值，且遍历过程中不可中断(break)</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for of循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> number <span class="keyword">of</span> numbers)&#123; <span class="comment">//每次循环的是属性值；可使用break和continue</span></span><br><span class="line"><span class="built_in">console</span>.log(number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for of 循环可以利用entries()同时获得索引值和属性值；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [index, number] <span class="keyword">of</span> numbers.entries())&#123;</span><br><span class="line"><span class="built_in">console</span>(index,number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象转数组"><a href="#对象转数组" class="headerlink" title="对象转数组"></a>对象转数组</h1><p>当你需要使用数组的方法迭代一个可迭代对象时，而该对象又不是数组类型，你可以使用Arrat.from()方法把对象转化为数组类型的对象；</p><p>Arrat.from(object)可以把其他对象转化为数组；</p><h1 id="Array-of-创建数组"><a href="#Array-of-创建数组" class="headerlink" title="Array.of()创建数组"></a>Array.of()创建数组</h1><p>Array.of()弥补了Array构造函数的不足，不管传入多少参数返回的都是这些参数组成的数组；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>) <span class="comment">// (3) [empty × 3]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>,<span class="number">1</span>) <span class="comment">// [4, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">4</span>) <span class="comment">//[4]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">4</span>,<span class="number">1</span>) <span class="comment">//[4, 1]</span></span><br></pre></td></tr></table></figure><h1 id="数组新方法"><a href="#数组新方法" class="headerlink" title="数组新方法"></a>数组新方法</h1><table><thead><tr><th align="left">方法</th><th>说明</th></tr></thead><tbody><tr><td align="left">find((element, index, array)=&gt;{})</td><td>该方法接收的参数是一个函数，其中有三个<strong>可选</strong>参数，element表示要遍历的元素，index表示索引，array表示调用方法的数组，当找到数组中的元素或索引后立即返回该元素或索引；</td></tr><tr><td align="left">findIndex()</td><td>该方法与find方法类似，返回的是寻找元素的索引值；</td></tr><tr><td align="left">some()</td><td>参数是一个函数，返回布尔值，true的条件是数组中含有至少一个条件满足</td></tr><tr><td align="left">every()</td><td>参数、返回值同some，true的条件是数组中所有条件都满足</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">quantity</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">quantity</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'orange'</span>, <span class="attr">quantity</span>: <span class="number">5</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// find()</span></span><br><span class="line"><span class="keyword">const</span> banana = fruits.find(<span class="function"><span class="params">fruit</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(fruit.name === <span class="string">'banana'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// findIndex()</span></span><br><span class="line"><span class="keyword">const</span> bananaIndex = fruits.findIndex(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.name === <span class="string">'banana'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//some()</span></span><br><span class="line"><span class="keyword">const</span> isEnough = fruits.some(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.quantity &gt; <span class="number">0</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//every()</span></span><br><span class="line"><span class="keyword">const</span> isAllEnough = fruits.every(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.quantity &gt; <span class="number">0</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h1><p>ES6中可以使用<code>...params</code>接收参数列表中的从声明位置到最后的所有参数，param返回为一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...numbers</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.reduce(<span class="function">(<span class="params">prev,curr</span>) =&gt;</span> prev + curr, <span class="number">0</span>)</span><br><span class="line">&#125; <span class="comment">//reduce()方法接收一个函数callbackfn作为累加器(accumulator)，数组中的每一个值（开始合并），最后成为一个值。</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">//6</span></span><br></pre></td></tr></table></figure><h1 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h1><p>扩展运算符和剩余参数作用相反，剩余参数是把参数序列整合成一个数组；</p><p>而扩展运算符是把一个可遍历对象的每一个元素扩展为一个新的参数序列；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> youngers = [<span class="string">'George'</span>, <span class="string">'John'</span>, <span class="string">'Thomas'</span>];</span><br><span class="line"><span class="keyword">const</span> olders = [<span class="string">'James'</span>, <span class="string">'Adrew'</span>, <span class="string">'Martin'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//const members = [];</span></span><br><span class="line"><span class="comment">//members.concat(youngers);</span></span><br><span class="line"><span class="comment">//members.concat(olders);</span></span><br><span class="line"><span class="keyword">const</span> members = [...youngers, <span class="string">'mary'</span>, ...olders];</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组之间的赋值</span></span><br><span class="line"><span class="keyword">const</span> currentMembers = [...members];</span><br><span class="line"><span class="comment">// const currentMembers = members 此时传递的是引用，修改其中一个值，另一个数组也会随之改变；</span></span><br><span class="line"><span class="comment">// const currentMembers = [].concat(members) //可以替换为这种方式</span></span><br></pre></td></tr></table></figure><h1 id="对象字面量的扩展"><a href="#对象字面量的扩展" class="headerlink" title="对象字面量的扩展"></a>对象字面量的扩展</h1><p>在ES6中，当对象属性名和参入参数名相同时，不需要再重复两次；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> sex = <span class="string">'male'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Tom = &#123;</span><br><span class="line"><span class="comment">//name : name,</span></span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    sex,</span><br><span class="line">    func()&#123;&#125; <span class="comment">//对象方法的简写</span></span><br><span class="line">    <span class="comment">//func:function()&#123;&#125; //简写前</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="promise解决回调地狱"><a href="#promise解决回调地狱" class="headerlink" title="promise解决回调地狱"></a>promise解决回调地狱</h1><p>需求：确保第二个函数是在第一个函数执行之后执行（函数可能是发起的ajax请求）；</p><p>回调地狱是指在上述需求中当需要嵌套很多函数时，不得不把下一个函数写在上一个函数的回调函数中，这样层层嵌套就会导致回调地狱；</p><p>ES6中提供了promise来解决回调地狱的问题，提高代码的可读性；</p><p><strong>回调地狱</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>('http://api.github.com/users', data =&gt;&#123;</span><br><span class="line">user = data[<span class="number">0</span>].login;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第二个请求要使用第一个的内容，所以要在第一个函数执行完再执行</span></span><br><span class="line">    $.<span class="keyword">get</span>(`http://api.github.com/users/$&#123;user&#125;/repos<span class="string">`, data =&gt;&#123;</span></span><br><span class="line"><span class="string">    //业务逻辑</span></span><br><span class="line"><span class="string">        //或许还需要第三个请求在第二个请求执行后执行</span></span><br><span class="line"><span class="string">        //这里就形成了回调地狱</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><p><strong>promise</strong>：</p><p>axios 提供了promise功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回promise</span></span><br><span class="line"><span class="keyword">const</span> usersPromise = axios.get(<span class="string">'https://api.github.com/users'</span>);</span><br><span class="line"></span><br><span class="line">userPromise</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">//response是请求成功后返回的响应对象</span></span><br><span class="line">user = response.data[<span class="number">0</span>].login;</span><br><span class="line">    <span class="comment">//返回的promise</span></span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">`http://api.github.com/users/<span class="subst">$&#123;user&#125;</span>/repos`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span>&#123; <span class="comment">//可以直接在后面链接调用</span></span><br><span class="line">    <span class="comment">//业务逻辑</span></span><br><span class="line">    <span class="comment">//其他请求</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123; <span class="comment">//可以使用catch获取错误信息</span></span><br><span class="line"><span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="自定义promise"><a href="#自定义promise" class="headerlink" title="自定义promise"></a>自定义promise</h2><p>可以自定义promise来完成需要的异步操作，在js中所有代码都是单线程执行的。</p><p>可以通过Promise的构造方法来自定义一个Promise，构造方法中是一个回调函数，函数有两个参数；</p><ul><li>resolve保存的是成功之后返回的信息；</li><li>reject保存的是失败的信息；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">resolve(<span class="string">'这里是成功之后返回的信息'</span>);</span><br><span class="line">    reject(<span class="built_in">Error</span>(<span class="string">'这里是调用失败返回的信息'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(data) &#125;) <span class="comment">//这里是成功之后返回的信息</span></span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(err) &#125;) <span class="comment">//这里是调用失败返回的信息</span></span><br></pre></td></tr></table></figure><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p>ES6中引入了一种新的基本数据类型：<code>Symbol</code></p><p>之前还有五种基本数据类型：<code>undefined</code>,<code>boolean</code>,<code>string</code>,<code>number</code>,<code>object</code>,<code>null</code></p><p>Symbol用来解决属性名冲突的问题；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tom = <span class="built_in">Symbol</span>(<span class="string">'tom'</span>); <span class="comment">//定义方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">[<span class="built_in">Symbol</span>(<span class="string">'mary'</span>)] : &#123;<span class="attr">age</span>: <span class="number">12</span>, <span class="attr">sex</span>:<span class="string">'famale'</span> &#125;,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">'mary'</span>)] : &#123;<span class="attr">age</span>: <span class="number">15</span>, <span class="attr">sex</span>:<span class="string">'famale'</span> &#125;, <span class="comment">//不会覆盖上面的mary</span></span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">'jack'</span>)] : &#123;<span class="attr">age</span>: <span class="number">13</span>, <span class="attr">sex</span>:<span class="string">'male'</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Symbol类型的值不能够被获取遍历，除非使用ES6提供的Object.getOwnPropertySymbols(people);</p><h1 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moduleName <span class="keyword">from</span> <span class="string">'module'</span></span><br></pre></td></tr></table></figure><p>定义模块</p><p><code>name.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myname = <span class="string">'tom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> myname; <span class="comment">//默认导出,只能有一个默认导出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myname = <span class="string">'tom'</span>; <span class="comment">//命名导出，其他文件引入时命名需要保持一致性，且需要使用大括号包裹，可以有多个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getname</span>(<span class="params">name</span>)</span>&#123; <span class="comment">//函数导出同命名导出</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用模块</p><p><code>app.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myname <span class="keyword">from</span> <span class="string">'./name'</span>; <span class="comment">//默认导出引用方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;myname,getname&#125; <span class="keyword">from</span> <span class="string">'./name'</span>; <span class="comment">//命名导出+函数导出引用方式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myname) <span class="comment">//tom</span></span><br></pre></td></tr></table></figure><p>注意：相同的导出和引用使用一个即可，上面代码是为了简化书写；</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动实现SSM分页逻辑</title>
      <link href="/2019/09/10/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0SSM%E5%88%86%E9%A1%B5%E9%80%BB%E8%BE%91/"/>
      <url>/2019/09/10/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0SSM%E5%88%86%E9%A1%B5%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h1 id="第一种方法：查询出所有数据再分页"><a href="#第一种方法：查询出所有数据再分页" class="headerlink" title="第一种方法：查询出所有数据再分页"></a>第一种方法：查询出所有数据再分页</h1><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><ol><li>分页时，需要获得前台传来的两个参数，分别为<code>pageNo</code>(第几页数据)，<code>pageSize</code>(每页的条数);</li><li>根据这两个参数来计算出前端需要的数据是查出数据list中的开始索引和结束索引；</li><li>利用List 的subList方法来分割查询出来的所有数据并返回；</li></ol><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="1-获取参数"><a href="#1-获取参数" class="headerlink" title="1. 获取参数"></a>1. 获取参数</h3><p>这里返回的是json数据接口，实现方法在service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/allPage"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAllPage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">   @RequestParam(required = <span class="keyword">true</span>,defaultValue = <span class="string">"1"</span>)</span> Integer pageNo,</span></span><br><span class="line"><span class="function">   @<span class="title">RequestParam</span><span class="params">(required = <span class="keyword">false</span>,defaultValue = <span class="string">"5"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customerService.findAllPage(pageNo,pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-截取数据"><a href="#2-截取数据" class="headerlink" title="2. 截取数据"></a>2. 截取数据</h3><p>CustomerServiceImpl.java</p><ul><li>里面的pageUtil类，iterCustomer()方法，JsonUtil类在下面有所介绍，抽离这些类或者方法的目的是提高代码的复用性，减少代码冗余；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAllPage</span><span class="params">(Integer pageNo, Integer pageSize)</span> </span>&#123;</span><br><span class="line">    List&lt;Customer&gt; customers = customerDao.findAll();</span><br><span class="line">    List&lt;Map&lt;String, String&gt;&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    PageUtil&lt;Customer&gt; pageUtil = <span class="keyword">new</span> PageUtil&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Customer customer : pageUtil.pageList(customers, pageNo, pageSize)&#123;</span><br><span class="line">        resultList.add(iterCustomer(customer));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JsonUtil.toJSON(resultList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==PageUtil.java==</p><ul><li><p>这个类是我抽取出来的一个截取List的工具类，创建对象时需要传一个泛型，类型为处理列表List中的类型；</p></li><li><p>该类对象调用pageList方法即可返回一个截取好长度的List 数组；</p></li><li><p>pageList方法有三个参数，</p><ul><li>第一个参数为保存所有数据的List数组；</li><li>第二个参数为页码；</li><li>第三个参数为每一页显示的数据条数；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageUtil</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> beginIndex;<span class="comment">//起始索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> endIndex;<span class="comment">//终止索引</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">pageList</span><span class="params">(List&lt;T&gt; list, <span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line"></span><br><span class="line">        beginIndex = (pageNo - <span class="number">1</span>) * pageSize;</span><br><span class="line">        endIndex = pageNo * pageSize &gt; size ? size : pageNo * pageSize;</span><br><span class="line">        List&lt;T&gt; resultList = list.subList(beginIndex, endIndex);</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iterCustomer()方法</p><ul><li>作用是得到一个map存储一个Customer实例的值，用键值对表示；</li><li>参数为需要包装的类对象；</li><li>返回值为一个Map对象，里面存储了参数类对象的一些信息；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">iterCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        resultMap.put(<span class="string">"id"</span>, customer.getId().toString());</span><br><span class="line">        resultMap.put(<span class="string">"name"</span>, customer.getName());</span><br><span class="line">        resultMap.put(<span class="string">"phone"</span>, customer.getPhone());</span><br><span class="line">        resultMap.put(<span class="string">"email"</span>, customer.getEmail());</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JsonUtil.java</p><ul><li>作用是封装Jackson，返回一个json字符串；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用jackson 转换 json 数据的第一步</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="keyword">static</span> String jsonString=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSON</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//jackson转任意object对象 为json 字符串 </span></span><br><span class="line">            jsonString = MAPPER.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二种方法：用SQL分页，只查询当前页所需要的数据"><a href="#第二种方法：用SQL分页，只查询当前页所需要的数据" class="headerlink" title="第二种方法：用SQL分页，只查询当前页所需要的数据"></a>第二种方法：用SQL分页，只查询当前页所需要的数据</h1><h2 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h2><ul><li><p>第一种方法在数据量比较小时可以使用，但当数据量非常大时，如果我们仅需要某一页的几条数据，而去查找所有数据，显得没有必要，或者说代价太大，所有我们现在采用第二种分页方式；</p></li><li><p>第二种方法与第一种类似，获取前端传来的页码和每页显示的条数，通过自定义SQL语句查询数据库来得到需要的数据；</p></li><li><p>sql分页参考：</p><p><a href="https://zsy0216.github.io/2019/09/05/MySQL复杂查询/" target="_blank" rel="noopener">Mysql复杂查询</a>  或</p><p><a href="https://blog.csdn.net/Ep_Little_prince/article/details/100571739" target="_blank" rel="noopener">【MySQL】条件查询之排序聚合分组分页查询</a></p></li></ul><h2 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="1-获取参数-1"><a href="#1-获取参数-1" class="headerlink" title="1. 获取参数"></a>1. 获取参数</h3><p><strong>分析</strong></p><ul><li>参数中，pageNo是前端传来的页码，即第几页；pageSize是每一页要显示的条数，默认为5；</li><li>使用SQL分页时，查询语句中需要的参数为显示数据在数据库中的索引和每页显示的数据条目数；<ul><li>计算索引的公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数；</li></ul></li><li>在这里还要判断一下前端传来的页码数是否超出总数据最大的分页数，如果超出则显示最大页数；<ul><li>最大页数计算：<code>int maxPage =(int) Math.ceil(count/pageSize.doubleValue());</code></li></ul></li></ul><p>CustomerController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CustomerService customerService；</span><br><span class="line">    </span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/allSql"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllPageSql</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(required = <span class="keyword">true</span>,defaultValue = <span class="string">"1"</span>)</span> Integer pageNo,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(required = <span class="keyword">false</span>,defaultValue = <span class="string">"5"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * pageSize 是每页显示的条数</span></span><br><span class="line"><span class="comment">         * pageNo 是页码，sql分页传递的第一个参数是开始的索引；</span></span><br><span class="line"><span class="comment">         * 计算公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//数据总数</span></span><br><span class="line">        <span class="keyword">int</span> count = customerService.count();</span><br><span class="line">        <span class="comment">//计算最大页码</span></span><br><span class="line">        <span class="keyword">int</span> maxPage =(<span class="keyword">int</span>) Math.ceil(count/pageSize.doubleValue());</span><br><span class="line">        <span class="comment">//当前页码超出最大页码返回最大页码值：</span></span><br><span class="line">        pageNo = pageNo&gt;maxPage?maxPage:pageNo;</span><br><span class="line">        <span class="comment">//分页开始的索引值</span></span><br><span class="line">        <span class="keyword">int</span> index = (pageNo - <span class="number">1</span>) * pageSize &gt; count ? count : (pageNo - <span class="number">1</span>) * pageSize;</span><br><span class="line">        <span class="keyword">return</span> customerService.findAllPageSql(index, pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-分层调用方法"><a href="#2-分层调用方法" class="headerlink" title="2.分层调用方法"></a>2.分层调用方法</h3><p>CustomerServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">CustomerService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CustomerDao customerDao;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllPageSql</span><span class="params">(Integer index, Integer pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JsonUtil.toJSON(customerDao.findAllPageSql(index, pageSize));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CustomerDao.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> </span>&#123;   </span><br><span class="line"><span class="function">List&lt;Customer&gt; <span class="title">findAllPageSql</span><span class="params">(Integer index,Integer pageSize)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-定制sql"><a href="#3-定制sql" class="headerlink" title="3.定制sql"></a>3.定制sql</h3><p>CustomerMapper.xml</p><ul><li><p>注意，这里参数为两个，获取参数时要使用#{param1}#{param2},或者通过封装Map的形式传参；</p></li><li><p>sql分页参考：</p><p><a href="https://zsy0216.github.io/2019/09/05/MySQL复杂查询/" target="_blank" rel="noopener">Mysql复杂查询</a>  或</p><p><a href="https://blog.csdn.net/Ep_Little_prince/article/details/100571739" target="_blank" rel="noopener">【MySQL】条件查询之排序聚合分组分页查询</a></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.vue.dao.CustomerDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllPageSql"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.vue.entity.Customer"</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_customer LIMIT #&#123;param1&#125;,#&#123;param2&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Mapper.xml映射文件获取多个参数参考</strong>:</p><p><a href="https://blog.csdn.net/Ep_Little_prince/article/details/100687848" target="_blank" rel="noopener">Mybatis中的Mapper.xml映射文件sql查询接收多个参数</a>   或</p><p><a href="https://zsy0216.github.io/2019/09/10/Mapper接收多个参数/" target="_blank" rel="noopener">Mybatis中的Mapper.xml映射文件sql查询接收多个参数</a></p><hr><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1><ul><li>以上就是SSM框架不用PageHelper插件实现分页的全过程，推荐使用第二种定制SQL查询，因为此种查询方法更加符合分页逻辑的实现，每次只查询需要的数据，而不是每次都要查询所有数据，故效率更高。</li><li>有问题可以一起交流：<ul><li><a href="https://zsy0216.github.io/" target="_blank" rel="noopener">my blog</a></li><li>邮箱：<a href="mailto:594983498@qq.com" target="_blank" rel="noopener">594983498@qq.com</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis中的Mapper.xml映射文件sql查询接收多个参数</title>
      <link href="/2019/09/10/Mapper%E6%8E%A5%E6%94%B6%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0/"/>
      <url>/2019/09/10/Mapper%E6%8E%A5%E6%94%B6%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>​    我们都知道，在Mybatis中的Mapper.xml映射文件可以定制动态SQL，在dao层定义的接口中定义的参数传到xml文件中之后，在查询之前mybatis会对其进行动态解析,通常使用#{}接收，下面介绍几种比较常用的用法。    </p><h2 id="前言-与-区别"><a href="#前言-与-区别" class="headerlink" title="前言#{}与${}区别"></a>前言#{}与${}区别</h2><ul><li><p>#{} 在SQL动态解析之后，编译将#{}替换为占位符？去替换参数，可以防止sql注入；</p></li><li><p>#{} 只是表示占位，与参数的名字无关，如果只有一个参数会自动对应，下面会介绍多个参数的问题；</p></li><li><p>${} 是进行字符串拼接，直接取出参数值，放到sql语句中；</p></li><li><p>使用注意点，当表名作为变量时，必须使用${}获取参数作为表名进行查询，否则会出现语法错误；</p></li></ul><p>总结：</p><ul><li>sql语句动态生成的时候，使用${}</li></ul><ul><li>sql语句中某个参数进行占位的时候用#{}</li></ul><h2 id="接收多个参数"><a href="#接收多个参数" class="headerlink" title="接收多个参数"></a>接收多个参数</h2><p>​    遇到这个问题是在昨天实现分页的时候接收参数时遇到了错误，最后用第一种方法解决，但是怀着路漫漫其修远兮的态度，吾必将上下而求索其他用法，所以在查询了网上很多教程和mybatis官方文档，总结出以下四种常用用法；<br>具体分页参考：<br><a href="https://blog.csdn.net/Ep_Little_prince/article/details/100687883" target="_blank" rel="noopener">手动实现分页</a> 或<br><a href="https://zsy0216.github.io/2019/09/10/手动实现SSM分页逻辑/" target="_blank" rel="noopener">手动分页</a></p><ul><li>使用arg0，arg1或使用param1，param2接收（arg索引从0开始，param索引从1开始）；</li><li>多个参数封装成对象；</li><li>多个参数封装成Map集合；</li><li>使用@param绑定参数；</li></ul><p>下面分别介绍</p><p>看传来的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">     <span class="function">List&lt;Customer&gt; <span class="title">findAllPageSql</span><span class="params">(Integer pageNo,Integer pageSize)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第一种方法：使用arg或param"><a href="#第一种方法：使用arg或param" class="headerlink" title="第一种方法：使用arg或param"></a>第一种方法：使用arg或param</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.vue.dao.CustomerDao"</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAllPageSql"</span> parameterType=<span class="string">"java.lang.Integer"</span> resultType=<span class="string">"com.vue.entity.Customer"</span>&gt;</span><br><span class="line">        SELECT * FROM t_customer LIMIT #&#123;param1&#125;,#&#123;param2&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.vue.dao.CustomerDao"</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAllPageSql"</span> parameterType=<span class="string">"java.lang.Integer"</span> resultType=<span class="string">"com.vue.entity.Customer"</span>&gt;</span><br><span class="line">        SELECT * FROM t_customer LIMIT #&#123;arg0&#125;,#&#123;arg1&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="第二种方法：封装成对象"><a href="#第二种方法：封装成对象" class="headerlink" title="第二种方法：封装成对象"></a>第二种方法：封装成对象</h3><p>Page.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer pageNo;</span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line"><span class="comment">//getter,setter略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传参：</p><p>控制层封装前台传来的page信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/allClass"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">findAllPageClass</span><span class="params">(@RequestParam(required = <span class="keyword">true</span>,defaultValue = <span class="string">"1"</span>)</span> Integer pageNo,</span></span><br><span class="line"><span class="function">                                @<span class="title">RequestParam</span><span class="params">(required = <span class="keyword">false</span>,defaultValue = <span class="string">"5"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line">       Page page = <span class="keyword">new</span> Page();</span><br><span class="line">       page.setPageNo(pageNo-<span class="number">1</span>);</span><br><span class="line">       page.setPageSize(pageSize);</span><br><span class="line">       <span class="keyword">return</span> customerService.findAllPageClass(page);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerService</span></span>&#123;   </span><br><span class="line"><span class="function">String <span class="title">findAllPageClass</span><span class="params">(Page page)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持久层传参：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">     <span class="function">List&lt;Customer&gt; <span class="title">findAllPageClass</span><span class="params">(Page page)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper.xml映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.vue.dao.CustomerDao"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllPageClass"</span> <span class="attr">resultType</span>=<span class="string">"com.vue.entity.Customer"</span> <span class="attr">parameterType</span>=<span class="string">"com.vue.util.Page"</span>&gt;</span></span><br><span class="line">       SELECT * FROM t_customer LIMIT #&#123;pageNo&#125;,#&#123;pageSize&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第三种方法：封装成Map集合"><a href="#第三种方法：封装成Map集合" class="headerlink" title="第三种方法：封装成Map集合"></a>第三种方法：封装成Map集合</h3><p>传参：</p><p>控制层封装前台传来的page信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/allMap"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">findAllPageMap</span><span class="params">(@RequestParam(required = <span class="keyword">true</span>,defaultValue = <span class="string">"1"</span>)</span> Integer pageNo,</span></span><br><span class="line"><span class="function">                                  @<span class="title">RequestParam</span><span class="params">(required = <span class="keyword">false</span>,defaultValue = <span class="string">"5"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line">       Map&lt;String,Integer&gt; pageMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       pageMap.put(<span class="string">"pageNo"</span>,pageNo-<span class="number">1</span>);</span><br><span class="line">       pageMap.put(<span class="string">"pageSize"</span>,pageSize);</span><br><span class="line">       <span class="keyword">return</span> customerService.findAllPageMap(pageMap);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerService</span></span>&#123;   </span><br><span class="line"><span class="function">String <span class="title">findAllPageMap</span><span class="params">(Map&lt;String, Integer&gt; pageMap)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持久层传参：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line">     <span class="function">List&lt;Customer&gt; <span class="title">findAllPageMap</span><span class="params">(Map&lt;String, Integer&gt; pageMap)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper.xml映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.vue.dao.CustomerDao"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllPageMap"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span> <span class="attr">resultType</span>=<span class="string">"com.vue.entity.Customer"</span>&gt;</span></span><br><span class="line">       SELECT * FROM t_customer LIMIT #&#123;pageNo&#125;,#&#123;pageSize&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第四种方法：使用-Param绑定参数"><a href="#第四种方法：使用-Param绑定参数" class="headerlink" title="第四种方法：使用@Param绑定参数"></a>第四种方法：使用@Param绑定参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line"><span class="function">List&lt;Customer&gt; <span class="title">findAllPageSql</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @Param(value = <span class="string">"pageNo"</span>)</span> Integer pageNo,</span></span><br><span class="line"><span class="function">        @<span class="title">Param</span><span class="params">(value = <span class="string">"pageSize"</span>)</span> Integer pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper.xml映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.vue.dao.CustomerDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllPageSql"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.vue.entity.Customer"</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_customer LIMIT #&#123;pageNo&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL完整性约束条件</title>
      <link href="/2019/09/07/MySQL%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6/"/>
      <url>/2019/09/07/MySQL%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="完整性约束条件"><a href="#完整性约束条件" class="headerlink" title="完整性约束条件"></a>完整性约束条件</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p> 对表中的数据进行限定，保证数据的正确性、有效性和完整性。    </p><h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><ol><li>主键约束：primary key</li><li>非空约束：not null</li><li>唯一约束：unique</li><li>外键约束：foreign key</li></ol><h3 id="非空约束：not-null，值不能为null"><a href="#非空约束：not-null，值不能为null" class="headerlink" title="非空约束：not null，值不能为null"></a>非空约束：not null，值不能为null</h3><ol><li>创建表时添加约束</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE stu(</span><br><span class="line">    id INT,</span><br><span class="line">    NAME VARCHAR(20) NOT NULL -- name为非空</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建表完后，添加非空约束</p><p><code>ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</code></p></li><li><p>删除name的非空约束 </p><p><code>ALTER TABLE stu MODIFY NAME VARCHAR(20);</code></p></li></ol><h3 id="唯一约束：unique，值不能重复"><a href="#唯一约束：unique，值不能重复" class="headerlink" title="唯一约束：unique，值不能重复"></a>唯一约束：unique，值不能重复</h3><ol><li>创建表时，添加唯一约束</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE stu(</span><br><span class="line">id INT,</span><br><span class="line">phone_number VARCHAR(20) UNIQUE -- 添加了唯一约束</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>注意mysql中，唯一约束限定的列的值可以有多个null</p></blockquote><ol start="2"><li><p>删除唯一约束        </p><pre><code>`ALTER TABLE stu DROP INDEX phone_number;`</code></pre></li><li><p>在创建表后，添加唯一约束<br><code>ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</code></p></li></ol><h3 id="主键约束：primary-key"><a href="#主键约束：primary-key" class="headerlink" title="主键约束：primary key"></a>主键约束：primary key</h3><ol><li><p>注意：</p><ol><li>含义：非空且唯一</li><li>一张表只能有一个字段为主键</li><li>主键就是表中记录的唯一标识</li></ol></li><li><p>在创建表时，添加主键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table stu(</span><br><span class="line">id int primary key,-- 给id添加主键约束</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>删除主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 错误 </span><br><span class="line">alter table stu modify id int ;</span><br><span class="line">--正确</span><br><span class="line">ALTER TABLE stu DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure></li><li><p>创建完表后，添加主键<br><code>ALTER TABLE stu MODIFY id INT PRIMARY KEY;</code></p></li></ol><h3 id="自动增长："><a href="#自动增长：" class="headerlink" title="自动增长："></a>自动增长：</h3><ol><li><p>概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</p></li><li><p>在创建表时，添加主键约束，并且完成主键自增长</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table stu(</span><br><span class="line">id int primary key auto_increment,-- 给id添加主键约束</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>删除自动增长<br><code>ALTER TABLE stu MODIFY id INT;</code></p></li><li><p>添加自动增长<br><code>ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</code></p></li></ol><h3 id="外键约束：foreign-key"><a href="#外键约束：foreign-key" class="headerlink" title="外键约束：foreign key"></a>外键约束：foreign key</h3><p>解释：让表于表产生关系，从而保证数据的正确性。</p><ol><li><p>在创建表时，可以添加外键</p><ul><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">....</span><br><span class="line">外键列</span><br><span class="line">constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除外键<br> <code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</code></p></li><li><p>创建表之后，添加外键<br> <code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</code></p></li><li><p>级联操作</p><ul><li>添加级联操作</li></ul></li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE;</span><br></pre></td></tr></table></figure></code></pre><p>分类：<br>    级联更新：ON UPDATE CASCADE<br>    级联删除：ON DELETE CASCADE </p><h1 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h1><h2 id="多表之间的关系"><a href="#多表之间的关系" class="headerlink" title="多表之间的关系"></a>多表之间的关系</h2><h3 id="分类：-1"><a href="#分类：-1" class="headerlink" title="分类："></a>分类：</h3><ol><li>一对一(了解)：<ul><li>如：人和身份证</li><li>分析：一个人只有一个身份证，一个身份证只能对应一个人</li></ul></li><li>一对多(多对一)：<ul><li>如：部门和员工</li><li>分析：一个部门有多个员工，一个员工只能对应一个部门</li></ul></li><li>多对多：<ul><li>如：学生和课程</li><li>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</li></ul></li></ol><h3 id="实现关系："><a href="#实现关系：" class="headerlink" title="实现关系："></a>实现关系：</h3><ol><li>一对多(多对一)：<ul><li>如：部门和员工</li><li>实现方式：在多的一方建立外键，指向一的一方的主键。</li></ul></li><li>多对多：<ul><li>如：学生和课程</li><li>实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</li></ul></li><li>一对一(了解)：<ul><li>如：人和身份证</li><li>实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</li></ul></li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">-- 创建旅游线路分类表 tab_category</span><br><span class="line">-- cid 旅游线路分类主键，自动增长</span><br><span class="line">-- cname 旅游线路分类名称非空，唯一，字符串 100</span><br><span class="line">CREATE TABLE tab_category (</span><br><span class="line">cid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">cname VARCHAR(100) NOT NULL UNIQUE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建旅游线路表 tab_route</span><br><span class="line">/*</span><br><span class="line">rid 旅游线路主键，自动增长</span><br><span class="line">rname 旅游线路名称非空，唯一，字符串 100</span><br><span class="line">price 价格</span><br><span class="line">rdate 上架时间，日期类型</span><br><span class="line">cid 外键，所属分类</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_route(</span><br><span class="line">rid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">rname VARCHAR(100) NOT NULL UNIQUE,</span><br><span class="line">price DOUBLE,</span><br><span class="line">rdate DATE,</span><br><span class="line">cid INT,</span><br><span class="line">FOREIGN KEY (cid) REFERENCES tab_category(cid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">/*创建用户表 tab_user</span><br><span class="line">uid 用户主键，自增长</span><br><span class="line">username 用户名长度 100，唯一，非空</span><br><span class="line">password 密码长度 30，非空</span><br><span class="line">name 真实姓名长度 100</span><br><span class="line">birthday 生日</span><br><span class="line">sex 性别，定长字符串 1</span><br><span class="line">telephone 手机号，字符串 11</span><br><span class="line">email 邮箱，字符串长度 100</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_user (</span><br><span class="line">uid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(100) UNIQUE NOT NULL,</span><br><span class="line">PASSWORD VARCHAR(30) NOT NULL,</span><br><span class="line">NAME VARCHAR(100),</span><br><span class="line">birthday DATE,</span><br><span class="line">sex CHAR(1) DEFAULT &apos;男&apos;,</span><br><span class="line">telephone VARCHAR(11),</span><br><span class="line">email VARCHAR(100)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">创建收藏表 tab_favorite</span><br><span class="line">rid 旅游线路 id，外键</span><br><span class="line">date 收藏时间</span><br><span class="line">uid 用户 id，外键</span><br><span class="line">rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_favorite (</span><br><span class="line">rid INT, -- 线路id</span><br><span class="line">DATE DATETIME,</span><br><span class="line">uid INT, -- 用户id</span><br><span class="line">-- 创建复合主键</span><br><span class="line">PRIMARY KEY(rid,uid), -- 联合主键</span><br><span class="line">FOREIGN KEY (rid) REFERENCES tab_route(rid),</span><br><span class="line">FOREIGN KEY(uid) REFERENCES tab_user(uid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="数据库设计的范式"><a href="#数据库设计的范式" class="headerlink" title="数据库设计的范式"></a>数据库设计的范式</h1><p>​    概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求</p><p>​        设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>​        目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p><h2 id="分类：-2"><a href="#分类：-2" class="headerlink" title="分类："></a>分类：</h2><ul><li>第一范式（1NF）：每一列都是不可分割的原子数据项            </li><li>第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）</li><li>几个概念：<pre><code>1. 函数依赖：A--&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A            例如：学号--&gt;姓名。  （学号，课程名称） --&gt; 分数</code></pre><ol start="2"><li>完全函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。<pre><code>例如：（学号，课程名称） --&gt; 分数</code></pre></li><li>部分函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。<pre><code>例如：（学号，课程名称） -- &gt; 姓名</code></pre></li><li>传递函数依赖：A–&gt;B, B – &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，再通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A<pre><code>例如：学号--&gt;系名，系名--&gt;系主任</code></pre></li><li>码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码<pre><code>例如：该表中码为：（学号，课程名称）</code></pre></li><li>主属性：码属性组中的所有属性</li><li>非主属性：除过码属性组的属性    </li></ol></li><li>第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</li></ul><h1 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h1><p>命令行：</p><ul><li>语法：<ul><li>备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</li><li>还原：<ol><li>登录数据库</li><li>创建数据库</li><li>使用数据库</li><li>执行文件。source 文件路径</li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL多表查询&amp;事务&amp;权限管理</title>
      <link href="/2019/09/06/MySQL%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E4%BA%8B%E5%8A%A1%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2019/09/06/MySQL%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E4%BA%8B%E5%8A%A1%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="多表查询："><a href="#多表查询：" class="headerlink" title="多表查询："></a>多表查询：</h1><ul><li><p>查询语法：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">列名列表</span><br><span class="line">from</span><br><span class="line">表名列表</span><br><span class="line">where....</span><br></pre></td></tr></table></figure></li></ul><h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><ul><li>创建部门表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE dept(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(20)</span><br><span class="line">);</span><br><span class="line">INSERT INTO dept (NAME) VALUES (&apos;开发部&apos;),(&apos;市场部&apos;),(&apos;财务部&apos;);</span><br></pre></td></tr></table></figure><ul><li>创建员工表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE emp (</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(10),</span><br><span class="line">gender CHAR(1), -- 性别</span><br><span class="line">salary DOUBLE, -- 工资</span><br><span class="line">join_date DATE, -- 入职日期</span><br><span class="line">dept_id INT,</span><br><span class="line">FOREIGN KEY (dept_id) REFERENCES dept(id) -- 外键，关联部门表(部门表的主键)</span><br><span class="line">);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&apos;孙悟空&apos;,&apos;男&apos;,7200,&apos;2013-02-24&apos;,1);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&apos;猪八戒&apos;,&apos;男&apos;,3600,&apos;2010-12-02&apos;,2);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&apos;唐僧&apos;,&apos;男&apos;,9000,&apos;2008-08-08&apos;,2);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&apos;白骨精&apos;,&apos;女&apos;,5000,&apos;2015-10-07&apos;,3);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&apos;蜘蛛精&apos;,&apos;女&apos;,4500,&apos;2011-03-14&apos;,1);</span><br></pre></td></tr></table></figure><h2 id="笛卡尔积："><a href="#笛卡尔积：" class="headerlink" title="笛卡尔积："></a>笛卡尔积：</h2><ul><li>有两个集合A,B .取这两个集合的所有组成情况。</li><li>要完成多表查询，需要消除无用的数据</li></ul><h2 id="多表查询的分类："><a href="#多表查询的分类：" class="headerlink" title="多表查询的分类："></a>多表查询的分类：</h2><h3 id="内连接查询："><a href="#内连接查询：" class="headerlink" title="内连接查询："></a>内连接查询：</h3><ol><li>从哪些表中查询数据</li><li>条件是什么</li><li>查询哪些字段</li></ol><h4 id="隐式内连接：使用where条件消除无用数据"><a href="#隐式内连接：使用where条件消除无用数据" class="headerlink" title="隐式内连接：使用where条件消除无用数据"></a>隐式内连接：使用where条件消除无用数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有员工信息和对应的部门信息</span><br><span class="line">SELECT * FROM emp,dept WHERE emp.`dept_id` = dept.`id`;</span><br><span class="line"></span><br><span class="line">-- 查询员工表的名称，性别。部门表的名称</span><br><span class="line">SELECT emp.name,emp.gender,dept.name FROM emp,dept WHERE emp.`dept_id` = dept.`id`;</span><br><span class="line">-- 规范化写法</span><br><span class="line">SELECT </span><br><span class="line">t1.name, -- 员工表的姓名</span><br><span class="line">t1.gender,-- 员工表的性别</span><br><span class="line">t2.name -- 部门表的名称</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">dept t2</span><br><span class="line">WHERE </span><br><span class="line">t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure><h4 id="显式内连接："><a href="#显式内连接：" class="headerlink" title="显式内连接："></a>显式内连接：</h4><ul><li><p>语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件</p></li><li><p>例如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM emp INNER JOIN dept ON emp.`dept_id` = dept.`id`;</span><br><span class="line"></span><br><span class="line">SELECT * FROM emp JOIN dept ON emp.`dept_id` = dept.`id`;</span><br></pre></td></tr></table></figure></li></ul><h3 id="外链接查询："><a href="#外链接查询：" class="headerlink" title="外链接查询："></a>外链接查询：</h3><h4 id="左外连接："><a href="#左外连接：" class="headerlink" title="左外连接："></a>左外连接：</h4><ul><li><p>语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；</p></li><li><p>查询的是左表所有数据以及其交集部分。</p></li><li><p>例子：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span><br><span class="line">SELECT t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ON t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure></li></ul><h4 id="右外连接："><a href="#右外连接：" class="headerlink" title="右外连接："></a>右外连接：</h4><ul><li><p>语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；</p></li><li><p>查询的是右表所有数据以及其交集部分。</p></li><li><p>例子：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM dept t2 RIGHT JOIN emp t1 ON t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure></li></ul><h3 id="子查询："><a href="#子查询：" class="headerlink" title="子查询："></a>子查询：</h3><ul><li><p>概念：查询中嵌套查询，称嵌套查询为子查询。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 查询工资最高的员工信息</span><br><span class="line">-- 1 查询最高的工资是多少 9000</span><br><span class="line">SELECT MAX(salary) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 2 查询员工信息，并且工资等于9000的</span><br><span class="line">SELECT * FROM emp WHERE emp.`salary` = 9000;</span><br><span class="line"></span><br><span class="line">-- 一条sql就完成这个操作。子查询</span><br><span class="line">SELECT * FROM emp WHERE emp.`salary` = (SELECT MAX(salary) FROM emp);</span><br></pre></td></tr></table></figure></li></ul><h4 id="子查询不同情况"><a href="#子查询不同情况" class="headerlink" title="子查询不同情况"></a>子查询不同情况</h4><ol><li><p>子查询的结果是单行单列的：</p><ul><li><p>子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;= &lt; &lt;= =</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工工资小于平均工资的人</span><br><span class="line">SELECT * FROM emp WHERE emp.salary &lt; (SELECT AVG(salary) FROM emp);</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="2"><li><p>子查询的结果是多行单列的：</p><ul><li><p>子查询可以作为条件，使用运算符in来判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查询&apos;财务部&apos;和&apos;市场部&apos;所有的员工信息</span><br><span class="line">SELECT id FROM dept WHERE NAME = &apos;财务部&apos; OR NAME = &apos;市场部&apos;;</span><br><span class="line">SELECT * FROM emp WHERE dept_id = 3 OR dept_id = 2;</span><br><span class="line"></span><br><span class="line">-- 使用子查询</span><br><span class="line">SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = &apos;财务部&apos; OR NAME = &apos;市场部&apos;);</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="3"><li><p>子查询的结果是多行多列的：</p><ul><li><p>子查询可以作为一张虚拟表参与查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span><br><span class="line">-- 子查询</span><br><span class="line">SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp.`join_date` &gt; &apos;2011-11-11&apos;) t2 WHERE t1.id = t2.dept_id;</span><br><span class="line"></span><br><span class="line">-- 普通内连接</span><br><span class="line">SELECT * FROM emp t1,dept t2 WHERE t1.`dept_id` = t2.`id` AND t1.`join_date` &gt;  &apos;2011-11-11&apos;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="多表查询练习"><a href="#多表查询练习" class="headerlink" title="多表查询练习"></a>多表查询练习</h3><h4 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h4><ul><li><p>部门表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 部门表</span><br><span class="line">CREATE TABLE dept (</span><br><span class="line">id INT PRIMARY KEY PRIMARY KEY, -- 部门id</span><br><span class="line">dname VARCHAR(50), -- 部门名称</span><br><span class="line">loc VARCHAR(50) -- 部门所在地</span><br><span class="line">);</span><br><span class="line">-- 添加4个部门</span><br><span class="line">INSERT INTO dept(id,dname,loc) VALUES </span><br><span class="line">(10,&apos;教研部&apos;,&apos;北京&apos;),</span><br><span class="line">(20,&apos;学工部&apos;,&apos;上海&apos;),</span><br><span class="line">(30,&apos;销售部&apos;,&apos;广州&apos;),</span><br><span class="line">(40,&apos;财务部&apos;,&apos;深圳&apos;);</span><br></pre></td></tr></table></figure></li><li><p>职务表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 职务表，职务名称，职务描述</span><br><span class="line">CREATE TABLE job (</span><br><span class="line">id INT PRIMARY KEY,</span><br><span class="line">jname VARCHAR(20),</span><br><span class="line">description VARCHAR(50)</span><br><span class="line">);</span><br><span class="line">-- 添加4个职务</span><br><span class="line">INSERT INTO job (id, jname, description) VALUES</span><br><span class="line">(1, &apos;董事长&apos;, &apos;管理整个公司，接单&apos;),</span><br><span class="line">(2, &apos;经理&apos;, &apos;管理部门员工&apos;),</span><br><span class="line">(3, &apos;销售员&apos;, &apos;向客人推销产品&apos;),</span><br><span class="line">(4, &apos;文员&apos;, &apos;使用办公软件&apos;);</span><br></pre></td></tr></table></figure></li><li><p>员工表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-- 员工表</span><br><span class="line">CREATE TABLE emp (</span><br><span class="line">  id INT PRIMARY KEY, -- 员工id</span><br><span class="line">  ename VARCHAR(50), -- 员工姓名</span><br><span class="line">  job_id INT, -- 职务id</span><br><span class="line">  mgr INT , -- 上级领导</span><br><span class="line">  joindate DATE, -- 入职日期</span><br><span class="line">  salary DECIMAL(7,2), -- 工资</span><br><span class="line">  bonus DECIMAL(7,2), -- 奖金</span><br><span class="line">  dept_id INT, -- 所在部门编号</span><br><span class="line">  CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),</span><br><span class="line">  CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)</span><br><span class="line">);</span><br><span class="line">-- 添加员工</span><br><span class="line">INSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES </span><br><span class="line">    (1001,&apos;孙悟空&apos;,4,1004,&apos;2000-12-17&apos;,&apos;8000.00&apos;,NULL,20),</span><br><span class="line">    (1002,&apos;卢俊义&apos;,3,1006,&apos;2001-02-20&apos;,&apos;16000.00&apos;,&apos;3000.00&apos;,30),</span><br><span class="line">    (1003,&apos;林冲&apos;,3,1006,&apos;2001-02-22&apos;,&apos;12500.00&apos;,&apos;5000.00&apos;,30),</span><br><span class="line">    (1004,&apos;唐僧&apos;,2,1009,&apos;2001-04-02&apos;,&apos;29750.00&apos;,NULL,20),</span><br><span class="line">    (1005,&apos;李逵&apos;,4,1006,&apos;2001-09-28&apos;,&apos;12500.00&apos;,&apos;14000.00&apos;,30),</span><br><span class="line">    (1006,&apos;宋江&apos;,2,1009,&apos;2001-05-01&apos;,&apos;28500.00&apos;,NULL,30),</span><br><span class="line">    (1007,&apos;刘备&apos;,2,1009,&apos;2001-09-01&apos;,&apos;24500.00&apos;,NULL,10),</span><br><span class="line">    (1008,&apos;猪八戒&apos;,4,1004,&apos;2007-04-19&apos;,&apos;30000.00&apos;,NULL,20),</span><br><span class="line">    (1009,&apos;罗贯中&apos;,1,NULL,&apos;2001-11-17&apos;,&apos;50000.00&apos;,NULL,10),</span><br><span class="line">    (1010,&apos;吴用&apos;,3,1006,&apos;2001-09-08&apos;,&apos;15000.00&apos;,&apos;0.00&apos;,30),</span><br><span class="line">    (1011,&apos;沙僧&apos;,4,1004,&apos;2007-05-23&apos;,&apos;11000.00&apos;,NULL,20),</span><br><span class="line">    (1012,&apos;李逵&apos;,4,1006,&apos;2001-12-03&apos;,&apos;9500.00&apos;,NULL,30),</span><br><span class="line">    (1013,&apos;小白龙&apos;,4,1004,&apos;2001-12-03&apos;,&apos;30000.00&apos;,NULL,20),</span><br><span class="line">    (1014,&apos;关羽&apos;,4,1007,&apos;2002-01-23&apos;,&apos;13000.00&apos;,NULL,10);</span><br></pre></td></tr></table></figure></li><li><p>工资登记表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 工资等级表</span><br><span class="line">CREATE TABLE salarygrade (</span><br><span class="line">grade INT PRIMARY KEY,   -- 级别</span><br><span class="line">losalary INT,  -- 最低工资</span><br><span class="line">hisalary INT -- 最高工资</span><br><span class="line">);</span><br><span class="line">-- 添加5个工资等级</span><br><span class="line">INSERT INTO salarygrade(grade,losalary,hisalary) VALUES </span><br><span class="line">(1,7000,12000),</span><br><span class="line">(2,12010,14000),</span><br><span class="line">(3,14010,20000),</span><br><span class="line">(4,20010,30000),</span><br><span class="line">(5,30010,99990);</span><br></pre></td></tr></table></figure></li></ul><h4 id="需求及sql"><a href="#需求及sql" class="headerlink" title="需求及sql"></a>需求及sql</h4><ol><li><p>查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  分析：</span><br><span class="line">1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表</span><br><span class="line">2.查询条件 emp.job_id = job.id</span><br><span class="line">*/</span><br><span class="line">SELECT </span><br><span class="line">t1.`id`, -- 员工编号</span><br><span class="line">t1.`ename`, -- 员工姓名</span><br><span class="line">t1.`salary`,-- 工资</span><br><span class="line">t2.`jname`, -- 职务名称</span><br><span class="line">t2.`description` -- 职务描述</span><br><span class="line">FROM </span><br><span class="line">emp t1, job t2</span><br><span class="line">WHERE </span><br><span class="line">t1.`job_id` = t2.`id`;</span><br></pre></td></tr></table></figure></li><li><p>查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">分析：</span><br><span class="line">1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept</span><br><span class="line">2. 条件： emp.job_id = job.id and emp.dept_id = dept.id</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">t1.`id`, -- 员工编号</span><br><span class="line">t1.`ename`, -- 员工姓名</span><br><span class="line">t1.`salary`,-- 工资</span><br><span class="line">t2.`jname`, -- 职务名称</span><br><span class="line">t2.`description`, -- 职务描述</span><br><span class="line">t3.`dname`, -- 部门名称</span><br><span class="line">t3.`loc` -- 部门位置</span><br><span class="line">FROM </span><br><span class="line">emp t1, job t2,dept t3</span><br><span class="line">WHERE </span><br><span class="line">t1.`job_id` = t2.`id` AND t1.`dept_id` = t3.`id`;</span><br></pre></td></tr></table></figure></li><li><p>查询员工姓名，工资，工资等级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">分析：</span><br><span class="line">1.员工姓名，工资 emp  工资等级 salarygrade</span><br><span class="line">2.条件 emp.salary &gt;= salarygrade.losalary and emp.salary &lt;= salarygrade.hisalary</span><br><span class="line">emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary</span><br><span class="line">*/</span><br><span class="line">SELECT </span><br><span class="line">t1.ename ,</span><br><span class="line">t1.`salary`,</span><br><span class="line">t2.*</span><br><span class="line">FROM emp t1, salarygrade t2</span><br><span class="line">WHERE t1.`salary` BETWEEN t2.`losalary` AND t2.`hisalary`;</span><br></pre></td></tr></table></figure></li><li><p>查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">分析：</span><br><span class="line">1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade</span><br><span class="line">2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary</span><br><span class="line">*/</span><br><span class="line">SELECT </span><br><span class="line">t1.`ename`,</span><br><span class="line">t1.`salary`,</span><br><span class="line">t2.`jname`,</span><br><span class="line">t2.`description`,</span><br><span class="line">t3.`dname`,</span><br><span class="line">t3.`loc`,</span><br><span class="line">t4.`grade`</span><br><span class="line">FROM </span><br><span class="line">emp t1,job t2,dept t3,salarygrade t4</span><br><span class="line">WHERE </span><br><span class="line">t1.`job_id` = t2.`id` </span><br><span class="line">AND t1.`dept_id` = t3.`id`</span><br><span class="line">AND t1.`salary` BETWEEN t4.`losalary` AND t4.`hisalary`;</span><br></pre></td></tr></table></figure></li><li><p>查询出部门编号、部门名称、部门位置、部门人数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">分析：</span><br><span class="line">1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表</span><br><span class="line">2.使用分组查询。按照emp.dept_id完成分组，查询count(id)</span><br><span class="line">3.使用子查询将第2步的查询结果和dept表进行关联查询</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">SELECT </span><br><span class="line">t1.`id`,t1.`dname`,t1.`loc` , t2.total</span><br><span class="line">FROM </span><br><span class="line">dept t1,</span><br><span class="line">(SELECT</span><br><span class="line">dept_id,COUNT(id) total</span><br><span class="line">FROM </span><br><span class="line">emp</span><br><span class="line">GROUP BY dept_id) t2</span><br><span class="line">WHERE t1.`id` = t2.dept_id;</span><br></pre></td></tr></table></figure></li><li><p>查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">分析：</span><br><span class="line">1.姓名 emp， 直接上级的姓名 emp</span><br><span class="line">* emp表的id 和 mgr 是自关联</span><br><span class="line">2.条件 emp.id = emp.mgr</span><br><span class="line">3.查询左表的所有数据，和 交集数据</span><br><span class="line">* 使用左外连接查询</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">select</span><br><span class="line">t1.ename,</span><br><span class="line">t1.mgr,</span><br><span class="line">t2.`id`,</span><br><span class="line">t2.ename</span><br><span class="line">from emp t1, emp t2</span><br><span class="line">where t1.mgr = t2.`id`;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">t1.ename,</span><br><span class="line">t1.mgr,</span><br><span class="line">t2.`id`,</span><br><span class="line">t2.`ename`</span><br><span class="line">FROM emp t1</span><br><span class="line">LEFT JOIN emp t2</span><br><span class="line">ON t1.`mgr` = t2.`id`;</span><br></pre></td></tr></table></figure></li></ol><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="事务的基本介绍"><a href="#事务的基本介绍" class="headerlink" title="事务的基本介绍"></a>事务的基本介绍</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul><li>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</li></ul><h3 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h3><ol><li>开启事务： start transaction;</li><li>回滚：rollback;</li><li>提交：commit;</li></ol><h3 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE account (</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(10),</span><br><span class="line">balance DOUBLE</span><br><span class="line">);</span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO account (NAME, balance) VALUES (&apos;zhangsan&apos;, 1000), (&apos;lisi&apos;, 1000);</span><br><span class="line">SELECT * FROM account;</span><br><span class="line">UPDATE account SET balance = 1000;</span><br><span class="line"></span><br><span class="line">-- 张三给李四转账 500 元</span><br><span class="line">-- 0. 开启事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 1. 张三账户 -500</span><br><span class="line">UPDATE account SET balance = balance - 500 WHERE NAME = &apos;zhangsan&apos;;</span><br><span class="line"></span><br><span class="line">-- 2. 李四账户 +500</span><br><span class="line">-- 出错了...</span><br><span class="line">UPDATE account SET balance = balance + 500 WHERE NAME = &apos;lisi&apos;;</span><br><span class="line"></span><br><span class="line">-- 发现执行没有问题，提交事务</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 发现出问题了，回滚事务</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><h3 id="MySQL数据库中事务默认自动提交"><a href="#MySQL数据库中事务默认自动提交" class="headerlink" title="MySQL数据库中事务默认自动提交"></a>MySQL数据库中事务默认自动提交</h3><ul><li>事务提交的两种方式：<ul><li>自动提交：<ul><li>mysql就是自动提交的</li><li>一条DML(增删改)语句会自动提交一次事务。</li></ul></li><li>手动提交：<ul><li>Oracle 数据库默认是手动提交事务</li><li>需要先开启事务，再提交</li></ul></li></ul></li><li>修改事务的默认提交方式：<ul><li>查看事务的默认提交方式：<code>SELECT @@autocommit;</code> – 1 代表自动提交  0 代表手动提交</li><li>修改默认提交方式：<code>set @@autocommit = 0;</code></li></ul></li></ul><h2 id="事务的四大特征："><a href="#事务的四大特征：" class="headerlink" title="事务的四大特征："></a>事务的四大特征：</h2><ol><li>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</li><li>持久性：当事务提交或回滚后，数据库会持久化的保存数据。</li><li>隔离性：多个事务之间。相互独立。</li><li>一致性：事务操作前后，数据总量不变</li></ol><h2 id="事务的隔离级别（了解）"><a href="#事务的隔离级别（了解）" class="headerlink" title="事务的隔离级别（了解）"></a>事务的隔离级别（了解）</h2><ul><li><p>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p></li><li><p>存在问题：</p><ol><li>脏读：一个事务，读取到另一个事务中没有提交的数据</li><li>不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。</li><li>幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</li></ol></li><li><p>隔离级别：</p><ol><li><code>read uncommitted</code>：读未提交<ul><li>产生的问题：脏读、不可重复读、幻读</li></ul></li><li><code>read committed</code>：读已提交 （Oracle）<ul><li>产生的问题：不可重复读、幻读</li></ul></li><li><code>repeatable read</code>：可重复读 （MySQL默认）<ul><li>产生的问题：幻读</li></ul></li><li><code>serializable</code>：串行化<ul><li>可以解决所有的问题</li></ul></li></ol><ul><li><p>注意：隔离级别从小到大安全性越来越高，但是效率越来越低</p></li><li><p>数据库查询隔离级别：</p><p>  <code>select @@tx_isolation;</code></p></li><li><p>数据库设置隔离级别：</p><p>  <code>set global transaction isolation level  级别字符串;</code></p></li></ul></li><li><p>演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level read uncommitted;</span><br><span class="line">start transaction;</span><br><span class="line">-- 转账操作</span><br><span class="line">update account set balance = balance - 500 where id = 1;</span><br><span class="line">update account set balance = balance + 500 where id = 2;</span><br></pre></td></tr></table></figure></li></ul><h1 id="DCL："><a href="#DCL：" class="headerlink" title="DCL："></a>DCL：</h1><h2 id="SQL分类："><a href="#SQL分类：" class="headerlink" title="SQL分类："></a>SQL分类：</h2><ol><li>DDL：操作数据库和表</li><li>DML：增删改表中数据</li><li>DQL：查询表中数据</li><li>DCL：管理用户，授权</li></ol><h2 id="DCL：管理用户，授权"><a href="#DCL：管理用户，授权" class="headerlink" title="DCL：管理用户，授权"></a>DCL：管理用户，授权</h2><ol><li><p>管理用户</p><ol><li><p>添加用户：</p><p> 语法：<code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p></li><li><p>删除用户：</p><p> 语法：<code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p></li><li><p>修改用户密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- UPDATE USER SET PASSWORD = PASSWORD(&apos;新密码&apos;) WHERE USER = &apos;用户名&apos;;</span><br><span class="line">UPDATE USER SET PASSWORD = PASSWORD(&apos;abc&apos;) WHERE USER = &apos;lisi&apos;;</span><br><span class="line"></span><br><span class="line">-- SET PASSWORD FOR &apos;用户名&apos;@&apos;主机名&apos; = PASSWORD(&apos;新密码&apos;);</span><br><span class="line">SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;123&apos;);</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="mysql中忘记了root用户的密码？"><a href="#mysql中忘记了root用户的密码？" class="headerlink" title="mysql中忘记了root用户的密码？"></a>mysql中忘记了root用户的密码？</h3><ol><li>cmd – &gt; net stop mysql 停止mysql服务<pre><code>1. 需要管理员运行该cmd</code></pre></li><li>使用无验证方式启动mysql服务： mysqld –skip-grant-tables<ol start="3"><li>打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</li><li>use mysql;</li><li>update user set password = password(‘你的新密码’) where user = ‘root’;</li><li>关闭两个窗口</li><li>打开任务管理器，手动结束mysqld.exe 的进程</li><li>启动mysql服务</li><li>使用新密码登录。</li></ol></li></ol><h3 id="查询用户："><a href="#查询用户：" class="headerlink" title="查询用户："></a>查询用户：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 1. 切换到mysql数据库</span><br><span class="line">USE myql;</span><br><span class="line"></span><br><span class="line">-- 2. 查询user表</span><br><span class="line">SELECT * FROM USER;</span><br></pre></td></tr></table></figure><ul><li>通配符： % 表示可以在任意主机使用用户登录数据库</li></ul><h3 id="权限管理："><a href="#权限管理：" class="headerlink" title="权限管理："></a>权限管理：</h3><ol><li><p>查询权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查询权限</span><br><span class="line">SHOW GRANTS FOR &apos;用户名&apos;@&apos;主机名&apos;;</span><br><span class="line">SHOW GRANTS FOR &apos;lisi&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure></li><li><p>授予权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 授予权限</span><br><span class="line">grant 权限列表 on 数据库名.表名 to &apos;用户名&apos;@&apos;主机名&apos;;</span><br><span class="line"></span><br><span class="line">-- 给张三用户授予所有权限，在任意数据库任意表上</span><br><span class="line">GRANT ALL ON *.* TO &apos;zhangsan&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></li><li><p>撤销权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 撤销权限：</span><br><span class="line">revoke 权限列表 on 数据库名.表名 from &apos;用户名&apos;@&apos;主机名&apos;;</span><br><span class="line">REVOKE UPDATE ON db3.`account` FROM &apos;lisi&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL复杂查询</title>
      <link href="/2019/09/05/MySQL%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/09/05/MySQL%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><ul><li>语法：order by 子句<ul><li><code>order by 排序字段1 排序方式1 ，  排序字段2 排序方式2...</code></li></ul></li><li>排序方式：<ul><li><code>ASC</code>：升序，默认的。</li><li><code>DESC</code>：降序。</li></ul></li><li>注意：<ul><li>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</li></ul></li></ul><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>将一列数据作为一个整体，进行纵向的计算。</p><ol><li><p>count：计算个数<br> 一般选择非空的列：主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(id) from 表名</span><br></pre></td></tr></table></figure></li><li><p>max：计算最大值</p></li><li><p>min：计算最小值</p></li><li><p>sum：计算和</p></li><li><p>avg：计算平均值</p></li></ol><p>==注意：聚合函数的计算，排除null值。==</p><p>解决方案：</p><ol><li>选择不包含非空的列进行计算</li><li>IFNULL函数</li></ol><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><ol><li><p>语法：group by 分组字段；</p></li><li><p>注意：</p><ol><li>分组之后查询的字段：分组字段、聚合函数</li><li>where 和 having 的区别？<ul><li>where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</li><li>where 后不可以跟聚合函数，having可以进行聚合函数的判断。</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 按照性别分组。分别查询男、女同学的平均分</span><br><span class="line"></span><br><span class="line">SELECT sex , AVG(math) FROM student GROUP BY sex;</span><br><span class="line"></span><br><span class="line">-- 按照性别分组。分别查询男、女同学的平均分,人数</span><br><span class="line"></span><br><span class="line">SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex;</span><br><span class="line"></span><br><span class="line">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组</span><br><span class="line">SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex;</span><br><span class="line"></span><br><span class="line">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人</span><br><span class="line">SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex HAVING COUNT(id) &gt; 2;</span><br><span class="line"></span><br><span class="line">SELECT sex , AVG(math),COUNT(id) 人数 FROM student WHERE math &gt; 70 GROUP BY sex HAVING 人数 &gt; 2;</span><br></pre></td></tr></table></figure></li></ol><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><ol><li>语法：limit 开始的索引, 每页查询的条数;</li><li>公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数</li></ol><p>exam：每页显示3条记录 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student LIMIT 0,3; -- 第1页</span><br><span class="line">SELECT * FROM student LIMIT 3,3; -- 第2页</span><br><span class="line">SELECT * FROM student LIMIT 6,3; --第3页</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基础语法和操作</title>
      <link href="/2019/09/05/MySQL-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/09/05/MySQL-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h1><ol><li>数据库的英文单词： DataBase 简称 ： DB</li><li>什么是数据库？<ul><li>用于存储和管理数据的仓库。</li></ul></li><li>数据库的特点：<ol><li>持久化存储数据的。其实数据库就是一个文件系统</li><li>方便存储和管理数据</li><li>使用了统一的方式操作数据库 – SQL</li></ol></li></ol><h1 id="MySQL数据库软件"><a href="#MySQL数据库软件" class="headerlink" title="MySQL数据库软件"></a>MySQL数据库软件</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>略</p><h2 id="卸载-安装版"><a href="#卸载-安装版" class="headerlink" title="卸载(安装版)"></a>卸载(安装版)</h2><ol><li>去mysql的安装目录找到<code>my.ini</code>文件<ul><li>复制 <code>datadir</code>=<code>&quot;C:/ProgramData/MySQL/MySQL Server 5.7/Data/&quot;</code></li></ul></li><li>卸载MySQL</li><li>删除<code>C:/ProgramData</code>目录下的<code>MySQL</code>文件夹。</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="MySQL服务启动"><a href="#MySQL服务启动" class="headerlink" title="MySQL服务启动"></a>MySQL服务启动</h3><ol><li>手动。</li><li><code>cmd</code> –&gt;  <code>services.msc</code>  打开服务的窗口</li><li>使用管理员打开<code>cmd</code><ul><li><code>net start mysql</code> : 启动mysql的服务</li><li><code>net stop mysql</code> ：关闭mysql服务</li></ul></li></ol><h3 id="MySQL登录"><a href="#MySQL登录" class="headerlink" title="MySQL登录"></a>MySQL登录</h3><ul><li><code>mysql -uroot -p密码</code></li><li><code>mysql -hip -uroot -p连接目标的密码</code></li><li><code>mysql --host=ip --user=root --password=连接目标的密码</code></li></ul><h3 id="MySQL退出"><a href="#MySQL退出" class="headerlink" title="MySQL退出"></a>MySQL退出</h3><ol><li><code>exit</code></li><li><code>quit</code></li></ol><h3 id="MySQL目录结构"><a href="#MySQL目录结构" class="headerlink" title="MySQL目录结构"></a>MySQL目录结构</h3><ol><li>MySQL安装目录：<code>basedir=&quot;D:/develop/MySQL/&quot;</code><ul><li>配置文件 <code>my.ini</code></li></ul></li><li>MySQL数据目录：<code>datadir=&quot;C:/ProgramData/MySQL/MySQL Server 5.5/Data/&quot;</code><ul><li>几个概念<ul><li>数据库：文件夹</li><li>表：文件</li><li>数据：数据</li></ul></li></ul></li></ol><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="什么是SQL？"><a href="#什么是SQL？" class="headerlink" title="什么是SQL？"></a>什么是SQL？</h2><p>​    Structured Query Language：结构化查询语言<br>​    其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。<br>​    </p><h2 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h2><ol><li>SQL 语句可以单行或多行书写，以分号结尾。</li><li>可使用空格和缩进来增强语句的可读性。</li><li>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</li><li>3 种注释<ul><li>单行注释: – 注释内容 或 # 注释内容(mysql 特有) </li><li>多行注释: /* 注释 */</li></ul></li></ol><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><ol><li><code>DDL(Data Definition Language)</code>数据定义语言<br>用来定义数据库对象：数据库，表，列等。关键字：create, drop, alter 等</li><li><code>DML(Data Manipulation Language)</code>数据操作语言<br>用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</li><li><code>DQL(Data Query Language)</code>数据查询语言<br>用来查询数据库中表的记录(数据)。关键字：select, where 等</li><li><code>DCL(Data Control Language)</code>数据控制语言(了解)<br>用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT, REVOKE 等</li></ol><h3 id="1-DDL-操作数据库、表"><a href="#1-DDL-操作数据库、表" class="headerlink" title="1. DDL:操作数据库、表"></a>1. DDL:操作数据库、表</h3><h4 id="1-1-操作数据库：CRUD"><a href="#1-1-操作数据库：CRUD" class="headerlink" title="1.1 操作数据库：CRUD"></a>1.1 操作数据库：CRUD</h4><h5 id="C-Create-创建"><a href="#C-Create-创建" class="headerlink" title="C(Create):创建"></a>C(Create):创建</h5><ul><li><p>创建数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名称;</span><br></pre></td></tr></table></figure></li><li><p>创建数据库，判断不存在，再创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database <span class="keyword">if</span> not exists 数据库名称;</span><br></pre></td></tr></table></figure></li><li><p>创建数据库，并指定字符集</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名称 character <span class="built_in">set</span> 字符集名;</span><br></pre></td></tr></table></figure></li><li><p>练习： 创建db4数据库，判断是否存在，并制定字符集为utf8(没有-）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database <span class="keyword">if</span> not exists db4 character <span class="built_in">set</span> utf8;</span><br></pre></td></tr></table></figure></li></ul><h5 id="R-Retrieve-查询"><a href="#R-Retrieve-查询" class="headerlink" title="R(Retrieve):查询"></a>R(Retrieve):查询</h5><ul><li><p>查询所有数据库的名称:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></li><li><p>查询某个数据库的字符集:查询某个数据库的创建语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database 数据库名称;</span><br></pre></td></tr></table></figure></li></ul><h5 id="U-Update-修改"><a href="#U-Update-修改" class="headerlink" title="U(Update):修改"></a>U(Update):修改</h5><ul><li><p>修改数据库的字符集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database 数据库名称 character <span class="built_in">set</span> 字符集名称;</span><br></pre></td></tr></table></figure></li></ul><h5 id="D-Delete-删除"><a href="#D-Delete-删除" class="headerlink" title="D(Delete):删除"></a>D(Delete):删除</h5><ul><li><p>删除数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database 数据库名称;</span><br></pre></td></tr></table></figure></li><li><p>判断数据库存在，存在再删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database <span class="keyword">if</span> exists 数据库名称;</span><br></pre></td></tr></table></figure></li></ul><h5 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h5><ul><li><p>查询当前正在使用的数据库名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure></li><li><p>使用数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名称;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-2-操作表"><a href="#1-2-操作表" class="headerlink" title="1.2 操作表"></a>1.2 操作表</h4><h5 id="C-Create-创建-1"><a href="#C-Create-创建-1" class="headerlink" title="C(Create):创建"></a>C(Create):创建</h5><ol><li>基本语法：</li></ol><p>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">列名1 数据类型1 [完整约束条件],</span><br><span class="line">列名2 数据类型2 [完整约束条件],</span><br><span class="line">...</span><br><span class="line">列名n 数据类型n [完整约束条件]</span><br><span class="line">);</span><br><span class="line"># 注意：最后一列，不需要加逗号（,）</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><h5 id="补充1：常用的数据库类型："><a href="#补充1：常用的数据库类型：" class="headerlink" title="补充1：常用的数据库类型："></a>补充1：常用的数据库类型：</h5><ol><li><p><code>int</code>：整数类型</p><ul><li><code>age int</code></li></ul></li><li><p><code>double</code>: 小数类型</p><ul><li><code>score double(5,2)</code></li></ul></li><li><p><code>date</code>: 日期，只包含年月日，<code>yyyy-MM-dd</code></p></li><li><p><code>datetime</code>: 日期，包含年月日时分秒    <code>yyyy-MM-dd HH:mm:ss</code></p></li><li><p><code>timestamp</code>: 时间戳类型    包含年月日时分秒     <code>yyyy-MM-dd HH:mm:ss</code></p><ul><li>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</li></ul></li><li><p><code>varchar</code>：字符串</p><ul><li><p><code>name varchar(20):姓名最大20个字符</code></p><p>exam:<code>zhangsan 8个字符  张三 2个字符</code></p></li></ul></li></ol><h5 id="补充2：完整性约束条件"><a href="#补充2：完整性约束条件" class="headerlink" title="补充2：完整性约束条件"></a>补充2：完整性约束条件</h5><table><thead><tr><th align="left">约束条件</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">PRIMARY KEY</td><td align="left">标识该属性为该表的主键，可以唯一的标识对应的元组</td></tr><tr><td align="left">FOREIGN KEY</td><td align="left">标识该属性为该表的外键，是与之联系某表的主键</td></tr><tr><td align="left">NOT NULL</td><td align="left">标识该属性不能为空</td></tr><tr><td align="left">UNIQUE</td><td align="left">标识该属性的值是唯一的</td></tr><tr><td align="left">AUTO_INCREMENT</td><td align="left">标识该属性的值是自动增加，这是MySQL的SQL语句的特色</td></tr><tr><td align="left">DEFAULT</td><td align="left">为该属性设置默认值</td></tr></tbody></table><p>Exam：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">id int PRIMARY KEY NOT NULL AUTO_INCREMENT, -- 设置主键，非空，自动递增</span><br><span class="line">name varchar(32) NOT NULL, --设置姓名非空</span><br><span class="line">age int DEFAULT 0, --设置年龄的默认值为0</span><br><span class="line">score double(4,1),</span><br><span class="line">birthday date,</span><br><span class="line">insert_time timestamp</span><br><span class="line">--注释：也可以在最后指定表的主键：PRIMARY KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="复制表："><a href="#复制表：" class="headerlink" title="复制表："></a>复制表：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 表名 like 被复制的表名;</span><br></pre></td></tr></table></figure><h5 id="R-Retrieve-查询-1"><a href="#R-Retrieve-查询-1" class="headerlink" title="R(Retrieve):查询"></a>R(Retrieve):查询</h5><ul><li><p>查询某个数据库中所有的表名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li><p>查询表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure></li></ul><h5 id="U-Update-修改-1"><a href="#U-Update-修改-1" class="headerlink" title="U(Update):修改"></a>U(Update):修改</h5><ul><li><p>修改表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 rename to 新的表名;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改表的字符集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 character <span class="built_in">set</span> 字符集名称;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表的字符集</span></span><br><span class="line">show create table 表名;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>添加一列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add 列名 数据类型 [完整性约束]; <span class="comment">#[为可选项]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改列名称 类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 change 列名 新列名 新数据类型;</span><br><span class="line"></span><br><span class="line">alter table 表名 modify 列名 新数据类型;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop 列名;</span><br></pre></td></tr></table></figure></li></ul><h5 id="D-Delete-删除-1"><a href="#D-Delete-删除-1" class="headerlink" title="D(Delete):删除"></a>D(Delete):删除</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名;</span><br><span class="line"></span><br><span class="line">drop table  if exists 表名 ;</span><br></pre></td></tr></table></figure><h3 id="2-DML：增删改表中数据"><a href="#2-DML：增删改表中数据" class="headerlink" title="2. DML：增删改表中数据"></a>2. DML：增删改表中数据</h3><h5 id="添加数据："><a href="#添加数据：" class="headerlink" title="添加数据："></a>添加数据：</h5><ul><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);</span><br></pre></td></tr></table></figure></li></ul><ul><li>注意：<ol><li>列名和值要一一对应。</li><li>如果表名后，不定义列名，则默认给所有列添加值<br><code>insert into 表名 values(值1,值2,...值n);</code></li><li>除了数字类型，其他类型需要使用引号(单双都可以)引起来</li></ol></li></ul><h5 id="删除数据："><a href="#删除数据：" class="headerlink" title="删除数据："></a>删除数据：</h5><ul><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 [where 条件]</span><br></pre></td></tr></table></figure></li></ul><ul><li>注意：<ol><li>如果不加条件，则删除表中所有记录。</li><li>如果要删除所有记录：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 不推荐使用。有多少条记录就会执行多少次删除操作</span><br><span class="line">delete from 表名;</span><br><span class="line"></span><br><span class="line">-- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</span><br><span class="line">TRUNCATE TABLE 表名;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h5 id="修改数据："><a href="#修改数据：" class="headerlink" title="修改数据："></a>修改数据：</h5><ul><li>语法：<ul><li>update 表名 set 列名1 = 值1, 列名2 = 值2,… [where 条件];</li></ul></li><li>注意：<ol><li>如果不加任何条件，则会将表中所有记录全部修改。</li></ol></li></ul><h3 id="3-DQL：查询表中的记录"><a href="#3-DQL：查询表中的记录" class="headerlink" title="3. DQL：查询表中的记录"></a>3. DQL：查询表中的记录</h3><ul><li>select * from 表名;</li></ul><h5 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">字段列表</span><br><span class="line">from</span><br><span class="line">表名列表</span><br><span class="line">where</span><br><span class="line">条件列表</span><br><span class="line">group by</span><br><span class="line">分组字段</span><br><span class="line">having</span><br><span class="line">分组之后的条件</span><br><span class="line">order by</span><br><span class="line">排序</span><br><span class="line">limit</span><br><span class="line">分页限定</span><br></pre></td></tr></table></figure><h5 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h5><ol><li><p>多个字段的查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名1，字段名2, ..., 字段名n from 表名;</span><br></pre></td></tr></table></figure><ul><li>注意：如果查询所有字段，则可以使用*来替代字段列表。</li></ul></li><li><p>去除重复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct 字段名 from 表名;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>计算列</p><ul><li>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</li><li>ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null<ul><li>表达式1：值可能为null的字段</li><li>当字段为null时的默认值。</li></ul></li></ul></li><li><p>起别名：</p><ul><li>as：as也可以省略</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 as 别名 from 表名;</span><br></pre></td></tr></table></figure></li></ol><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><ol><li>where子句后跟条件</li></ol><h5 id="补充3：运算符"><a href="#补充3：运算符" class="headerlink" title="补充3：运算符"></a>补充3：运算符</h5><ol><li>补充：比较运算符</li></ol><table><thead><tr><th>运算符</th><th>表达式的形式</th><th>作用</th></tr></thead><tbody><tr><td>=</td><td>a=b</td><td>判断a是否等于b</td></tr><tr><td>&lt;&gt;或!=</td><td>a&lt;&gt;b 或 a!=b</td><td>判断a是否不等于b</td></tr><tr><td>&lt;=&gt;</td><td>严格比较两个NULL值是否相等</td><td>两个操作码均为NULL时，其所得值为1；而当一个操作码为NULL时，其所得值为0判断a时候等于b</td></tr><tr><td>&gt;</td><td>a&gt;b</td><td>判断是否a大于b</td></tr><tr><td>&gt;=</td><td>a&gt;=b</td><td>判断a是否大于等于b</td></tr><tr><td>&lt;</td><td>a&lt;b</td><td>判断a是否小于b</td></tr><tr><td>&lt;=</td><td>a&lt;=b</td><td>判断a是否小于等于b</td></tr><tr><td>IS NULL</td><td>a IS NULL</td><td>判断a是否等于NULL</td></tr><tr><td>IS NOT NULL</td><td>a IS NOT NULL</td><td>判断a是否不等于NULL</td></tr><tr><td>BETWEEN AND</td><td>x BETWEEN a and b</td><td>判断a的取值是否在a和b之间</td></tr><tr><td>IN</td><td>a IN(值1，值2，…，值n)</td><td>判断a的取值是否为值1到值n中的一个</td></tr><tr><td>LIKE</td><td>a LIKE 表达式</td><td>判断a是否匹配表达式</td></tr><tr><td>REGEXP</td><td>a REGEXP 正则表达式</td><td>判断a是否匹配正则表达式</td></tr></tbody></table><p>  说明：LIKE：模糊查询</p><ul><li>占位符：</li><li><code>_</code>：单个任意字符</li><li><code>%</code>：多个任意字符</li></ul><ol start="2"><li>补充：逻辑运算符<ul><li><code>and</code> 或 <code>&amp;&amp;</code></li><li><code>or</code>  或<code>||</code></li><li><code>not</code>  或 <code>!</code></li></ul></li></ol><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">-- 查询年龄大于/大于等于20岁</span><br><span class="line">SELECT * FROM student WHERE age &gt; 20;</span><br><span class="line">SELECT * FROM student WHERE age &gt;= 20;</span><br><span class="line"></span><br><span class="line">-- 查询年龄等于20岁</span><br><span class="line">SELECT * FROM student WHERE age = 20;</span><br><span class="line"></span><br><span class="line">-- 查询年龄不等于20岁</span><br><span class="line">SELECT * FROM student WHERE age != 20;</span><br><span class="line">SELECT * FROM student WHERE age &lt;&gt; 20;</span><br><span class="line"></span><br><span class="line">-- 查询年龄大于等于20 小于等于30</span><br><span class="line">SELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;</span><br><span class="line">SELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;</span><br><span class="line">SELECT * FROM student WHERE age BETWEEN 20 AND 30;</span><br><span class="line"></span><br><span class="line">-- 查询年龄22岁，18岁，25岁的信息</span><br><span class="line">SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25</span><br><span class="line">SELECT * FROM student WHERE age IN (22,18,25);</span><br><span class="line"></span><br><span class="line">-- 查询英语成绩为null</span><br><span class="line">SELECT * FROM student WHERE english = NULL; -- 不对的。null值不能使用 = （!=） 判断</span><br><span class="line"></span><br><span class="line">SELECT * FROM student WHERE english IS NULL;</span><br><span class="line"></span><br><span class="line">-- 查询英语成绩不为null</span><br><span class="line">SELECT * FROM student WHERE english  IS NOT NULL;</span><br><span class="line"></span><br><span class="line">-- 查询姓马的有哪些？ like</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE <span class="string">'马%'</span>;</span><br><span class="line"></span><br><span class="line">-- 查询姓名第二个字是化的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE <span class="string">"_化%"</span>;</span><br><span class="line"></span><br><span class="line">-- 查询姓名是3个字的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE <span class="string">'___'</span>;</span><br><span class="line"></span><br><span class="line">-- 查询姓名中包含德的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE <span class="string">'%德%'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm+vue跨域问题</title>
      <link href="/2019/09/03/ssm-vue%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/03/ssm-vue%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="跨域未解决"><a href="#跨域未解决" class="headerlink" title="跨域未解决"></a>跨域未解决</h2><p>Access to XMLHttpRequest at ‘<a href="http://localhost:8080/vue/findall" target="_blank" rel="noopener">http://localhost:8080/vue/findall</a> from origin ‘<a href="http://localhost:8000’" target="_blank" rel="noopener">http://localhost:8000’</a> has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p><h2 id="ssm后台解决跨域"><a href="#ssm后台解决跨域" class="headerlink" title="ssm后台解决跨域"></a>ssm后台解决跨域</h2><p><code>pom.xml</code>文件中加入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thetransactioncompany<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cors-filter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>web.xml</code>文件中加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--跨域--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加入跨域过滤器配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CORS<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.thetransactioncompany.cors.CORSFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CORS<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue打包导入后台解决跨域"><a href="#vue打包导入后台解决跨域" class="headerlink" title="vue打包导入后台解决跨域"></a>vue打包导入后台解决跨域</h2><p>==打包前进行以下配置==</p><p>build文件夹中的<code>utils.js</code>，指定位置添加<code>publicPath: &#39;../../&#39;</code></p><p><img src="https://zsy0216.coding.me/image/java/vue/utils.png" alt="utils"></p><p>config文件夹下的<code>index.js</code>，指定位置添加修改为<code>assetsPublicPath: &#39;./&#39;,</code></p><p><img src="https://zsy0216.coding.me/image/java/vue/index.png" alt="index"></p><p>之后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>打包后将dist下的index.html ,css , js等文件添加到webapp下即可通过访问index.html访问</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM基本配置详解</title>
      <link href="/2019/09/02/SSM%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/09/02/SSM%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<hr><p>SSM基本依赖，及SSM完整配置文件访问：<a href="https://zsy0216.github.io/2019/09/02/SSM基本依赖及配置/" target="_blank" rel="noopener">SSM基本依赖及配置</a></p><hr><h1 id="1-Spring-IOC容器配置"><a href="#1-Spring-IOC容器配置" class="headerlink" title="1    Spring  IOC容器配置"></a>1    Spring  IOC容器配置</h1><h2 id="1-1-applicationContext-xml"><a href="#1-1-applicationContext-xml" class="headerlink" title="1.1   applicationContext.xml"></a>1.1   applicationContext.xml</h2><h3 id="1-1-1-配置数据源"><a href="#1-1-1-配置数据源" class="headerlink" title="1.1.1   配置数据源"></a>1.1.1   配置数据源</h3><ol><li>导入资源文件，db.properties</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>注：db.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/ssm_paging?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><ol start="2"><li>配置数据源，连接数据库。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源  数据源不同 依赖的jar包也不同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-配置mybatis-的sessionFactory"><a href="#1-1-2-配置mybatis-的sessionFactory" class="headerlink" title="1.1.2   配置mybatis 的sessionFactory"></a>1.1.2   配置mybatis 的sessionFactory</h3><p>Spring与Mybatis完美整合，不予要mybatis的配置映射文件</p><ol><li>dataSource：配置数据源，连接数据库；</li><li>configLocation：配置mabatis配置文件位置，加载mybatis的配置；</li><li>mapperLocations：指明映射文件位置，自动扫描mapping.xml文件。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置sqlSessionBean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:sqlMapConfig.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描pojo包，使用别名配置(在mybatis中可以使用别名，即pojo的名称) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.demo.entity"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于指明mybatis的配置文件的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mappers/*.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-3-配置MapperScannerConfigurer"><a href="#1-1-3-配置MapperScannerConfigurer" class="headerlink" title="1.1.3   配置MapperScannerConfigurer"></a>1.1.3   配置MapperScannerConfigurer</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用mybatis的接口代理开发模式(必须保证接口和对应的mybatis的xml名称相同，且在一个文件夹内) --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.tycoding.mapper"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SqlSessionFactoryBean"><a href="#SqlSessionFactoryBean" class="headerlink" title="SqlSessionFactoryBean"></a>SqlSessionFactoryBean</h4><p>Spring框架简化数据库访问的方式之一就是管理数据库连接的声明周期和ORM框架的Session，以确保他们正常的打开和关闭。而在mybatis-spring中，SqlSessionFactoryBean实现了Spring的FactoryBean接口，用于创建<code>SqlSessionFactory</code>。</p><ul><li><code>dataSource</code>是必要的配置，上面我们仅仅是写了数据源配置，接下来的数据库访问对象肯定要使用这个数据源来获取链接对象，所以必须指定数据源。</li><li><code>typeAliases</code>则是启用别名配置，<code>typeAliasesPackage</code>则会为<code>pojo</code>包下的所有类对象都配置别名，当我们在对应的XML映射中指定<code>ResultType</code>等时，就可以直接写pojo的类名，而不需要写全限定名。</li><li><code>mapperLocations</code>: 用于指定Mapper的XML文件位置（对于那种Mapper接口和XML配置同名且在同一个配置文件夹下，Mybatis其实会根据Mapper的Class文件自动找对应的XML配置文件，但是这里我建议写上）。</li><li><code>configLocation</code>: 用于指定mybatis的配置文件位置，因为本项目中并没有涉及太多复杂的逻辑，所以这里我就没有特意配置mybatis的config。</li></ul><h4 id="MapperScannerConfigurer"><a href="#MapperScannerConfigurer" class="headerlink" title="MapperScannerConfigurer"></a>MapperScannerConfigurer</h4><p>在了解<code>MapperScannerConfigurer</code>之前我们需要了解一下<code>MapperFactoryBean</code>，Mybatis-Spring提供了一个动态代理的实现：<code>MapperFactoryBean</code>，他能实现将映射器接口（因为代理创建在运行环境中，那么指定的映射器必须是接口而不是实现类）直接注入到service的Bean中。这样通过代理对象去创建编写数据访问对象，从而代替<code>SqlSessionTepmlate</code>等工具。<br>但是在Mybatis-Spring中还提供了一个转换器<code>MapperScannerConfigurer</code>，它会查找类路径下的映射器（接口）并自动将他们创建成<code>MapperFactoryBean</code>。通过将接口转换成Spring容器中的Bean，在Service层直接注入接口即可，这样大大简化了Dao层实例的编写。<br><code>basePackage</code>正是指定接口的位置。<br>注意我们这里并不需要指定<code>SqlSessionFactory</code>(即我们注释掉的部分)，因为使用<code>MapperScannerConfigurer</code>会创建<code>MapperFactoryBean</code>后自动装配（XML配置）。但是如果存在多个<code>dataSource</code>，该自动装配可能就会失效，这时我们必须使用<code>sqlSessionFacoryBeanName</code>来指定引用哪个<code>bean</code>。</p><p>在<code>beans.xml</code>配置阶段算是基本告一段落，我们回想一下：在没有使用Mybatis前我们使用Spring提供的JDBC模板来访问数据库，我们发现这种方式代码量特别大，而且于Java代码的耦合性也比较大，Mybatis则正好弥补了这些缺点，它使用的XML配置更加的小巧方便且支持原生SQL的编写。<br><strong>Mybatis-Spring</strong>提供了移动动态代理的方式来代替手工的<code>SqlSessionTemplate</code>编写数据库访问对象，我们只需要编写一个接口，通过在Mapper对应的XML中直接写SQL就可以进行数据库访问。当然我们必须配置<code>SqlSessionFactoryBean</code>和<code>MapperScannerConfigurer</code>。</p><h3 id="1-1-4-配置声明式事务"><a href="#1-1-4-配置声明式事务" class="headerlink" title="1.1.4   配置声明式事务"></a>1.1.4   配置声明式事务</h3><p>步骤：（基于注解）</p><ol><li>配置事务管理器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置事务属性，需要事务管理器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置事务切面，并把事务属性与事务切面关联起来</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"serviceMethod"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">"(execution(* zut.hospital.service..*(..))) and (@annotation(org.springframework.transaction.annotation.Transactional))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"serviceMethod"</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 配置声明式事务步骤：(基于配置文件)</p><p>​          1.配置事务管理器</p><p>​          2.配置事务属性</p><p>​          3.配置事务切面，并把事务属性与事务切面关联起来 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span>  <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span> <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">”transactionManager”/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tx:methods</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">propagation</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">             <span class="attr">...</span></span></span><br><span class="line">   &lt;/tx:attributes&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* zut.hospital.service.*.*(..))"</span><span class="attr">id</span>=<span class="string">"txPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用注解开发时，spring配置文件中还需要加入自动扫描包的配置，用于自动装配bean，以及自动依赖注入，@Autowired标注的参数自动装配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"zut.hospital.dao"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-Springmvc-配置相关"><a href="#2-Springmvc-配置相关" class="headerlink" title="2    Springmvc 配置相关"></a>2    Springmvc 配置相关</h1><h2 id="2-1-Springmvc"><a href="#2-1-Springmvc" class="headerlink" title="2.1   Springmvc"></a>2.1   Springmvc</h2><p><img src="https://zsy0216.coding.me/image/java/ssm/mvc.png" alt="1543729079239"></p><ol><li><p>前端控制器：接收请求，响应结果，相当于转发器。</p></li><li><p>处理器映射器HandlerMapping（不需要程序员编写）</p><p>作用：根据请求的url查找Handler</p></li><li><p>处理器适配器HandlerAdapter</p><p>作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler</p></li><li><p>处理器Handler（需要程序员开发）</p><p>注意：编写Handler要按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler </p></li><li><p>视图解析器View resolver（不需要程序员开发）</p><p>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）</p></li><li><p>视图View（需要程序员开发 页面）</p><p>View是一个接口，实现类支持不同的View类型（jsp，freemarker，pdf…）</p></li></ol><h2 id="2-2-前端控制器"><a href="#2-2-前端控制器" class="headerlink" title="2.2   前端控制器"></a>2.2   前端控制器</h2><p>作用：接收用户请求，响应结果，相当于转发器</p><p>在<strong>==web.xml==</strong>中配置，是一个servlet。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器，适配器)</span></span><br><span class="line"><span class="comment">        如果不配置，默认加载的是/WEB-INF/servlet名称-servlet.xml(springmvc-servlet.xml)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>init-param</code>:  contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器，适配器)，如果不配置，默认加载的是/WEB-INF/servlet名称-servlet.xml(springmvc-servlet.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  url-patten:</span></span><br><span class="line"><span class="comment">        1.*.action,访问以.action结尾由DispatcherServlet进行解析；</span></span><br><span class="line"><span class="comment">        2./，所有访问的地址都由DispatcherServlet进行解析，对于静态的文件的解析需要配置不让DispatcherServlet解析</span></span><br><span class="line"><span class="comment">            使用此种方法可以实现RESTful风格的url；</span></span><br><span class="line"><span class="comment">        3./*，不对，使用此种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp页面</span></span><br><span class="line"><span class="comment">            不能根据jsp页面找到handler，会报错。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-处理器映射器、处理器适配器"><a href="#2-3-处理器映射器、处理器适配器" class="headerlink" title="2.3   处理器映射器、处理器适配器"></a>2.3   处理器映射器、处理器适配器</h2><p><code>springmvc.xml</code></p><p>处理器映射器：根据请求的url查找Handler；</p><p>处理器适配器：按照特定的规则执行Handler；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>注解的映射器和适配器是配对使用的。</p><p>此外，使用以下配置时就不需再重新配置上面两个处理器映射器和处理器适配器；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mvc注解驱动：可以代替注解映射器和适配器的配置</span></span><br><span class="line"><span class="comment">    mvc注解驱动默认加载了很多的参数绑定，比如默认加载json转换解析器</span></span><br><span class="line"><span class="comment">    如果使用该注解驱动，就不用配置注解映射器和适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般开发中使用<a href="mvc:annotation-driven" target="_blank" rel="noopener">mvc:annotation-driven</a>，</p><p>对标注了注解@RequestMapping(“/url”)的方法进行映射。</p><h2 id="2-4-视图解析器"><a href="#2-4-视图解析器" class="headerlink" title="2.4   视图解析器"></a>2.4   视图解析器</h2><p>作用：进行视图解析，根据逻辑视图名解析成真正的视图(view)</p><p><code>springmvc.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:prefix</span>=<span class="string">"/WEB-INF/pages/"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:suffix</span>=<span class="string">".jsp"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-静态资源处理"><a href="#2-5-静态资源处理" class="headerlink" title="2.5  静态资源处理"></a>2.5  静态资源处理</h2><p>servlet会拦截所有请求，这时候静态资源的访问不到了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 对静态资源的访问 --&gt;</span><br><span class="line">   &lt;mvc:resources mapping=&quot;/static/**&quot; location=&quot;/WEB-INF/static/&quot; /&gt;</span><br></pre></td></tr></table></figure><h1 id="3-Mybatis"><a href="#3-Mybatis" class="headerlink" title="3    Mybatis"></a>3    Mybatis</h1><h2 id="3-1-sqlMapConfig-xml"><a href="#3-1-sqlMapConfig-xml" class="headerlink" title="3.1   sqlMapConfig.xml"></a>3.1   sqlMapConfig.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>mybatis基本配置已经在与spring整合时在applicationContext.xml中配置</p><p>详细配置见<a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/configuration.html#</a></p><hr><p>有问题请联系我</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM基本依赖及配置</title>
      <link href="/2019/09/02/SSM%E5%9F%BA%E6%9C%AC%E4%BE%9D%E8%B5%96%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/09/02/SSM%E5%9F%BA%E6%9C%AC%E4%BE%9D%E8%B5%96%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>SSM基本配置详解，请访问：<a href="https://zsy0216.github.io/2019/09/02/SSM基本配置详解/" target="_blank" rel="noopener">SSM基本配置详解</a></p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.6.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加mysql驱动依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.45<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="log4j相关"><a href="#log4j相关" class="headerlink" title="log4j相关"></a>log4j相关</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- ************** 1.Spring ************** --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 1)Spring核心 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 2)Spring DAO层 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 3)Spring web --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 4)Spring test --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- ************** Dao： Mybatis ************** --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- **************  数据库 **************  --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 添加mysql驱动依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.45<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- ************** 3.Servlet web ************** --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- ************** log4j ************** --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="database"><a href="#database" class="headerlink" title="database"></a>database</h2><p><code>jdbc.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/user?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><p><code>applicationContext.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- service层 配置注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.demo.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 数据库连接池 数据源不同需要导入的jar包也不容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   配置SqlSessionFactory对象</span></span><br><span class="line"><span class="comment">        Spring与Mybatis完美整合，不予要mybatis的配置映射文件</span></span><br><span class="line"><span class="comment">        1. dataSource：配置数据源，连接数据库；</span></span><br><span class="line"><span class="comment">        2. configLocation：配置mabatis配置文件位置，加载mybatis的配置；</span></span><br><span class="line"><span class="comment">        3. mapperLocations：指明映射文件位置，自动扫描mapping.xml文件。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描pojo包，使用别名配置(在mybatis中可以使用别名，即pojo的名称) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.demo.entity"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描mapper的配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--也可以引入mybatis配置文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用mybatis的接口代理开发模式(必须保证接口和对应的mybatis的xml名称相同，且在一个文件夹内) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.demo.mapper"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="springmvc"><a href="#springmvc" class="headerlink" title="springmvc"></a>springmvc</h2><p><code>springMvc.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.demo.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置springmvc的基本控制器，并开启了对json数据格式的支持 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mvc注解驱动：可以代替注解映射器和适配器的配置</span></span><br><span class="line"><span class="comment">         mvc注解驱动默认加载了很多的参数绑定，比如默认加载json转换解析器</span></span><br><span class="line"><span class="comment">         如果使用该注解驱动，就不用配置注解映射器和适配器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 对静态资源的访问 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/static/**"</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/static/"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置springmvc的视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p><code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta">        "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;?xml version="1.0" encoding="UTF-8"?&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/WEB-INF/index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring的字符编码过滤器，保证request请求的中文字符不会乱码（注意这个过滤器要放到最前面） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置这个字符编码过滤器作用与每一个请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring的servlet监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载spring容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置springmvc的前端控制器，request请求会先经过这个控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器，适配器)</span></span><br><span class="line"><span class="comment">         如果不配置，默认加载的是/WEB-INF/servlet名称-servlet.xml(springmvc-servlet.xml)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  url-patten:</span></span><br><span class="line"><span class="comment">          1.*.action,访问以.action结尾由DispatcherServlet进行解析；</span></span><br><span class="line"><span class="comment">          2./，所有访问的地址都由DispatcherServlet进行解析，对于静态的文件的解析需要配置不让DispatcherServlet解析</span></span><br><span class="line"><span class="comment">             使用此种方法可以实现RESTful风格的url；</span></span><br><span class="line"><span class="comment">          3./*，不对，使用此种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp页面</span></span><br><span class="line"><span class="comment">             不能根据jsp页面找到handler，会报错。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p><code>log4j.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Global logging configuration</span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line"># MyBatis logging configuration...</span><br><span class="line">log4j.logger.com.how2java=TRACE</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><p><code>sqlMapConfig.xml</code></p><p>spring与mybatis整合不需要额外配置mybatis；</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络爬虫和信息提取</title>
      <link href="/2019/08/23/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%92%8C%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96/"/>
      <url>/2019/08/23/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%92%8C%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Requests库入门"><a href="#1-Requests库入门" class="headerlink" title="1.Requests库入门"></a>1.Requests库入门</h1><h2 id="Requests安装"><a href="#Requests安装" class="headerlink" title="Requests安装"></a>Requests安装</h2><p>用管理员身份打开命令提示符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>测试：打开IDLE：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.encoding = <span class="string">'utf-8'</span> <span class="comment">#修改默认编码</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text<span class="comment">#打印网页内容</span></span><br></pre></td></tr></table></figure><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>超文本传输协议,Hypertext Transfer Protocol.</p><p>HTTP是一个基于“请求与响应”模式的、无状态的应用层协议。</p><p>HTTP协议采用URL作为定位网络资源的标识。</p><h3 id="URL格式"><a href="#URL格式" class="headerlink" title="URL格式"></a>URL格式</h3><p><code>http://host[:port][path]</code></p><p>host:合法的Internet主机域名或IP地址</p><p>port：端口号，缺省端口为80</p><p>path：请求资源的路径</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>请求获取URL位置的资源</td></tr><tr><td>HEAD</td><td>请求获取URl位置资源的响应消息报告，即获得该资源的头部信息</td></tr><tr><td>POST</td><td>请求向URL位置的资源后附加新的数据</td></tr><tr><td>PUT</td><td>请求向URL位置存储一个资源，覆盖原URL位置的资源</td></tr><tr><td>PATCH</td><td>请求局部更新URL位置的资源，即改变该处资源的部分内容</td></tr><tr><td>DELETE</td><td>请求删除URL位置存储的资源</td></tr></tbody></table><h2 id="Requests主要方法"><a href="#Requests主要方法" class="headerlink" title="Requests主要方法"></a>Requests主要方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td>构造一个请求，支撑以下各方法的基础方法</td></tr><tr><td>requests.get()</td><td>获取HTML网页的主要方法，对应于HTTP的GET</td></tr><tr><td>requests.head()</td><td>获取HTML网页头信息的方法，对应于HTTP的HEAD</td></tr><tr><td>requests.post()</td><td>向HTML网页提交POST请求的方法，对应于HTTP的POST</td></tr><tr><td>requests.put()</td><td>向HTML网页提交PUT请求的方法，对应于HTTP的PUT</td></tr><tr><td>requests.patch()</td><td>向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td>requests.delete()</td><td>向HTML网页提交删除请求，对应于HTTP的DELETE</td></tr></tbody></table><p>主要方法为request方法，其他方法都是在此方法基础上封装而来以便使用。</p><h3 id="request-方法"><a href="#request-方法" class="headerlink" title="request()方法"></a>request()方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">requests.request(method,url,**kwargs)</span><br><span class="line"><span class="comment">#method:请求方式，对应get/put/post等7种</span></span><br><span class="line"><span class="comment">#url：拟获取页面的url链接</span></span><br><span class="line"><span class="comment">#**kwargs：控制访问的参数，共13个</span></span><br></pre></td></tr></table></figure><p>**kwargs：控制访问的参数，均为可选项</p><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r  = requests.get(url)</span><br><span class="line">完整方法：</span><br><span class="line">requests.get(url,params=<span class="literal">None</span>,**kwargs)</span><br><span class="line">url:拟获取页面的url链接</span><br><span class="line">params:url中的额外参数，字典或字节流格式，可选</span><br><span class="line">**kwargs:<span class="number">12</span>个控制访问的参数，可选</span><br></pre></td></tr></table></figure><p>get()方法：</p><p>构造一个向服务器请求资源的Request对象</p><p>返回一个包含服务器资源的Response对象</p><h4 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求的返回状态，200表示连接成功，404表示失败</td></tr><tr><td>r.text</td><td>HTTP响应内容的字符串形式，即：url对应的页面内容</td></tr><tr><td>r.encoding</td><td>从HTTP header中猜测的响应内容编码方式</td></tr><tr><td>r.apparent_encoding</td><td>从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td>r.content</td><td>HTTP响应内容的二进制形式</td></tr></tbody></table><h3 id="head-方法"><a href="#head-方法" class="headerlink" title="head()方法"></a>head()方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = requests.head(&apos;http://httpbin.org/get&apos;)</span><br><span class="line">r.headers</span><br></pre></td></tr></table></figure><p>获取网络资源的概要信息</p><h3 id="post-方法"><a href="#post-方法" class="headerlink" title="post()方法"></a>post()方法</h3><p>向服务器提交新增数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125; <span class="comment">#新建一个字典</span></span><br><span class="line"><span class="comment">#向URL POST一个字典，自动编码为form（表单）</span></span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>,data = payload)</span><br><span class="line"><span class="comment">#向URL POST一个字符串，自动编码为data</span></span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>,data = <span class="string">'ABC'</span>) </span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h3 id="put-方法"><a href="#put-方法" class="headerlink" title="put()方法"></a>put()方法</h3><p>同post，只不过会把原来的内容覆盖掉。</p><h3 id="patch-方法"><a href="#patch-方法" class="headerlink" title="patch()方法"></a>patch()方法</h3><h3 id="delete-方法"><a href="#delete-方法" class="headerlink" title="delete()方法"></a>delete()方法</h3><h2 id="Requests库的异常"><a href="#Requests库的异常" class="headerlink" title="Requests库的异常"></a>Requests库的异常</h2><table><thead><tr><th align="left">异常</th><th>说明</th></tr></thead><tbody><tr><td align="left">requests.ConnectionError</td><td>网络连接错误异常，如DNS查询失败、拒绝连接等</td></tr><tr><td align="left">requests.HTTPError</td><td>HTTP错误异常</td></tr><tr><td align="left">requests.URLRequired</td><td>URL缺失异常</td></tr><tr><td align="left">requests.TooManyRedirects</td><td>超过最大 重定向次数，产生重定向异常</td></tr><tr><td align="left">requests.ConnectTimeout</td><td>连接远程服务器超时异常</td></tr><tr><td align="left">requests.Timeout</td><td>请求URL超时，产生超时异常</td></tr></tbody></table><table><thead><tr><th>异常方法</th><th>说明</th></tr></thead><tbody><tr><td>r.raise_for_status</td><td>如果不是200产生异常requests.HTTPError</td></tr></tbody></table><h2 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url,timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status() <span class="comment">#如果不是200，引发HTTPError异常</span></span><br><span class="line">        r.recoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="向百度提交关键词"><a href="#向百度提交关键词" class="headerlink" title="向百度提交关键词"></a>向百度提交关键词</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向搜索引擎进行关键词提交</span></span><br><span class="line">url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'wd'</span>:<span class="string">'python'</span>&#125;</span><br><span class="line">    r = requests.get(url,params =kv)</span><br><span class="line">    print(r.request.url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    print(len(r.text))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"产生异常"</span>)</span><br></pre></td></tr></table></figure><h3 id="获取网络图片及存储"><a href="#获取网络图片及存储" class="headerlink" title="获取网络图片及存储"></a>获取网络图片及存储</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">url = <span class="string">"http://image.ngchina.com.cn/2019/0423/20190423024928618.jpg"</span></span><br><span class="line">root = <span class="string">"D://2345//Temp//"</span></span><br><span class="line">path = root + url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">        os.mkdir(root)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="keyword">with</span> open(path,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(r.content)  <span class="comment">#r.content返回二进制内容</span></span><br><span class="line">            f.close()</span><br><span class="line">            print(<span class="string">"文件保存成功"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"文件已存在"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure><h1 id="2-信息提取之Beautiful-Soup库入门"><a href="#2-信息提取之Beautiful-Soup库入门" class="headerlink" title="2.信息提取之Beautiful Soup库入门"></a>2.信息提取之Beautiful Soup库入门</h1><h2 id="Beautiful-Soup库安装"><a href="#Beautiful-Soup库安装" class="headerlink" title="Beautiful Soup库安装"></a>Beautiful Soup库安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">"http://python123.io/ws/demo.html"</span>)</span><br><span class="line">demo = r.text</span><br><span class="line">form bs4 <span class="keyword">import</span> BeautifulSoup <span class="comment">#从bs4中引入BeautifulSoup类</span></span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">"html.parser"</span>)</span><br></pre></td></tr></table></figure><p>Beautiful Soup库是解析、遍历、维护“标签树”的功能库</p><h2 id="Beautiful-Soup库的基本元素"><a href="#Beautiful-Soup库的基本元素" class="headerlink" title="Beautiful Soup库的基本元素"></a>Beautiful Soup库的基本元素</h2><h3 id="Beautiful-Soup库的引用"><a href="#Beautiful-Soup库的引用" class="headerlink" title="Beautiful Soup库的引用"></a>Beautiful Soup库的引用</h3><p>Beautiful Soup库，也叫beautifulsoup4或bs4.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br></pre></td></tr></table></figure><h3 id="Beautiful-Soup类的基本元素"><a href="#Beautiful-Soup类的基本元素" class="headerlink" title="Beautiful Soup类的基本元素"></a>Beautiful Soup类的基本元素</h3><table><thead><tr><th>基本元素</th><th>说明</th></tr></thead><tbody><tr><td>Tag</td><td>标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;标明开头和结尾</td></tr><tr><td>Name</td><td>标签的名字，<p>…</p>的名字是’p’，格式：<tag>.name</tag></td></tr><tr><td>Attributes</td><td>标签的属性，字典形式组织，格式：<tag>.attrs</tag></td></tr><tr><td>NavigableString</td><td>标签内非属性字符串，&lt;&gt;…&lt;/&gt;中字符串，格式：<tag>.string</tag></td></tr><tr><td>Comment</td><td>标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table><h2 id="基于bs4库的HTML内容遍历方法"><a href="#基于bs4库的HTML内容遍历方法" class="headerlink" title="基于bs4库的HTML内容遍历方法"></a>基于bs4库的HTML内容遍历方法</h2><h3 id="下行遍历"><a href="#下行遍历" class="headerlink" title="下行遍历"></a>下行遍历</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.contents(列表类型)</td><td>子节点的列表，将<tag>所有儿子节点存入列表</tag></td></tr><tr><td>.children</td><td>子节点的迭代类型，与.contents类似，用于循环遍历儿子节点</td></tr><tr><td>.descendants</td><td>子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遍历儿子节点</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children</span><br><span class="line">print(child)</span><br><span class="line"><span class="comment">#遍历子孙节点</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.descendants</span><br><span class="line">print(child)</span><br></pre></td></tr></table></figure><h3 id="上行遍历"><a href="#上行遍历" class="headerlink" title="上行遍历"></a>上行遍历</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.parent</td><td>节点的父亲标签</td></tr><tr><td>.parents</td><td>节点先辈标签的迭代类型，用于循环遍历先辈节点</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents:</span><br><span class="line">    <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(parent)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(parent.name)</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="comment">#p</span></span><br><span class="line"><span class="comment">#body</span></span><br><span class="line"><span class="comment">#html</span></span><br><span class="line"><span class="comment">#[document]</span></span><br></pre></td></tr></table></figure><h3 id="平行遍历"><a href="#平行遍历" class="headerlink" title="平行遍历"></a>平行遍历</h3><p>平行遍历发生在同一个父节点下的各节点间。</p><p>下一个获取的可能是字符串类型，不一定是下一个节点。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.next_sibling</td><td>返回按照HTML文本顺序的下一个平行节点标签</td></tr><tr><td>.previous_sibling</td><td>返回按照HTML文本顺序的上一个平行节点标签</td></tr><tr><td>.next_siblings</td><td>迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</td></tr><tr><td>.previous_siblings</td><td>迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遍历后续节点</span></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings</span><br><span class="line">print(sibling)</span><br><span class="line"><span class="comment">#遍历前续节点</span></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_siblings</span><br><span class="line">print(sibling)</span><br></pre></td></tr></table></figure><h2 id="基于bs4库的HTML格式化和编码"><a href="#基于bs4库的HTML格式化和编码" class="headerlink" title="基于bs4库的HTML格式化和编码"></a>基于bs4库的HTML格式化和编码</h2><h3 id="格式化方法：-prettify"><a href="#格式化方法：-prettify" class="headerlink" title="格式化方法：.prettify()"></a>格式化方法：.prettify()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line">print(soup.a.prettify())</span><br></pre></td></tr></table></figure><h3 id="编码：默认utf-8"><a href="#编码：默认utf-8" class="headerlink" title="编码：默认utf-8"></a>编码：默认utf-8</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(<span class="string">"&lt;p&gt;中文&lt;/p&gt;"</span>,<span class="string">"html.parser"</span>)</span><br><span class="line">soup.p.string</span><br><span class="line"><span class="comment">#'中文'</span></span><br><span class="line">print(soup.p.prettify())</span><br><span class="line"><span class="comment">#&lt;p&gt;</span></span><br><span class="line"><span class="comment">#  中文</span></span><br><span class="line"><span class="comment">#&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-信息组织与提取"><a href="#3-信息组织与提取" class="headerlink" title="3.信息组织与提取"></a>3.信息组织与提取</h1><h2 id="信息标记的三种形式"><a href="#信息标记的三种形式" class="headerlink" title="信息标记的三种形式"></a>信息标记的三种形式</h2><p>标记后的信息可形成信息组织结构，增加了信息的维度；</p><p>标记后的信息可用于通信、存储和展示；</p><p>标记的结构和信息一样具有重要价值；</p><p>标记后的信息有利于程序的理解和运用。</p><h3 id="XML-eXtensible-Matkup-Language"><a href="#XML-eXtensible-Matkup-Language" class="headerlink" title="XML: eXtensible Matkup Language"></a>XML: eXtensible Matkup Language</h3><p>最早的通用信息标记语言，可扩展性好，但繁琐。</p><p>用于Internet上的信息交互和传递。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>...<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSON-JavaScript-Object-Notation"><a href="#JSON-JavaScript-Object-Notation" class="headerlink" title="JSON:  JavaScript Object Notation"></a>JSON:  JavaScript Object Notation</h3><p>信息有类型，适合程序处理(js)，较XML简洁。</p><p>用于移动应用云端和节点的信息通信，无注释。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#有类型的键值对表示信息的标记形式</span><br><span class="line">"key":"value"</span><br><span class="line">"key":["value1","value2"]</span><br><span class="line">"key":&#123;"subkey":"subvalue"&#125;</span><br></pre></td></tr></table></figure><h3 id="YAMl-YAML-Ain’t-Markup-Language"><a href="#YAMl-YAML-Ain’t-Markup-Language" class="headerlink" title="YAMl: YAML Ain’t Markup Language"></a>YAMl: YAML Ain’t Markup Language</h3><p>信息无类型，文本信息比例最高，可读性好。</p><p>用于各类系统的配置文件，有注释易读。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#无类型的键值对表示信息的标记形式</span></span><br><span class="line"><span class="string">key</span> <span class="string">:</span> <span class="string">"value"</span></span><br><span class="line"><span class="string">key</span> <span class="string">:</span> <span class="comment">#comment</span></span><br><span class="line"><span class="bullet">-</span><span class="string">value1</span></span><br><span class="line"><span class="bullet">-</span><span class="string">value2</span></span><br><span class="line"><span class="string">key</span> <span class="string">:</span></span><br><span class="line"><span class="string">subkey</span> <span class="string">:</span> <span class="string">subvalue</span></span><br></pre></td></tr></table></figure><h2 id="信息提取的一般方法"><a href="#信息提取的一般方法" class="headerlink" title="信息提取的一般方法"></a>信息提取的一般方法</h2><h3 id="方法一：完整解析信息的标记形式，再提取关键信息。"><a href="#方法一：完整解析信息的标记形式，再提取关键信息。" class="headerlink" title="方法一：完整解析信息的标记形式，再提取关键信息。"></a>方法一：完整解析信息的标记形式，再提取关键信息。</h3><p>XML JSON YAML</p><p>需要标记解析器，例如bs4库的标签树遍历。</p><p>优点：信息解析准确</p><p>缺点：提取过程繁琐，过程慢</p><h3 id="方法二：无视标记形式，直接搜索关键信息"><a href="#方法二：无视标记形式，直接搜索关键信息" class="headerlink" title="方法二：无视标记形式，直接搜索关键信息"></a>方法二：无视标记形式，直接搜索关键信息</h3><p>搜索</p><p>对信息的文本查找函数即可。</p><p>优点：提取过程简洁，速度较快</p><p>缺点：提取过程准确性与信息内容相关</p><h3 id="融合方法：结合形式解析与搜索方法-提取关键信息"><a href="#融合方法：结合形式解析与搜索方法-提取关键信息" class="headerlink" title="融合方法：结合形式解析与搜索方法,提取关键信息"></a>融合方法：结合形式解析与搜索方法,提取关键信息</h3><p>XML JSON YAML  搜索</p><p>需要标记解析器及文本查找函数。</p><h3 id="实例：提取HTML中所有URL链接"><a href="#实例：提取HTML中所有URL链接" class="headerlink" title="实例：提取HTML中所有URL链接"></a>实例：提取HTML中所有URL链接</h3><blockquote><p>思路：    1. 搜索到所有<a>标签</a></p><p>​        2.解析<a>标签格式，提取href后的链接内容</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">form bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</span><br><span class="line">print(link.get(<span class="string">'href'</span>))</span><br></pre></td></tr></table></figure><h2 id="基于bs4库的HTML内容查找方法"><a href="#基于bs4库的HTML内容查找方法" class="headerlink" title="基于bs4库的HTML内容查找方法"></a>基于bs4库的HTML内容查找方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>&lt;&gt;.find_all(name,attrs,recursive,string,**kwargs)</td><td>返回一个列表类型，存储查找的结果</td></tr></tbody></table><blockquote><p>简写形式：<tag>(..) 等价于 <tag>.find_all(..)</tag></tag></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#name:对标签名称的检索字符串</span></span><br><span class="line">soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">soup.find_all([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line">soup.find_all(<span class="literal">True</span>) <span class="comment">#返回soup的所有标签信息</span></span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="literal">True</span>):</span><br><span class="line">    print(tag.name) <span class="comment">#html head title body p b p a a</span></span><br><span class="line"><span class="comment">#输出所有b开头的标签，包括b和body    </span></span><br><span class="line"><span class="comment">#引入正则表达式库</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(re.compile(<span class="string">'b'</span>)):</span><br><span class="line">    print(tag.name) <span class="comment">#body b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#attrs:对标签属性值的检索字符串，可标注属性检索</span></span><br><span class="line">soup.find_all(<span class="string">'p'</span>, <span class="string">'course'</span>)</span><br><span class="line">soup.find_all(id=<span class="string">'link1'</span>)</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">soup.find_all(id=re.compile(<span class="string">'link'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#recursive:是否对子孙全部检索，默认为True</span></span><br><span class="line">soup.find_all(<span class="string">'p'</span>, recursive = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#string:&lt;&gt;...&lt;/&gt;字符串区域的检索字符串</span></span><br><span class="line">soup.find_all(string = <span class="string">"Basic Python"</span>)</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">soup.find_all(string = re.compile(<span class="string">'Python'</span>))</span><br><span class="line"><span class="comment">#简写形式：soup(..) = soup.find_all(..)</span></span><br></pre></td></tr></table></figure><p>拓展方法：参数同.find_all()</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>&lt;&gt;.find()</td><td>搜索且只返回一个结果，字符串类型</td></tr><tr><td>&lt;&gt;.find_parents()</td><td>在先辈节点中搜索，返回列表类型</td></tr><tr><td>&lt;&gt;.find_parent()</td><td>在先辈节点中返回一个结果，字符串类型</td></tr><tr><td>&lt;&gt;.find_next_siblings()</td><td>在后续平行节点中搜索，返回列表类型</td></tr><tr><td>&lt;&gt;.find_next_sibling()</td><td>在后续平行节点中返回一个结果，字符串类型</td></tr><tr><td>&lt;&gt;.find_previous_siblings()</td><td>在前续平行节点中搜索，返回列表类型</td></tr><tr><td>&lt;&gt;.find_previous_sibling()</td><td>在前续平行节点中返回一个结果，字符串类型</td></tr></tbody></table><h1 id="4-信息提取实例"><a href="#4-信息提取实例" class="headerlink" title="4.信息提取实例"></a>4.信息提取实例</h1><h2 id="中国大学排名定向爬虫"><a href="#中国大学排名定向爬虫" class="headerlink" title="中国大学排名定向爬虫"></a>中国大学排名定向爬虫</h2><blockquote><p>功能描述：</p><p>​    输入：大学排名URL链接</p><p>​    输出：大学排名信息的屏幕输出（排名，大学名称，总分）</p><p>​    技术路线：requests-bs4</p><p>​    定向爬虫：仅对输入URL进行爬取，不拓展爬取</p></blockquote><blockquote><p>程序的结构设计：</p><p>​    步骤1：从网络上获取大学排名网页内容 </p><p>​            getHTMLText()</p><p>​    步骤2：提取网页内容中信息到合适的数据结构</p><p>​            fillUnivList()</p><p>​    步骤3：利用数据结构展示并输出结果</p><p>​            printUnivList()</p></blockquote><h2 id="初步代码编写"><a href="#初步代码编写" class="headerlink" title="初步代码编写"></a>初步代码编写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout= <span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'tbody'</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr, bs4.element.Tag):</span><br><span class="line">            tds = tr(<span class="string">'td'</span>)</span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">3</span>].string])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(<span class="string">"排名"</span>, <span class="string">"学校名称"</span>, <span class="string">"分数"</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(<span class="string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    uinfo = []</span><br><span class="line">    url = <span class="string">'http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html'</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    fillUnivList(uinfo,html)</span><br><span class="line">    printUnivList(uinfo,<span class="number">20</span>) <span class="comment">#20 univs</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="中文输出对齐问题"><a href="#中文输出对齐问题" class="headerlink" title="中文输出对齐问题"></a>中文输出对齐问题</h2><p>当输出中文的宽度不够时，系统会采用西文字符填充，导致对齐出现问题。</p><p>可以使用中文空格chr(12288)填充解决。</p><p><code>&lt;填充&gt;</code>：用于填充的单个字符</p><p><code>&lt;对齐&gt;</code>：&lt;左对齐    &gt;右对齐        ^居中对齐</p><p><code>&lt;宽度&gt;</code>：槽的设定输出宽度</p><p><code>,</code>：数字的千位分隔符适用于整数和浮点数</p><p><code>&lt;精度&gt;</code>：浮点数小数部分的精度或字符串的最大输出长度</p><p><code>&lt;类型&gt;</code>：整数类型b,c,d,o,x,X浮点数类型e,E,f,%</p><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout= <span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'tbody'</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr, bs4.element.Tag):</span><br><span class="line">            tds = tr(<span class="string">'td'</span>)</span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">3</span>].string])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    tplt = <span class="string">"&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;"</span></span><br><span class="line">    print(tplt.format(<span class="string">"排名"</span>, <span class="string">"学校名称"</span>, <span class="string">"分数"</span>,chr(<span class="number">12288</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(tplt.format(u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>],chr(<span class="number">12288</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    uinfo = []</span><br><span class="line">    url = <span class="string">'http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html'</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    fillUnivList(uinfo,html)</span><br><span class="line">    printUnivList(uinfo,<span class="number">20</span>) <span class="comment">#20 univs</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="5-实战之Re库入门"><a href="#5-实战之Re库入门" class="headerlink" title="5.实战之Re库入门"></a>5.实战之Re库入门</h1><p>正则表达式</p><ul><li>通用的字符串表达框架</li><li>简介表达一组字符串的表达式</li><li>针对字符串表达“简洁”和“特征”思想的工具</li><li>判断某字符串的特征归属</li></ul><h2 id="正则表达式的语法"><a href="#正则表达式的语法" class="headerlink" title="正则表达式的语法"></a>正则表达式的语法</h2><table><thead><tr><th>操作符</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td>.</td><td>表示任何单个字符</td><td></td></tr><tr><td>[ ]</td><td>字符集，对单个字符给出取值范围</td><td>[abc]表达式a、b、c,[a-z]表示a到z单个字符</td></tr><tr><td>[^ ]</td><td>非字符集，对单个字符给出排除范围</td><td>[^abc]表示非a或b或c的单个字符</td></tr><tr><td>*</td><td>前一个字符0次或无限次扩展</td><td>abc* 表示 ab、abc、abcc、abccc等</td></tr><tr><td>+</td><td>前一个字符1次或无限次扩展</td><td>abc+ 表示 abc、abcc、abccc等</td></tr><tr><td>?</td><td>前一个字符0次或1次扩展</td><td>abc？表示 ab、abc</td></tr><tr><td>|</td><td>左右表达式任意一个</td><td>abc|def 表示 abc 、def</td></tr><tr><td>{m}</td><td>扩展前一个字符m次</td><td>ab{2}c表示abbc</td></tr><tr><td>{m,n}</td><td>扩展前一个字符m至n次（含n）</td><td>ab{1,2}c表示abc、abbc</td></tr><tr><td>^</td><td>匹配字符串开头</td><td>^abc表示abc且在一个字符串的开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td><td>abc$表示abc且在一个字符串的结尾</td></tr><tr><td>( )</td><td>分组标记，内部只能使用|操作符</td><td>(abc)表示abc，{abc|def}表示abc、def</td></tr><tr><td>\d</td><td>数字，等价于[0-9]</td><td></td></tr><tr><td>\w</td><td>单词字符，等价于[A-Za-z0-9_]</td><td></td></tr></tbody></table><h3 id="经典正则表达式实例"><a href="#经典正则表达式实例" class="headerlink" title="经典正则表达式实例"></a>经典正则表达式实例</h3><table><thead><tr><th>正则表达式</th><th>说明</th></tr></thead><tbody><tr><td><code>^[A-Za-z]+$</code></td><td>由26个字母组成的字符串</td></tr><tr><td><code>^[A-Za-z0-9]+$</code></td><td>由26个字母和数字组成的字符串</td></tr><tr><td><code>^-?\d+$</code></td><td>整数形式的字符串</td></tr><tr><td><code>^[0-9]*[1-9][0-9]*$</code></td><td>正整数形式的字符串</td></tr><tr><td><code>[1-9]\d{5}</code></td><td>中国境内邮政编码，6位</td></tr><tr><td><code>[\u4e00-\u9fa5]</code></td><td>匹配中文字符</td></tr><tr><td>`\d{3}-\d{8}</td><td>\d{4}-\d{7}`</td></tr></tbody></table><h2 id="Re库的基本使用"><a href="#Re库的基本使用" class="headerlink" title="Re库的基本使用"></a>Re库的基本使用</h2><p>Re库是Python的标准库，主要用于字符串匹配。</p><h3 id="正则表达式的表示类型"><a href="#正则表达式的表示类型" class="headerlink" title="正则表达式的表示类型"></a>正则表达式的表示类型</h3><p>raw string类型（原生字符串类型）,是不包含转义符<code>\</code>的字符串</p><p>re库采用raw string类型表示正则表达式，表示为：r’text’</p><p>例如：<code>r&#39;[1-9]\d{5}&#39;</code></p><p>​       <code>r&#39;\d{3}-\d{8}|\d{4}-\d{7}&#39;</code></p><h3 id="Re库主要功能函数"><a href="#Re库主要功能函数" class="headerlink" title="Re库主要功能函数"></a>Re库主要功能函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>re.search()</td><td>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td>re.match()</td><td>从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td>re.findall()</td><td>搜索字符串，以列表类型返回全部能匹配的子串</td></tr><tr><td>re.split()</td><td>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td>re.finditer()</td><td>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td></tr><tr><td>re.sub()</td><td>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><h4 id="re-search-pattern-string-flags-0"><a href="#re-search-pattern-string-flags-0" class="headerlink" title="re.search(pattern,string,flags=0)"></a>re.search(pattern,string,flags=0)</h4><blockquote><p>re.search(pattern,string,flags=0)</p></blockquote><ul><li><p>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象；</p><ul><li><p>pattern：正则表达式的字符串或原生字符串表示；</p></li><li><p>string：待匹配字符串；</p></li><li><p>flags：正则表达式使用时的控制标记；</p><table><thead><tr><th>常用标记</th><th>说明</th></tr></thead><tbody><tr><td>re.I|re.IGNORECASE</td><td>忽略正则表达式的大小写，[A-Z]能匹配小写字符</td></tr><tr><td>re.M|re.MUTILINE</td><td>正则表达式中的^操作符能够将给定字符串的每行当做匹配开始</td></tr><tr><td>re.S|re.DOTILL</td><td>正则表达式中的.操作符能够匹配所有字符，默认匹配除换行符外的所有字符</td></tr></tbody></table></li></ul></li></ul><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    print(match.group(<span class="number">0</span>))  <span class="comment">#'100081'</span></span><br></pre></td></tr></table></figure><h4 id="re-match-pattern-string-flags-0"><a href="#re-match-pattern-string-flags-0" class="headerlink" title="re.match(pattern,string,flags=0)"></a>re.match(pattern,string,flags=0)</h4><blockquote><p>re.match(pattern,string,flags=0)</p></blockquote><ul><li>从一个字符串的开始位置起匹配正则表达式，返回match对象<ul><li>pattern：正则表达式的字符串或原生字符串表示；</li><li>string：待匹配字符串；</li><li>flags：正则表达式使用时的控制标记；</li></ul></li></ul><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.match(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    print(match.group(<span class="number">0</span>))  <span class="comment">#NULL</span></span><br><span class="line">match = re.match(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'100081 BIT'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    print(match.group(<span class="number">0</span>))  <span class="comment">#'100081'</span></span><br></pre></td></tr></table></figure><h4 id="re-findall-pattern-string-flags-0"><a href="#re-findall-pattern-string-flags-0" class="headerlink" title="re.findall(pattern,string,flags=0)"></a>re.findall(pattern,string,flags=0)</h4><blockquote><p>re.findall(pattern,string,flags=0)</p></blockquote><ul><li>搜索字符串，以列表类型返回全部能匹配的子串<ul><li>pattern：正则表达式的字符串或原生字符串表示；</li><li>string：待匹配字符串；</li><li>flags：正则表达式使用时的控制标记；</li></ul></li></ul><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ls = re.findall(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT100081 TSU100084'</span>)</span><br><span class="line">print(ls) <span class="comment">#['100081', '100084']</span></span><br></pre></td></tr></table></figure><h4 id="re-split-pattern-string-maxsplit-0-flags-0"><a href="#re-split-pattern-string-maxsplit-0-flags-0" class="headerlink" title="re.split(pattern,string,maxsplit=0,flags=0)"></a>re.split(pattern,string,maxsplit=0,flags=0)</h4><blockquote><p>re.split(pattern,string,flags=0)</p></blockquote><ul><li>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型<ul><li>pattern：正则表达式的字符串或原生字符串表示；</li><li>string：待匹配字符串；</li><li>maxsplit：最大分割数，剩余部分作为最后一个元素输出；</li><li>flags：正则表达式使用时的控制标记；</li></ul></li></ul><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ls = re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT100081 TSU100084'</span>)</span><br><span class="line">print(ls) <span class="comment">#['BIT', ' TSU', '']</span></span><br><span class="line">ls2 = re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT100081 TSU100084'</span>, maxsplit=<span class="number">1</span>)</span><br><span class="line">print(ls2) <span class="comment">#['BIT', ' TSU10084']</span></span><br></pre></td></tr></table></figure><h4 id="re-finditer-pattern-string-flags-0"><a href="#re-finditer-pattern-string-flags-0" class="headerlink" title="re.finditer(pattern,string,flags=0)"></a>re.finditer(pattern,string,flags=0)</h4><blockquote><p>re.finditer(pattern,string,flags=0)</p></blockquote><ul><li>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素都是match对象<ul><li>pattern：正则表达式的字符串或原生字符串表示；</li><li>string：待匹配字符串；</li><li>flags：正则表达式使用时的控制标记；</li></ul></li></ul><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT100081 TSU100084'</span>):</span><br><span class="line">    <span class="keyword">if</span> m:</span><br><span class="line">        print(m.group(<span class="number">0</span>)) <span class="comment">#100081 100084</span></span><br></pre></td></tr></table></figure><h4 id="re-sub-pattern-repl-string-count-0-flags-0"><a href="#re-sub-pattern-repl-string-count-0-flags-0" class="headerlink" title="re.sub(pattern,repl,string,count=0,flags=0)"></a>re.sub(pattern,repl,string,count=0,flags=0)</h4><blockquote><p>re.sub(pattern,repl,string,count=0,flags=0)</p></blockquote><ul><li>在一个字符串中替换所有匹配正则表达式的子串，并返回替换后的字符串<ul><li>pattern：正则表达式的字符串或原生字符串表示；</li><li>repl：替换匹配字符串的字符串；</li><li>string：待匹配字符串；</li><li>count：匹配的最大替换次数</li><li>flags：正则表达式使用时的控制标记；</li></ul></li></ul><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">rst = re.sub(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">':zipcode'</span>, <span class="string">'BIT 100081,TSU 100084'</span>)</span><br><span class="line">print(rst) <span class="comment"># 'BIT :zipcode TSU :zipcode'</span></span><br></pre></td></tr></table></figure><h3 id="Re库的另一种用法"><a href="#Re库的另一种用法" class="headerlink" title="Re库的另一种用法"></a>Re库的另一种用法</h3><p>编译后的对象拥有的方法和re库主要功能函数相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#函数式用法：一次性操作</span></span><br><span class="line">rst = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT 100081'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#面向对象用法：编译后的多次操作</span></span><br><span class="line">pat = re.compile(<span class="string">r'[1-9]\d&#123;5&#125;'</span>)</span><br><span class="line">rst = pat.search(<span class="string">'BIT 100081'</span>)</span><br></pre></td></tr></table></figure><h4 id="re-compile-pattern-flags-0"><a href="#re-compile-pattern-flags-0" class="headerlink" title="re.compile(pattern,flags=0)"></a>re.compile(pattern,flags=0)</h4><ul><li>将正则表达式的字符串形式编译成正则表达式对象<ul><li>pattern：正则表达式的字符串或原生字符串表示；</li><li>flags：正则表达式使用时的控制标记；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regex = re.compile(<span class="string">r'[1-9]\d&#123;5&#125;'</span>)</span><br></pre></td></tr></table></figure><h3 id="Re库的match对象"><a href="#Re库的match对象" class="headerlink" title="Re库的match对象"></a>Re库的match对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    print(match.group(<span class="number">0</span>))  <span class="comment"># '100081'</span></span><br><span class="line">print(type(match)) <span class="comment"># &lt;class 're.Match'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Match对象的属性"><a href="#Match对象的属性" class="headerlink" title="Match对象的属性"></a>Match对象的属性</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.string</td><td>待匹配的文本</td></tr><tr><td>.re</td><td>匹配时使用的pattern对象（正则表达式）</td></tr><tr><td>.pos</td><td>正则表达式搜索文本的开始位置</td></tr><tr><td>.endpos</td><td>正则表达式搜索文本的结束位置</td></tr></tbody></table><h4 id="Match对象的方法"><a href="#Match对象的方法" class="headerlink" title="Match对象的方法"></a>Match对象的方法</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.group(0)</td><td>获得匹配后的字符串</td></tr><tr><td>.start()</td><td>匹配字符串在原始字符串的开始位置</td></tr><tr><td>.end()</td><td>匹配字符串在原始字符串的结束位置</td></tr><tr><td>.span()</td><td>返回(.start(),.end())</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT100081 TSU100084'</span>)</span><br><span class="line">print(m.string) <span class="comment"># BIT100081 TSU100084</span></span><br><span class="line">print(m.re) <span class="comment"># re.compile('[1-9]\\d&#123;5&#125;')</span></span><br><span class="line">print(m.pos) <span class="comment"># 0</span></span><br><span class="line">print(m.endpos) <span class="comment"># 19</span></span><br><span class="line">print(m.group(<span class="number">0</span>)) <span class="comment"># '100081' 返回的是第一次匹配的结果,获取所有使用re.finditer()方法</span></span><br><span class="line">print(m.start()) <span class="comment"># 3</span></span><br><span class="line">print(m.end()) <span class="comment"># 9</span></span><br><span class="line">print(m.span()) <span class="comment"># (3, 9)</span></span><br></pre></td></tr></table></figure><h3 id="Re库的贪婪匹配和最小匹配"><a href="#Re库的贪婪匹配和最小匹配" class="headerlink" title="Re库的贪婪匹配和最小匹配"></a>Re库的贪婪匹配和最小匹配</h3><p>Re库默认采用贪婪匹配，即输出匹配最长的子串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.search(<span class="string">r'PY.*N'</span>, <span class="string">'PYANBNCNDN'</span>)</span><br><span class="line">print(match.group(<span class="number">0</span>)) <span class="comment"># PYANBNCNDN</span></span><br></pre></td></tr></table></figure><p>最小匹配方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.search(<span class="string">r'PY.*?N'</span>, <span class="string">'PYANBNCNDN'</span>)</span><br><span class="line">print(match.group(<span class="number">0</span>)) <span class="comment"># PYAN</span></span><br></pre></td></tr></table></figure><p>最小匹配操作符</p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>前一个字符0次或无限次扩展，最小匹配</td></tr><tr><td>+?</td><td>前一个字符1次或无限次扩展，最小匹配</td></tr><tr><td>??</td><td>前一个字符0次或1次扩展，最小匹配</td></tr><tr><td>{m,n}?</td><td>扩展前一个字符m至n次（含n），最小匹配</td></tr></tbody></table><h2 id="Re库实例之淘宝商品比价定向爬虫"><a href="#Re库实例之淘宝商品比价定向爬虫" class="headerlink" title="Re库实例之淘宝商品比价定向爬虫"></a>Re库实例之淘宝商品比价定向爬虫</h2><blockquote><p>功能描述：</p><ul><li>目标：获取淘宝搜索页面的信息，提取其中的商品名称和价格</li><li>理解：<ul><li>淘宝的搜索接口</li><li>翻页的处理</li></ul></li><li>技术路线：requests-re</li></ul></blockquote><blockquote><p>程序的结构设计：</p><ul><li>步骤1：提交商品搜索请求，循环获取页面</li><li>步骤2：对于每个页面，提取商品的名称和价格信息</li><li>步骤3：将信息输出到屏幕上</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment">#浏览器请求头中的User-Agent，代表当前请求的用户代理信息（下方有获取方式）</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36'</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#浏览器请求头中的cookie，包含自己账号的登录信息（下方有获取方式）</span></span><br><span class="line">        coo = <span class="string">''</span></span><br><span class="line">        cookies = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> coo.split(<span class="string">';'</span>): <span class="comment">#浏览器伪装</span></span><br><span class="line">            name, value = line.strip().split(<span class="string">'='</span>, <span class="number">1</span>)</span><br><span class="line">            cookies[name] = value</span><br><span class="line">        r = requests.get(url, cookies = cookies, headers=headers, timeout = <span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解析请求到的页面，提取出相关商品的价格和名称</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePage</span><span class="params">(ilt, html)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plt = re.findall(<span class="string">r'\"view_price\"\:\"[\d\.]*\"'</span>, html)</span><br><span class="line">        tlt = re.findall(<span class="string">r'\"raw_title\"\:\".*?\"'</span>, html)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plt)):</span><br><span class="line">            price = eval(plt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            title = eval(tlt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            ilt.append([price, title])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printGoodsList</span><span class="params">(ilt)</span>:</span></span><br><span class="line">    tplt = <span class="string">"&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;"</span></span><br><span class="line">    print(tplt.format(<span class="string">"序号"</span>, <span class="string">"价格"</span>, <span class="string">"商品名称"</span>))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> ilt:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        print(tplt.format(count, g[<span class="number">0</span>], g[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    goods = <span class="string">'书包'</span></span><br><span class="line">    depth = <span class="number">2</span> <span class="comment">#爬取深度，2表示爬取两页数据</span></span><br><span class="line">    start_url = <span class="string">'https://s.taobao.com/search?q='</span> + goods</span><br><span class="line">    infoList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(depth):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = start_url + <span class="string">'&amp;s='</span> + str(<span class="number">44</span>*i)</span><br><span class="line">            html = getHTMLText(url)</span><br><span class="line">            parsePage(infoList, html)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    printGoodsList(infoList)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>​    需要注意的是，淘宝网站本身有反爬虫机制，所以在使用<code>requests</code>库的<code>get()</code>方法爬取网页信息时，需要加入本地的cookie信息，否则淘宝返回的是一个错误页面，无法获取数据。</p><p>​    代码中的<code>coo</code>变量中需要自己添加浏览器中的<code>cookie</code>信息，具体做法是在浏览器中按F12，在出现的窗口中进入<code>network</code>（网络）内，搜索“书包”，然后找到请求的url（一般是第一个），点击请求在右侧<code>header</code>（消息头）中找到<code>Request Header</code>（请求头），在请求头中找到<code>User-Agent</code>和<code>cookie</code>字段，放到代码相应位置即可。</p><h2 id="Re库实例之股票数据定向爬虫"><a href="#Re库实例之股票数据定向爬虫" class="headerlink" title="Re库实例之股票数据定向爬虫"></a>Re库实例之股票数据定向爬虫</h2><blockquote><p>功能描述：</p><ul><li>目标：获取上交所和深交所所有股票的名称和交易信息</li><li>输出：保存到文件中</li><li>技术路线：requests-bs4-re</li></ul></blockquote><blockquote><p>候选数据网站的选择：</p><ul><li>新浪股票：<a href="https://finance.sina.com.cn/stock/" target="_blank" rel="noopener">https://finance.sina.com.cn/stock/</a></li><li>百度股票：<a href="https://gupiao.baidu.com/stock/" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/</a></li><li>选取原则：股票信息静态存在于HTML页面中，非js代码生成，没有Robots协议限制。</li></ul></blockquote><blockquote><p>程序的结构设计</p><ul><li>步骤1：从东方财富网获取股票列表</li><li>步骤2：根据股票列表逐个到百度股票获取个股信息</li><li>步骤3：将结果存储到文件</li></ul></blockquote><h3 id="初步代码编写-error"><a href="#初步代码编写-error" class="headerlink" title="初步代码编写(error)"></a>初步代码编写(error)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockList</span><span class="params">(lst, stockURL)</span>:</span></span><br><span class="line">    html = getHTMLText(stockURL)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>) </span><br><span class="line">    a = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            href = i.attrs[<span class="string">'href'</span>]</span><br><span class="line">            lst.append(re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockInfo</span><span class="params">(lst, stockURL, fpath)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> lst:</span><br><span class="line">        url = stockURL + stock + <span class="string">".html"</span></span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> html==<span class="string">""</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            infoDict = &#123;&#125;</span><br><span class="line">            soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">            stockInfo = soup.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'stock-bets'</span>&#125;)</span><br><span class="line"> </span><br><span class="line">            name = stockInfo.find_all(attrs=&#123;<span class="string">'class'</span>:<span class="string">'bets-name'</span>&#125;)[<span class="number">0</span>]</span><br><span class="line">            infoDict.update(&#123;<span class="string">'股票名称'</span>: name.text.split()[<span class="number">0</span>]&#125;)</span><br><span class="line">             </span><br><span class="line">            keyList = stockInfo.find_all(<span class="string">'dt'</span>)</span><br><span class="line">            valueList = stockInfo.find_all(<span class="string">'dd'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keyList)):</span><br><span class="line">                key = keyList[i].text</span><br><span class="line">                val = valueList[i].text</span><br><span class="line">                infoDict[key] = val</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">with</span> open(fpath, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write( str(infoDict) + <span class="string">'\n'</span> )</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    stock_list_url = <span class="string">'https://quote.eastmoney.com/stocklist.html'</span></span><br><span class="line">    stock_info_url = <span class="string">'https://gupiao.baidu.com/stock/'</span></span><br><span class="line">    output_file = <span class="string">'D:/BaiduStockInfo.txt'</span></span><br><span class="line">    slist=[]</span><br><span class="line">    getStockList(slist, stock_list_url)</span><br><span class="line">    getStockInfo(slist, stock_info_url, output_file)</span><br><span class="line"> </span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="代码优化-error"><a href="#代码优化-error" class="headerlink" title="代码优化(error)"></a>代码优化(error)</h3><p>速度提高：编码识别的优化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url, code=<span class="string">"utf-8"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = code</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockList</span><span class="params">(lst, stockURL)</span>:</span></span><br><span class="line">    html = getHTMLText(stockURL, <span class="string">"GB2312"</span>)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>) </span><br><span class="line">    a = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            href = i.attrs[<span class="string">'href'</span>]</span><br><span class="line">            lst.append(re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockInfo</span><span class="params">(lst, stockURL, fpath)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> lst:</span><br><span class="line">        url = stockURL + stock + <span class="string">".html"</span></span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> html==<span class="string">""</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            infoDict = &#123;&#125;</span><br><span class="line">            soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">            stockInfo = soup.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'stock-bets'</span>&#125;)</span><br><span class="line"> </span><br><span class="line">            name = stockInfo.find_all(attrs=&#123;<span class="string">'class'</span>:<span class="string">'bets-name'</span>&#125;)[<span class="number">0</span>]</span><br><span class="line">            infoDict.update(&#123;<span class="string">'股票名称'</span>: name.text.split()[<span class="number">0</span>]&#125;)</span><br><span class="line">             </span><br><span class="line">            keyList = stockInfo.find_all(<span class="string">'dt'</span>)</span><br><span class="line">            valueList = stockInfo.find_all(<span class="string">'dd'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keyList)):</span><br><span class="line">                key = keyList[i].text</span><br><span class="line">                val = valueList[i].text</span><br><span class="line">                infoDict[key] = val</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">with</span> open(fpath, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write( str(infoDict) + <span class="string">'\n'</span> )</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">                print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">            print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    stock_list_url = <span class="string">'https://quote.eastmoney.com/stocklist.html'</span></span><br><span class="line">    stock_info_url = <span class="string">'https://gupiao.baidu.com/stock/'</span></span><br><span class="line">    output_file = <span class="string">'D:/BaiduStockInfo.txt'</span></span><br><span class="line">    slist=[]</span><br><span class="line">    getStockList(slist, stock_list_url)</span><br><span class="line">    getStockInfo(slist, stock_info_url, output_file)</span><br><span class="line"> </span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="测试成功代码"><a href="#测试成功代码" class="headerlink" title="测试成功代码"></a>测试成功代码</h3><p>由于东方财富网链接访问时出现错误，所以更换了一个新的网站去获取股票列表，具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockList</span><span class="params">(lst, stockListURL)</span>:</span></span><br><span class="line">    html = getHTMLText(stockListURL)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    a = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            href = i.attrs[<span class="string">'href'</span>]</span><br><span class="line">            lst.append(re.findall(<span class="string">r"[S][HZ]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    lst = [item.lower() <span class="keyword">for</span> item <span class="keyword">in</span> lst]  <span class="comment"># 将爬取信息转换小写</span></span><br><span class="line">    <span class="keyword">return</span> lst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockInfo</span><span class="params">(lst, stockInfoURL, fpath)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> lst:</span><br><span class="line">        url = stockInfoURL + stock + <span class="string">".html"</span></span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> html == <span class="string">""</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            infoDict = &#123;&#125;</span><br><span class="line">            soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">            stockInfo = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'stock-bets'</span>&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> isinstance(stockInfo, bs4.element.Tag):  <span class="comment"># 判断类型</span></span><br><span class="line">                name = stockInfo.find_all(attrs=&#123;<span class="string">'class'</span>: <span class="string">'bets-name'</span>&#125;)[<span class="number">0</span>]</span><br><span class="line">                infoDict.update(&#123;<span class="string">'股票名称'</span>: name.text.split(<span class="string">'\n'</span>)[<span class="number">1</span>].replace(<span class="string">' '</span>,<span class="string">''</span>)&#125;)</span><br><span class="line">                keylist = stockInfo.find_all(<span class="string">'dt'</span>)</span><br><span class="line">                valuelist = stockInfo.find_all(<span class="string">'dd'</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keylist)):</span><br><span class="line">                    key = keylist[i].text</span><br><span class="line">                    val = valuelist[i].text</span><br><span class="line">                    infoDict[key] = val</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> open(fpath, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(str(infoDict) + <span class="string">'\n'</span>)</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">                print(<span class="string">"\r当前速度：&#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)), end=<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">            print(<span class="string">"\r当前速度：&#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)), end=<span class="string">""</span>)</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    fpath = <span class="string">'D://gupiao.txt'</span></span><br><span class="line">    stock_list_url = <span class="string">'https://hq.gucheng.com/gpdmylb.html'</span></span><br><span class="line">    stock_info_url = <span class="string">'https://gupiao.baidu.com/stock/'</span></span><br><span class="line">    slist = []</span><br><span class="line">    list = getStockList(slist, stock_list_url)</span><br><span class="line">    getStockInfo(list, stock_info_url, fpath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="6-爬虫框架-Scrapy"><a href="#6-爬虫框架-Scrapy" class="headerlink" title="6.爬虫框架-Scrapy"></a>6.爬虫框架-Scrapy</h1><p>爬虫框架：是实现爬虫功能的一个软件结构和功能组件集合。</p><p>爬虫框架是一个半成品，能够帮助用户实现专业网络爬虫。</p><p><img src="https://zsy0216.github.io/image/hexo/20190604/1558688318694.png" alt="1558688318694"></p><h2 id="安装Scrapy"><a href="#安装Scrapy" class="headerlink" title="安装Scrapy"></a>安装Scrapy</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br><span class="line"><span class="meta">#</span><span class="bash">验证</span></span><br><span class="line">scrapy -h</span><br></pre></td></tr></table></figure><h3 id="遇到错误"><a href="#遇到错误" class="headerlink" title="遇到错误"></a>遇到错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">building &apos;twisted.test.raiser&apos; extension</span><br><span class="line">   error: Microsoft Visual C++ 14.0 is required. Get it with &quot;Microsoft Visual C++ Build Tools&quot;: https://visualstudio.microsoft.com/downloads/</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p>查看python版本及位数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;python</span><br><span class="line">Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br></pre></td></tr></table></figure><p>可知，python版本为3.7.2, 64位</p></li><li><p>下载Twisted</p><p>到 <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a> 下载twisted对应版本的whl文件;<br>根据版本应下载Twisted‑17.9.0‑cp37‑cp37m‑win_amd64.whl</p><p>注意：cp后面是python版本，amd64代表64位，32位的下载32位对应的文件。</p></li><li><p>安装Twisted</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install D:\download\Twisted‑19.2.0‑cp37‑cp37m‑win_amd64.whl</span><br></pre></td></tr></table></figure></li><li><p>安装Scrapy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install scrapy</span><br></pre></td></tr></table></figure></li></ol><h2 id="Scrapy爬虫框架解析"><a href="#Scrapy爬虫框架解析" class="headerlink" title="Scrapy爬虫框架解析"></a>Scrapy爬虫框架解析</h2><ol><li>Engine：不需要用户修改<ul><li>控制所有模块之间的数据流</li><li>根据条件触发事件</li></ul></li><li>Downloader：不需要用户修改<ul><li>根据请求下载网页</li></ul></li><li>Scheduler：不需要用户修改<ul><li>对所有爬取请求进行调度管理</li></ul></li><li>Downloader Middleware：用户可编写配置代码<ul><li>目的：实施Engine、Scheduler和Downloader之间进行用户可配置的控制</li><li>功能：修改、丢弃、新增请求或响应</li></ul></li><li>Spider：需要用户编写配置代码<ul><li>解析Downloader返回的响应（Response）</li><li>产生爬取项（scraped item）</li><li>产生额外的爬取请求（Request）</li></ul></li><li>Item Pipelines：需要用户编写配置代码<ul><li>以流水线方式处理Spider产生的爬取项</li><li>由一组操作顺序组成，类似流水线，每个操作是一个Item Pipeline类型</li><li>可能操作包括：清理、检验、和查重爬取项中的HTML数据、将数据存储到数据库</li></ul></li><li>Spider Middleware：用户可以编写配置代码<ul><li>目的：对请求和爬取项的再处理</li><li>功能：修改、丢弃、新增请求或爬取项</li></ul></li></ol><h2 id="requests-vs-Scrapy"><a href="#requests-vs-Scrapy" class="headerlink" title="requests vs. Scrapy"></a>requests vs. Scrapy</h2><ul><li><p>相同点</p><ul><li>两者都可以进行页面请求和爬取，Python爬虫的两个重要技术路线</li><li>两者可用性都好，文档丰富，入门简单</li><li>两者都没有处理js、提交表单、应对验证码等功能（可扩展）</li></ul></li><li><p>不同点</p><table><thead><tr><th>requests</th><th>Scrapy</th></tr></thead><tbody><tr><td>页面级爬虫</td><td>网站级爬虫</td></tr><tr><td>功能库</td><td>框架</td></tr><tr><td>并发性考虑不足，性能较差</td><td>并发性好，性能较高</td></tr><tr><td>重点在于页面下载</td><td>重点在于爬虫结构</td></tr><tr><td>定制灵活</td><td>一般定制灵活，深度定制困难</td></tr><tr><td>上手十分简单</td><td>入门稍难</td></tr></tbody></table><h2 id="Scrapy爬虫的常用命令"><a href="#Scrapy爬虫的常用命令" class="headerlink" title="Scrapy爬虫的常用命令"></a>Scrapy爬虫的常用命令</h2></li></ul><p>Scrapy命令行</p><p>​    Scrapy是为持续运行设计的专业爬虫框架，提供操作的Scrapy命令行</p><table><thead><tr><th>命令</th><th>说明</th><th>格式</th></tr></thead><tbody><tr><td>startproject</td><td>创建一个新工程</td><td>scrapy startproject <name>[dir]</name></td></tr><tr><td>genspider</td><td>创建一个爬虫</td><td>scrapy genspider [options] <name> <domain></domain></name></td></tr><tr><td>settings</td><td>获得爬虫配置信息</td><td>scrapy setting [options]</td></tr><tr><td>crawl</td><td>运行一个爬虫</td><td>scrapy crawl <spider></spider></td></tr><tr><td>list</td><td>列出工程中所有爬虫</td><td>scrapy list</td></tr><tr><td>shell</td><td>启动URL调试命令行</td><td>scrapy shell [url]</td></tr></tbody></table><h2 id="Scrapy框架的基本使用"><a href="#Scrapy框架的基本使用" class="headerlink" title="Scrapy框架的基本使用"></a>Scrapy框架的基本使用</h2><h3 id="步骤1：建立一个Scrapy爬虫工程"><a href="#步骤1：建立一个Scrapy爬虫工程" class="headerlink" title="步骤1：建立一个Scrapy爬虫工程"></a>步骤1：建立一个Scrapy爬虫工程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打开命令提示符-win+r 输入cmd</span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入存放工程的目录</span></span><br><span class="line">D:\&gt;cd demo</span><br><span class="line">D:\demo&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">建立一个工程，工程名python123demo</span></span><br><span class="line">D:\demo&gt;scrapy startproject python123demo</span><br><span class="line">New Scrapy project 'python123demo', using template directory 'd:\program files\python\lib\site-packages\scrapy\templates\project', created in:</span><br><span class="line">    D:\demo\python123demo</span><br><span class="line"></span><br><span class="line">You can start your first spider with:</span><br><span class="line">    cd python123demo</span><br><span class="line">    scrapy genspider example example.com</span><br><span class="line">D:\demo&gt;</span><br></pre></td></tr></table></figure><p>生成的目录工程介绍：</p><blockquote><p>python123demo/          —————-&gt; 外层目录</p><p>​    scrapy.cfg                        ———&gt; 部署Scrapy爬虫的配置文件   </p><p>​    python123demo/          ———&gt; Scrapy框架的用户自定义Python代码</p><p>​        <code>__init__.py</code>           —-&gt; 初始化脚本</p><p>​        items.py                —-&gt; Items代码模板（继承类）</p><p>​        middlewares.py       —-&gt; Middlewares代码模板（继承类）</p><p>​        pipelines.py              —-&gt; Pipelines代码模板（继承类）</p><p>​        settings.py            —-&gt; Scrapy爬虫的配置文件</p><p>​        spiders/                —-&gt; Spiders代码模板目录（继承类）</p></blockquote><blockquote><p>spiders/            —————-&gt; Spiders代码模板目录（继承类）</p><p>​    <code>__init__.py</code>        ——–&gt; 初始文件，无需修改</p><p>​    <code>__pycache__/</code>          ——–&gt; 缓存目录，无需修改    </p></blockquote><h3 id="步骤2：在工程中产生一个Scrapy爬虫"><a href="#步骤2：在工程中产生一个Scrapy爬虫" class="headerlink" title="步骤2：在工程中产生一个Scrapy爬虫"></a>步骤2：在工程中产生一个Scrapy爬虫</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换到工程目录</span></span><br><span class="line">D:\demo&gt;cd python123demo</span><br><span class="line"><span class="meta">#</span><span class="bash">产生一个scrapy爬虫</span></span><br><span class="line">D:\demo\python123demo&gt;scrapy genspider demo python123.io</span><br><span class="line">Created spider 'demo' using template 'basic' in module:</span><br><span class="line">  python123demo.spiders.demo</span><br><span class="line"></span><br><span class="line">D:\demo\python123demo&gt;</span><br></pre></td></tr></table></figure><h3 id="步骤3：配置产生的spider爬虫"><a href="#步骤3：配置产生的spider爬虫" class="headerlink" title="步骤3：配置产生的spider爬虫"></a>步骤3：配置产生的spider爬虫</h3><p>修改D:\demo\python123demo\python123demo\spiders\demo.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line"><span class="comment">#    allowed_domains = ['python123.io']</span></span><br><span class="line">    start_urls = [<span class="string">'http://python123.io/ws/demo.html'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        fname = response.url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">with</span> open(fname, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(<span class="string">'Save file %s.'</span> % name)</span><br></pre></td></tr></table></figure><p>完整版代码编写方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"demo"</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        urls = [</span><br><span class="line">        <span class="string">'http://python123.io/ws/demo.html'</span></span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Requests(url=url, callback=self.parse)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        fname = response.url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">with</span> open(fname, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(<span class="string">'Saved file %s.'</span> % fname)</span><br></pre></td></tr></table></figure><h3 id="步骤4：运行爬虫，获取网页"><a href="#步骤4：运行爬虫，获取网页" class="headerlink" title="步骤4：运行爬虫，获取网页"></a>步骤4：运行爬虫，获取网页</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">输入运行命令 scrapy crawl</span></span><br><span class="line">D:\demo\python123demo&gt;scrapy crawl demo</span><br></pre></td></tr></table></figure><h4 id="可能出现的错误"><a href="#可能出现的错误" class="headerlink" title="可能出现的错误"></a>可能出现的错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ModuleNotFoundError: No module named &apos;win32api&apos;</span><br></pre></td></tr></table></figure><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li><p>到 <a href="https://pypi.org/project/pypiwin32/#files" target="_blank" rel="noopener">https://pypi.org/project/pypiwin32/#files</a> 下载py3版本的<a href="https://files.pythonhosted.org/packages/d0/1b/2f292bbd742e369a100c91faa0483172cd91a1a422a6692055ac920946c5/pypiwin32-223-py3-none-any.whl" target="_blank" rel="noopener">pypiwin32-223-py3-none-any.whl</a>文件；</p></li><li><p>安装pypiwin32-223-py3-none-any.whl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install D:\download\pypiwin32-223-py3-none-any.whl</span><br></pre></td></tr></table></figure></li><li><p>再次在工程目录下运行爬虫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl demo</span><br></pre></td></tr></table></figure></li></ol><h2 id="yield关键字的使用"><a href="#yield关键字的使用" class="headerlink" title="yield关键字的使用"></a>yield关键字的使用</h2><ul><li>yield&lt;———————–&gt;生成器<ul><li>生成器是一个不断产生值的函数；</li><li>包含yield语句的函数是一个生成器；</li><li>生成器每次产生一个值（yield语句），函数会被冻结，被唤醒后再产生一个值；</li></ul></li></ul><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">yield</span> i**<span class="number">2</span></span><br><span class="line"><span class="comment">#产生小于n的所有2的平方值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen(<span class="number">5</span>):</span><br><span class="line">    print(i, <span class="string">" "</span>, end=<span class="string">""</span>)</span><br><span class="line"><span class="comment">#0 1 4 9 16</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#普通写法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(n)</span>:</span></span><br><span class="line">    ls = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="keyword">return</span> ls</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> square(<span class="number">5</span>):</span><br><span class="line">    print(i, <span class="string">" "</span>, end=<span class="string">""</span>)</span><br><span class="line"><span class="comment">#0 1 4 9 16</span></span><br></pre></td></tr></table></figure><h3 id="为何要有生成器？"><a href="#为何要有生成器？" class="headerlink" title="为何要有生成器？"></a>为何要有生成器？</h3><ul><li>生成器比一次列出所有内容的优势<ul><li>更节省存储空间</li><li>响应更迅速</li><li>使用更灵活</li></ul></li></ul><h3 id="Scrapy爬虫的使用步骤"><a href="#Scrapy爬虫的使用步骤" class="headerlink" title="Scrapy爬虫的使用步骤"></a>Scrapy爬虫的使用步骤</h3><ul><li>步骤1：创建一个工程和Spider模板；</li><li>步骤2：编写Spider；</li><li>步骤3：编写Item Pipeline</li><li>步骤4：优化配置策略</li></ul><h2 id="Scrapy爬虫的数据类型"><a href="#Scrapy爬虫的数据类型" class="headerlink" title="Scrapy爬虫的数据类型"></a>Scrapy爬虫的数据类型</h2><h3 id="Request类"><a href="#Request类" class="headerlink" title="Request类"></a>Request类</h3><blockquote><p>class scrapy.http.Request()</p></blockquote><ul><li>Request对象表示一个HTTP请求</li><li>由Spider生成，由Downloader执行</li></ul><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>.url</td><td>Request对应的请求URL地址</td></tr><tr><td>.method</td><td>对应的请求方法，’GET‘ ’POST‘等</td></tr><tr><td>.headers</td><td>字典类型风格的请求头</td></tr><tr><td>.body</td><td>请求内容主体，字符串类型</td></tr><tr><td>.meta</td><td>用户添加的扩展信息，在Scrapy内部模块间传递信息使用</td></tr><tr><td>.copy()</td><td>复制该请求</td></tr></tbody></table><h3 id="Response类"><a href="#Response类" class="headerlink" title="Response类"></a>Response类</h3><blockquote><p>class scrapy.http.Response()</p></blockquote><ul><li>Response对象表示一个HTTP响应</li><li>由Downloader生成，由Spider处理</li></ul><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>.url</td><td>Response对应的URL地址</td></tr><tr><td>.status</td><td>HTTP状态码，默认是200</td></tr><tr><td>.headers</td><td>Response对应的头部信息</td></tr><tr><td>.body</td><td>Response对应的内容信息，字符串类型</td></tr><tr><td>.flags</td><td>一组标记</td></tr><tr><td>.request</td><td>产生Response类型对应的Request对象</td></tr><tr><td>.copy()</td><td>复制该响应</td></tr></tbody></table><h3 id="Item类"><a href="#Item类" class="headerlink" title="Item类"></a>Item类</h3><p>class scrapy.item.Item()</p><ul><li>Item对象表示一个从HTML页面中提取的信息内容</li><li>由Spider生成，由Item Pipeline处理</li><li>Item类似字典类型，可以按照字典类型操作</li></ul><h2 id="CSS-Selector的基本使用"><a href="#CSS-Selector的基本使用" class="headerlink" title="CSS Selector的基本使用"></a>CSS Selector的基本使用</h2><blockquote><html>.css('a::attr(href)').extract()</html></blockquote><p>CSS Selector由W3C组织维护并规范。</p><h2 id="股票数据Scrapy爬虫实例"><a href="#股票数据Scrapy爬虫实例" class="headerlink" title="股票数据Scrapy爬虫实例"></a>股票数据Scrapy爬虫实例</h2><blockquote><p>功能描述：</p><ul><li>技术路线：scrapy</li><li>目标：获取上交所和深交所所有股票的名称和交易信息</li><li>输出：保存到文件中</li></ul></blockquote><h3 id="实例编写"><a href="#实例编写" class="headerlink" title="实例编写"></a>实例编写</h3><ul><li>步骤1：首先进入命令提示符建立工程和Spider模板</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject BaiduStocks</span><br><span class="line">cd BaiduStocks</span><br><span class="line">scrapy genspider stocks baidu.com</span><br><span class="line"><span class="meta">#</span><span class="bash">进一步修改spiders/stocks.py文件</span></span><br></pre></td></tr></table></figure><ul><li>步骤2：编写Spider<ul><li>配置stock.py文件</li><li>修改对返回页面的处理</li><li>修改对新增URL爬取请求的处理</li></ul></li></ul><p>打开spider.stocks.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StocksSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"stocks"</span></span><br><span class="line">    start_urls = [<span class="string">'https://quote.eastmoney.com/stocklist.html'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'a::attr(href)'</span>).extract():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                stock = re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>]</span><br><span class="line">                url = <span class="string">'https://gupiao.baidu.com/stock/'</span> + stock + <span class="string">'.html'</span></span><br><span class="line">                <span class="keyword">yield</span> scrapy.Request(url, callback=self.parse_stock)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_stock</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        infoDict = &#123;&#125;</span><br><span class="line">        stockInfo = response.css(<span class="string">'.stock-bets'</span>)</span><br><span class="line">        name = stockInfo.css(<span class="string">'.bets-name'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        keyList = stockInfo.css(<span class="string">'dt'</span>).extract()</span><br><span class="line">        valueList = stockInfo.css(<span class="string">'dd'</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keyList)):</span><br><span class="line">            key = re.findall(<span class="string">r'&gt;.*&lt;/dt&gt;'</span>, keyList[i])[<span class="number">0</span>][<span class="number">1</span>:<span class="number">-5</span>]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                val = re.findall(<span class="string">r'\d+\.?.*&lt;/dd&gt;'</span>, valueList[i])[<span class="number">0</span>][<span class="number">0</span>:<span class="number">-5</span>]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                val = <span class="string">'--'</span></span><br><span class="line">            infoDict[key]=val</span><br><span class="line">    </span><br><span class="line">        infoDict.update(</span><br><span class="line">            &#123;<span class="string">'股票名称'</span>: re.findall(<span class="string">'\s.*\('</span>,name)[<span class="number">0</span>].split()[<span class="number">0</span>] + \</span><br><span class="line">                re.findall(<span class="string">'\&gt;.*\&lt;'</span>, name)[<span class="number">0</span>][<span class="number">1</span>:<span class="number">-1</span>]&#125;)</span><br><span class="line">        <span class="keyword">yield</span> infoDict</span><br></pre></td></tr></table></figure><ul><li>步骤3：编写Pipelines<ul><li>配置pipelines.py文件</li><li>定义对爬取项（Scrapy Item）的处理类</li><li>配置ITEM_PIPELINES选项</li></ul></li></ul><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaidustocksPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaidustocksInfoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.f = open(<span class="string">'BaiduStockInfo.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.f.close()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            line = str(dict(item)) + <span class="string">'\n'</span></span><br><span class="line">            self.f.write(line)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>setting.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configure item pipelines</span></span><br><span class="line"><span class="comment"># See https://scrapy.readthedocs.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line"><span class="string">'BaiduStocks.pipelines.BaidustocksInfoPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置并发连接选项"><a href="#配置并发连接选项" class="headerlink" title="配置并发连接选项"></a>配置并发连接选项</h3><p>settings.py</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>CONCURRENT_REQUESTS</td><td>Downloader最大并发请求下载数量，默认为32</td></tr><tr><td>CONCURRENT_ITEMS</td><td>Item Pipeline最大并发ITEM处理数量，默认为100</td></tr><tr><td>CONCURRENT_REQUESTS_PRE_DOMAIN</td><td>每个目标域名最大的并发请求数量，默认为8</td></tr><tr><td>CONCURRENT_REQUESTS_PRE_IP</td><td>每个目标IP最大的并发请求数量，默认为0，非0有效</td></tr></tbody></table><p>来源：中国大学MOOC-北京理工大学-嵩天-Python网络爬虫与信息提取</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 网络爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百年孤独</title>
      <link href="/2019/06/23/one-hundred-years-of-solitude/"/>
      <url>/2019/06/23/one-hundred-years-of-solitude/</url>
      
        <content type="html"><![CDATA[<p>昨天晚上一口气看完了剩下的《百年孤独》，距离开始看也不知道隔了多久。</p><p>好像还是有据可查的，开始的时候也写过拍过一些东西。</p><p>。。</p><p>大概是从4月1号开始的，到今天也快有三个月了。不知道为什么总感觉今年的日子过得总是那么快啊。</p><hr><p>​    看完了百年孤独，中间断断续续的也空闲了很多时间，被这样那样的事情耽搁。说实在现在再想好像有点张无忌跟张三丰学太极拳时到最后无招胜有招的地步了，怎么看完之后好像我心中也“无招”了呢？</p><p>​    对于孤独，好像每个人的看法不同，有人对它趋之若鹜，也有的甘之若饴。看完这本书，作者那奇幻的想象，拥有魔力的天马行空的文字，和对每个人物都栩栩如生的描述，确实引人入胜。全书从两个近亲结婚一直担心生出猪尾巴的孩子开始，到最后两个近亲生育出一个长有猪尾巴的孩子结束，跨越百年，历经七代，有被吉卜赛人的发明深深吸引的何塞·阿尔卡蒂奥·布恩迪亚；有为家族尽心尽力百年的乌尔苏拉；有发动战争争取自由的奥雷里亚诺·布恩迪亚上校，最后却被世人遗忘，只当做人们的杜撰……</p><p>​    <img src="https://zsy0216.github.io/image/hexo/one-hundred-years-of-solitude/%E7%99%BE%E5%B9%B4%E5%AD%A4%E7%8B%AC.png" alt="百年孤独"></p><p><strong>四月一日文</strong></p><p>百年孤独                    ——加西亚·马尔克斯</p><p><strong>第一小节</strong></p><p><strong>人物</strong></p><p><img src="https://zsy0216.github.io/image/hexo/one-hundred-years-of-solitude/1.jpg" alt></p><p><strong>地图</strong></p><p><img src="https://zsy0216.github.io/image/hexo/one-hundred-years-of-solitude/2map.jpg" alt></p><p>东面是无法逾越的山脉 山脉另一侧是一座古老的城市里奥阿查，南面是永远覆着绿色植被的泥塘和广阔的大沼泽，大沼泽西面是广袤无垠的水面。所以文明世界应该是在北方的道路上，但是北面也不过是灰白肮脏、泡沫翻滚的大海。</p><p>吉普赛人每次来都带来神奇的发明，一次次的吸引着何塞·阿尔卡蒂奥·布恩迪亚，所以才有了之后的北方道路的探索，更有了之后发现他们是生活在一个半岛上，进而决定搬家，最终在妻子乌尔苏拉·伊瓜兰的阻挠下放弃。</p><p><strong>第二节</strong></p><p>​     介绍了何塞·阿尔卡蒂奥·布恩迪亚和乌尔苏拉·伊瓜兰的近亲关系，在之后的婚姻生活里由于担心生出不好的孩子，所以乌尔苏拉一直保持处子之身，进而有了之后布恩迪亚与别人斗鸡胜利后被嘲讽，之后决斗将对方杀死，然后因受不了死者死后的烦扰，决定翻越山脉离开。</p><p>​       布恩迪亚迷恋于炼金术，阿尔卡蒂奥慢慢长大，后与会用纸牌算命的名叫庇拉尔·特尔内拉发生关系并有了孩子，但阿尔卡迪奥却因此陷入恐慌，在一次吉卜赛人来的时候，和一名吉卜赛女子随吉卜赛人远去。他的母亲乌尔苏拉外出寻找阿尔卡蒂奥，五个月后归来，并未追上吉卜赛人，但带回来了一群来自大沼泽另一边（只有两天路程）的人，找到了布恩迪亚在上次失败的远征中没能发现的通向伟大发明的道理。</p><p><strong>第三节</strong></p><p><img src="https://zsy0216.github.io/image/hexo/one-hundred-years-of-solitude/3.png" alt></p><p><img src="https://zsy0216.github.io/image/hexo/one-hundred-years-of-solitude/4.png" alt></p><p>​    何塞·阿尔卡迪奥与庇拉尔·特尔内拉的儿子阿尔卡蒂奥（继承何塞·阿尔卡迪奥的名字）出生后被接到家中，与阿玛兰妲一起被一个名叫比西塔西翁的瓜希拉印第安女人照料，比西塔西翁和兄弟为逃避部落中肆虐多年的失眠症来到这里，为之后整个马孔多的人都染上失眠症埋下伏笔。又为之后的吉卜赛人梅尔吉亚德斯死后的出现并给全村的人治疗失眠症做了铺垫。</p><p>​       之后，家中来了一个名叫丽贝卡的不速之客，据介绍这个孩子算是乌尔苏拉的表妹，是她居住在马纳乌雷最难忘的挚友尼卡诺尔·乌略亚和丽贝卡·蒙铁尔的女儿，但乌尔苏拉和丈夫却根本不记得这个亲戚。</p><blockquote><p>2019-6-23 8:52</p><p>现在脑子好空，不知道再写点啥了。。。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感受 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象分析与设计</title>
      <link href="/2019/06/19/OOA-D/"/>
      <url>/2019/06/19/OOA-D/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-面向对象方法概论"><a href="#第一章-面向对象方法概论" class="headerlink" title="第一章 面向对象方法概论"></a>第一章 面向对象方法概论</h3><ol><li><p>面向对象的基本原则及优点  p6  p8</p></li><li><p>封装的目的？在面向对象中如何实现封装的目的？p6</p></li><li><p>UML  p12</p></li></ol><h3 id="第二章-什么是面向对象分析"><a href="#第二章-什么是面向对象分析" class="headerlink" title="第二章 什么是面向对象分析"></a>第二章 什么是面向对象分析</h3><ol><li><p>OOA的模型（p19）、基本任务（p16）和过程（p20）</p></li><li><p>问题域和系统责任的关系（p16）</p></li></ol><h3 id="第三章-建立需求模型——用况图"><a href="#第三章-建立需求模型——用况图" class="headerlink" title="第三章 建立需求模型——用况图"></a>第三章 建立需求模型——用况图</h3><ol><li><p>用况之间的三大关系：包含、扩展、继承（p28）</p></li><li><p>用况图在面向对象分析法中的地位（p36）</p></li><li><p>自动售货机，建立用况图（p36）</p></li></ol><h3 id="第四章-建立基本模型——类图"><a href="#第四章-建立基本模型——类图" class="headerlink" title="第四章 建立基本模型——类图"></a>第四章 建立基本模型——类图</h3><ol><li><p>对象与类以及属性（p44）的基本概念（p37）</p></li><li><p>关联与链之间的关系（p58）</p></li><li><p>关系：继承 关联 聚合 依赖（p49）</p></li><li><p>p73 第6 10 16 17题</p></li><li><p>会画类图</p></li></ol><h3 id="第五章-建立辅助模型"><a href="#第五章-建立辅助模型" class="headerlink" title="第五章 建立辅助模型"></a>第五章 建立辅助模型</h3><ol><li><p>顺序图、通信图、活动图、状态机图、包图；</p><p>顺序图、通信图、活动图、状态机图用于描述系统的行为；包图用于组织系统的模型。</p></li><li><p>顺序图和通信图比较重要（图5-1 p76和图5-3  p78 和图5-9  p81）</p></li><li><p>什么时候要建立顺序图？（p83）</p></li><li><p>活动图 泳道  P88 图5-19</p></li><li><p>ATM取款顺序图和简易电梯状态机图 （p102）9,10</p></li><li><p>开发小程序的过程，建立活动图（p102）18</p></li></ol><p>p96 图5-27简易微波炉的状态机图 （4月16号强调的考试题） 5-28组合状态图（状态圆角、事件、箭头）</p><h3 id="第六章-什么是面向对象设计"><a href="#第六章-什么是面向对象设计" class="headerlink" title="第六章 什么是面向对象设计"></a>第六章 什么是面向对象设计</h3><p>1.OOA和OOD的基本概念及关系（p104）</p><h3 id="第七章-问题域部分的设计"><a href="#第七章-问题域部分的设计" class="headerlink" title="第七章 问题域部分的设计"></a>第七章 问题域部分的设计</h3><p>1.三元关系改二元关系（p114）</p><p>2.P111 图7-4</p><h3 id="第八章-人机交互部分的设计"><a href="#第八章-人机交互部分的设计" class="headerlink" title="第八章 人机交互部分的设计"></a>第八章 人机交互部分的设计</h3><p>1.人机交互的准则（5月7号强调必考）（p130）</p><h3 id="第九章-控制驱动部分的设计"><a href="#第九章-控制驱动部分的设计" class="headerlink" title="第九章 控制驱动部分的设计"></a>第九章 控制驱动部分的设计</h3><p>1.控制驱动部分的基本概念（p132）</p><p>2.顺序图对控制流之间的交互进行建模（p137）</p><p>3.如何协调控制流（p138）</p><h3 id="第十章-数据管理部分的设计"><a href="#第十章-数据管理部分的设计" class="headerlink" title="第十章 数据管理部分的设计"></a>第十章 数据管理部分的设计</h3><p>1.关系数据库（p142）</p><p>2.面向对象数据库（p142）</p><h3 id="第十一章-构件及部署部分的设计"><a href="#第十一章-构件及部署部分的设计" class="headerlink" title="第十一章 构件及部署部分的设计"></a>第十一章 构件及部署部分的设计</h3><ol><li><p>构件 （p150）</p></li><li><p>端口（p152）</p></li><li><p>供需接口（p151）</p></li><li><p>节点（p159）</p></li><li><p>端口–构件的区别</p></li><li><p>设计模式（p164）</p></li><li><p>敏捷开发  scrum骨架</p><h3 id="其中七个图四个关系，老师您强调过几次"><a href="#其中七个图四个关系，老师您强调过几次" class="headerlink" title="其中七个图四个关系，老师您强调过几次"></a>其中七个图四个关系，老师您强调过几次</h3><p>用况图、类图、顺序图、通信图、活动图、状态机图、包图；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Review </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毛泽东思想和中国特色社会主义理论体系概论</title>
      <link href="/2019/06/17/mao-gai/"/>
      <url>/2019/06/17/mao-gai/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="主题篇"><a href="#主题篇" class="headerlink" title="主题篇"></a>主题篇</h2><ul><li><strong>毛泽东思想</strong>：中国革命和社会主义初期建设</li><li><strong>邓小平理论</strong>：什么是社会主义？怎样建设社会主义？</li><li><strong>三个代表重要思想</strong>：建设一个什么样的党？怎样建设党？</li><li><strong>科学发展观</strong>：要实现什么样的发展？怎样发展？</li><li><strong>习近平新时代中国特色社会主义思想</strong>：坚持和发展什么样的中国特色社会主义？怎样坚持和发展中国特色社会主义？</li></ul><h2 id="历史地位篇"><a href="#历史地位篇" class="headerlink" title="历史地位篇"></a>历史地位篇</h2><ul><li><strong>毛泽东思想</strong><ol><li>马克思主义中国化的第一个重大理论成果；</li><li>中国革命和建设的科学指南；</li><li>中国共产党和中国人民宝贵的精神财富；</li></ol></li><li><strong>邓小平理论</strong><ol><li>马克思列宁主义、毛泽东思想的继承和发展；</li><li>中国特色社会主义理论体系的开篇之作；</li><li>改革开放和社会主义现代化建设的科学指南；</li></ol></li><li><strong>三个代表重要思想</strong><ol><li>中国特色社会主义理论体系的接续发展；</li><li>加强和改进党的建设，推进中国特色社会主义事业的强大理论武器；</li></ol></li><li><strong>科学发展观</strong><ol><li>中国特色社会主义理论体系的接续发展；</li><li>发展中国特色社会主义必须长期坚持的指导思想；</li></ol></li><li><strong>习近平新时代中国特色社会主义思想</strong><ol><li>马克思主义中国化的最新成果；</li><li>新时代的精神旗帜；</li><li>实现中华民族伟大复兴的行动指南；</li></ol></li></ul><h2 id="路线篇"><a href="#路线篇" class="headerlink" title="路线篇"></a>路线篇</h2><ol><li><p>新民主主义革命的总路线：</p><p>​    无产阶级领导的，人民大众的，反对帝国主义，封建主义和官僚资本主义的革命；</p></li><li><p>过渡时期（社会主义改造理论）的总路线：<strong>一化三改</strong></p><p><u>    社会主义工业化</u>，<u>对个体农业、手工业和资本主义工商业的社会主义改造；</u></p></li><li><p>党的基本路线：</p><p>​    领导和团结各族人民，以经济建设为中心，坚持四项基本原则，坚持改革开放，为把我国建设成为富强、民主、文明的社会主义现代化国家而奋斗。（和谐、美丽的社会主义现代化强国）</p></li></ol><h2 id="一带一路"><a href="#一带一路" class="headerlink" title="一带一路"></a>一带一路</h2><p>​    “一带一路”建设对推动构建人类命运共同体具有重要的意义和作用。党的十九大提出要以“一带一路”建设为重点，坚持引进来和走出去并重，遵循共商共建共享原则，加强创新能力开放合作，形成陆海内外联动、东西双向互济经济的开放格局。一是要坚持引进来和走出去并重，深化双向投资合作。二是坚持共商共建共享原则。三十加强创新能力开放合作，主要是加强技术创新合作、理论创新交流互鉴、创新人才资源交流合作。四是把“一带一路”与构建人类命运共同体更加紧密结合起来，与落实2030年可持续发展议程紧密结合起来，打造国际合作新平台，增添共同发展新动力，把“一带一路”建成和平之路、繁荣之路、开放之路、创新之路、文明之路。</p><h2 id="主要矛盾的变化"><a href="#主要矛盾的变化" class="headerlink" title="主要矛盾的变化"></a>主要矛盾的变化</h2><ol><li>随着土地改革的基本完成，<u>无产阶级和资产阶级的矛盾</u>逐步成为国内的主要矛盾，而解决这一矛盾必然使中国社会实现向社会主义的转变。</li><li>历史主要矛盾：人民日益增长的物质文化需要同落后的社会生产之间的矛盾；</li><li>现在主要矛盾：人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾；</li></ol><h2 id="新发展理念"><a href="#新发展理念" class="headerlink" title="新发展理念"></a>新发展理念</h2><p><strong>创新、协调、绿色、开放、共享</strong></p><h1 id="第一部分-旗帜举起来"><a href="#第一部分-旗帜举起来" class="headerlink" title="第一部分 旗帜举起来"></a>第一部分 旗帜举起来</h1><h2 id="专题一-马克思主义中国化"><a href="#专题一-马克思主义中国化" class="headerlink" title="专题一 马克思主义中国化"></a>专题一 马克思主义中国化</h2><h3 id="1-提出："><a href="#1-提出：" class="headerlink" title="1.提出："></a>1.提出：</h3><p>​    1938年10月,在中共六届六中全会上,毛泽东在《论新阶段》的报告中,第一次<strong>提出</strong>了“马克思主义中国化”的任务。</p><h3 id="2-科学内涵"><a href="#2-科学内涵" class="headerlink" title="2.科学内涵"></a>2.科学内涵</h3><p>马克思主义中国化的<strong>科学内涵</strong>包括以下三个方面：</p><p>​    第一，马克思主义中国化是马克思主义在指导中国革命、建设和改革的实践中实现具体化；</p><p>​    第二，马克思主义中国化是把中国革命、建设和改革的实践经验和历史经验上升为马克思主义理论；</p><p>​    第三，马克思主义中国化是把马克思主义植根于中国的优秀文化之中。</p><h3 id="3-两大理论成果"><a href="#3-两大理论成果" class="headerlink" title="3.两大理论成果"></a>3.两大理论成果</h3><p>毛泽东思想和中国特色社会主义理论体系</p><p>两者的关系：一脉相承，与时俱进。</p><h2 id="专题二-毛泽东思想"><a href="#专题二-毛泽东思想" class="headerlink" title="专题二 毛泽东思想"></a>专题二 毛泽东思想</h2><h3 id="1-形成过程"><a href="#1-形成过程" class="headerlink" title="1.形成过程"></a>1.形成过程</h3><ul><li>毛泽东在著作中提出并阐述了农村包围城市、武装夺取政权的思想，标志着毛泽东思想的<strong>初步形成</strong>；</li><li>新民主主义革命理论的系统阐述，标志着毛泽东思想<strong>趋于成熟</strong>。</li><li>1945年，党的七大将毛泽东思想<strong>写入党章</strong>，确立为党必须长期坚持的指导思想（刘少奇），</li></ul><h3 id="2-围绕主题"><a href="#2-围绕主题" class="headerlink" title="2.围绕主题"></a>2.围绕主题</h3><p>​    中国革命和社会主义初期建设</p><p>拓展：</p><p>​    <strong>邓小平理论</strong>围绕主题：什么是社会主义？怎样建设社会主义？</p><p>​    <strong>三个代表重要思想</strong>围绕主题：建设一个什么样的党？怎样建设党？</p><p>​    <strong>科学发展观</strong>主题：要实现什么样的发展？怎样发展？</p><p>​    <strong>习近平新时代中国特色社会主义思想</strong>围绕的主题：坚持和发展什么样的中国特色社会主义？怎样坚持和发展中国特色社会主义？</p><h3 id="3-主要内容"><a href="#3-主要内容" class="headerlink" title="3.主要内容"></a>3.主要内容</h3><ol><li>新民主主义革命理论</li><li>社会主义革命和社会主义建设理论</li><li>革命军队建设和军事战略的理论</li><li>政策和策略的理论</li><li>思想政治工作和文化工作的理论</li><li>党的建设理论</li><li>毛泽东的哲学思想</li></ol><h3 id="4-活的灵魂"><a href="#4-活的灵魂" class="headerlink" title="4.活的灵魂"></a>4.活的灵魂</h3><p>​    <strong>实事求是、群众路线、独立自主。</strong></p><p>​    实事求是：一切从实际出发，理论联系实际，坚持在实践中检验真理和发展真理。</p><p>​    群众路线：一切为了群众，一切依靠群众，从群众中来，到群众中去，把党的正确主张变成群众的自觉行动。</p><p>​    独立自主：坚持独立思考，走自己的路，就是坚定不移地维护民族独立、捍卫国家主权，把立足点放在依靠自己力量的基础上，同时积极争取外援，开展国际经济文化交流，学习外国一切对我们有益的先进事物。</p><h3 id="5-改革开放和独立自主的联系"><a href="#5-改革开放和独立自主的联系" class="headerlink" title="5.改革开放和独立自主的联系"></a>5.改革开放和独立自主的联系</h3><p>根本上：就是在独立自主的前提下进行对外开放。<br>一、 独立自主是立国之基。<br>二、 改革开放是强国之道，是我国长期坚持的基本国策。在对外开放上，<br>主导权必须在我。<br>三、 独立自主是对外开放的前提和基础，而对外开放主力提升自主发展的<br>能力。两者是相辅相成，相得益彰，相互促进的。</p><h3 id="6-历史地位"><a href="#6-历史地位" class="headerlink" title="6.历史地位"></a>6.历史地位</h3><ol><li>马克思主义中国化的第一个重大理论成果</li><li>中国革命和建设的科学指南</li><li>中国共产党和中国人民宝贵的精神财富</li></ol><h1 id="第二部分-中国人民站起来"><a href="#第二部分-中国人民站起来" class="headerlink" title="第二部分 中国人民站起来"></a>第二部分 中国人民站起来</h1><h2 id="专题三-新民主主义革命理论"><a href="#专题三-新民主主义革命理论" class="headerlink" title="专题三 新民主主义革命理论"></a>专题三 新民主主义革命理论</h2><h3 id="0-新民主主义革命"><a href="#0-新民主主义革命" class="headerlink" title="0.新民主主义革命"></a>0.新民主主义革命</h3><p>​    新民主主义革命：指从 1919 年五四运动到 1949 年中华人民共和国成立为止的一段时间内，由中国共产党领导的，针对帝（帝国主义）、官（官僚资本主义）、封（封建主义）（也就是俗称的“三座大山”）的资产阶级民主革命。</p><h3 id="1-近代中国社会为什么要进行革命？"><a href="#1-近代中国社会为什么要进行革命？" class="headerlink" title="1.近代中国社会为什么要进行革命？"></a>1.近代中国社会为什么要进行革命？</h3><p>​    因为中国当时的国情处于“半殖民地半封建社会”，蕴含着特殊的社会矛盾和革命要求。</p><h3 id="2-近代中国的国情"><a href="#2-近代中国的国情" class="headerlink" title="2.近代中国的国情"></a>2.近代中国的国情</h3><p>​    <strong>半殖民地半封建社会</strong></p><p>​    半殖民地表示的是国际地位，另一面指半独立。</p><p>​    半封建指的是国内情况，另一面指半资本主义。</p><p>​    近代中国基本国情的一二三四五，就是：一大危险，亡国灭种；一大主题，救亡图存；两对主要矛盾，帝国主义和中华民族的矛盾、封建主义和人民大众的矛盾；两大敌人，帝国主义和封建主义；中国革命的双重属性，民族革命与民主革命；中国革命的两大任务，反帝、反封建；三座大山，帝国主义、封建主义、官僚资本主义；四根绳索，政权、族权、神权、夫权；五场战争，鸦片战争、第二次鸦片战争、中法战争、中日甲午战争、八国联军侵华战争。</p><h3 id="3-新民主主义新在何处？"><a href="#3-新民主主义新在何处？" class="headerlink" title="3.新民主主义新在何处？"></a>3.新民主主义新在何处？</h3><ol><li>第一，新民主主义革命处于世界无产阶级社会主义革命的时代，是世界无产阶级社会主义革命的一部分；（<strong>时代不同</strong>）</li><li>第二，新民主主义革命的领导力量是中国无产阶级及其先锋队——中国共产党；（<strong>领导阶级不同</strong>）（区别新旧两类革命的最根本标志）</li><li>第三，新民主主义革命的指导思想是马克思列宁主义；（<strong>指导思想不同</strong>）</li><li>第四，新民主主义革命的前途是社会主义而不是资本主义。</li></ol><h3 id="4-新民主主义革命的总路线和基本纲领：P24、P31"><a href="#4-新民主主义革命的总路线和基本纲领：P24、P31" class="headerlink" title="4.新民主主义革命的总路线和基本纲领：P24、P31"></a>4.新民主主义革命的总路线和基本纲领：P24、P31</h3><p>​    <strong>总路线</strong>：无产阶级领导的，人民大众的，反对帝国主义、封建主义和官僚资本主义的革命。</p><p>​    基本纲领：新民主主义的基本纲领是新民主主义革命总路线得进一步展开和体现，为新民主主义革命指明了奋斗目标。</p><p>​    新民主主义的<strong>政治纲领</strong>是推翻帝国主义和封建主义的统治，建立一个无产阶级领导的以工农联盟为基础的各革命阶级联合专政的新民主主义的共和国。</p><p>​        新民主主义的<strong>经济纲领</strong>是没收封建地主阶级的土地归农民所有，没收官僚资产阶级的垄断资本归新民主主义的国家所有，保护民族工商业。</p><p>​        新民主主义的<strong>文化纲领</strong>是无产阶级领导的人民大众的、反帝反封建的文化，即民族的、科学的、大众的文化。</p><h3 id="5-区分新旧两种不同范畴的民主主义革命的根本标志：p28"><a href="#5-区分新旧两种不同范畴的民主主义革命的根本标志：p28" class="headerlink" title="5.区分新旧两种不同范畴的民主主义革命的根本标志：p28"></a>5.区分新旧两种不同范畴的民主主义革命的根本标志：p28</h3><p>​    革命的领导权是掌握在无产阶级（新）手中还是掌握在资产阶级（旧）手中。</p><h3 id="6-动力？领导力量？敌人？p25-26-27"><a href="#6-动力？领导力量？敌人？p25-26-27" class="headerlink" title="6.动力？领导力量？敌人？p25 26 27"></a>6.动力？领导力量？敌人？p25 26 27</h3><ol><li>动力：新民主主义的革命的动力包括无产阶级、农民阶级、城市小资产阶级和民族资产阶级。</li><li>领导力量：中国无产阶级及其政党。</li><li>敌人：帝国主义、封建主义、官僚资本主义</li></ol><h3 id="7-革命道路、三大法宝-p34-36"><a href="#7-革命道路、三大法宝-p34-36" class="headerlink" title="7.革命道路、三大法宝  p34 36"></a>7.革命道路、三大法宝  p34 36</h3><p>​    革命道路：农村包围城市、武装夺取政权</p><p>​    三大法宝：统一战线、武装斗争、党的建设</p><h3 id="8-革命意义：p41"><a href="#8-革命意义：p41" class="headerlink" title="8.革命意义：p41"></a>8.革命意义：p41</h3><ol><li>中国新民主主义革命的胜利，结束了帝国主义、封建主义和官僚资本主义在中国的统治，建立了人民民主专政的新中国。</li><li>中国新民主主义革命的胜利，对世界历史的发展也发生了巨大的影响。</li><li>中国革命的胜利，是马克思列宁主义、毛泽东思想的胜利。</li></ol><h3 id="9-新民主主义国家的国体和政体：P31"><a href="#9-新民主主义国家的国体和政体：P31" class="headerlink" title="9.新民主主义国家的国体和政体：P31"></a>9.新民主主义国家的国体和政体：P31</h3><p>​    国体：各革命阶层联合专政</p><p>​    政体：民主集中制的人民代表大会制度</p><h3 id="10-两头小、中间大指的是？"><a href="#10-两头小、中间大指的是？" class="headerlink" title="10.两头小、中间大指的是？"></a>10.两头小、中间大指的是？</h3><p>​    “两头小”指工人阶级和官僚资产阶级。</p><p>​    “中间大”指农民阶级、小资产阶级、民族资产阶级。</p><h3 id="11-建设社会主义社会的两个步骤："><a href="#11-建设社会主义社会的两个步骤：" class="headerlink" title="11.建设社会主义社会的两个步骤："></a>11.建设社会主义社会的两个步骤：</h3><ol><li>新民主主义革命—-&gt;新民主主义社会</li><li>社会主义革命（三大改造） —-&gt;社会主义社会</li></ol><h2 id="专题四-社会主义改造理论"><a href="#专题四-社会主义改造理论" class="headerlink" title="专题四 社会主义改造理论"></a>专题四 社会主义改造理论</h2><h3 id="1-新民主主义社会是一个过渡性的社会"><a href="#1-新民主主义社会是一个过渡性的社会" class="headerlink" title="1.新民主主义社会是一个过渡性的社会"></a>1.新民主主义社会是一个过渡性的社会</h3><p>​    新民主主义社会的五种经济成分：社会主义性质的国营经济；半社会主义性质的合作社经济；农民和手工业者的个人经济；私人资本主义经济；国家资本主义经济</p><p>​    主要的三种经济成分：社会主义经济、个体经济和资本主义经济。</p><p>​    经济基础决定社会性质。</p><h3 id="2-矛盾"><a href="#2-矛盾" class="headerlink" title="2. 矛盾"></a>2. 矛盾</h3><p>​    社会主义和资本主义两条道路、工人阶级和资产阶级两个阶级的矛盾。</p><p>​    随着土地改革的基本完成，无产阶级和资产阶级的矛盾逐步成为国内的主要矛盾，而解决这一矛盾必然使中国社会实现向社会主义的转变。</p><h3 id="3-过渡时期的总路线"><a href="#3-过渡时期的总路线" class="headerlink" title="3.过渡时期的总路线"></a>3.过渡时期的总路线</h3><p>​    主要内容：<strong>一化三改</strong></p><p>​    一化：社会主义工业化</p><p>​    三改：对个体农业、手工业和资本主义工商业的社会主义改造。</p><p>​    其中一化是主体，三改是两翼。</p><p>​    这是一条社会主义建设和社会主义改造并举的路线</p><h3 id="4-1956年中国进入社会主义社会"><a href="#4-1956年中国进入社会主义社会" class="headerlink" title="4.1956年中国进入社会主义社会"></a>4.1956年中国进入社会主义社会</h3><h3 id="5-社会主义基本制度的确立及其理论依据："><a href="#5-社会主义基本制度的确立及其理论依据：" class="headerlink" title="5.社会主义基本制度的确立及其理论依据："></a>5.社会主义基本制度的确立及其理论依据：</h3><p>​    农业、手工业和资本主义工商业的社会主义改造的基本完成</p><h2 id="专题五-社会主义建设道路初步探索理论"><a href="#专题五-社会主义建设道路初步探索理论" class="headerlink" title="专题五 社会主义建设道路初步探索理论"></a>专题五 社会主义建设道路初步探索理论</h2><h3 id="1-时间：1956-1966"><a href="#1-时间：1956-1966" class="headerlink" title="1.时间：1956-1966"></a>1.时间：1956-1966</h3><p>​    1949-1956：新民主主义社会时期</p><p>​    1966-1976：十年文革</p><h3 id="2-初步探索的重要理论成果"><a href="#2-初步探索的重要理论成果" class="headerlink" title="2.初步探索的重要理论成果"></a>2.初步探索的重要理论成果</h3><p>​    1. 调动一切积极因素为社会主义事业服务（论十大关系）</p><p>​        2. 正确认识和处理社会主义社会矛盾的思想（关于正确处理人民内部矛盾的问题）</p><h3 id="3-初步探索的意义和经验教训"><a href="#3-初步探索的意义和经验教训" class="headerlink" title="3.初步探索的意义和经验教训"></a>3.初步探索的意义和经验教训</h3><ol><li>意义：<ul><li>第一，巩固和发展了我国的社会主义制度</li><li>第二，为开创中国特色社会主义提供了宝贵经验、理论准备、物质基础</li><li>第三，丰富了科学社会主义的理论和实践</li></ul></li><li>经验教训<ul><li>第一，必须把马克思主义与中国实际相结合，探索符合中国特点的社会主义道路；</li><li>第二，必须正确认识社会主义的主要矛盾和根本任务，集中发展生产力；</li><li>第三，必须从实际出发进行社会主义建设，建设规模和速度要和国力相适应，不能急于求成；</li><li>第四，必须发展社会主义民主，健全社会主义法制；</li><li>第五，必须坚持党的民主集中制和集体领导制度，加强执政党的建设；</li><li>第六，必须坚持对外开放，借鉴和吸收人类文明成果建设社会主义，不能关起门来搞建设。</li></ul></li></ol><h3 id="4-论十大关系"><a href="#4-论十大关系" class="headerlink" title="4.论十大关系"></a>4.论十大关系</h3><ol><li>重工业和轻工业、农业的关系；</li><li>沿海工业和内地工业的关系；</li><li>经济建设和国防建设的关系；</li><li>国家、生产单位和生产者个人的关系；</li><li>中央和地方的关系；</li><li>汉族与少数民族的关系；</li><li>党与非党的关系；</li><li>革命和反革命的关系；</li><li>是非关系；</li><li>中国和外国的关系。</li></ol><h1 id="第三部分-中国人民富起来"><a href="#第三部分-中国人民富起来" class="headerlink" title="第三部分 中国人民富起来"></a>第三部分 中国人民富起来</h1><h2 id="专题六-邓小平理论"><a href="#专题六-邓小平理论" class="headerlink" title="专题六  邓小平理论"></a>专题六  邓小平理论</h2><p> 力挽狂澜——开辟中国特色社会主义新道路</p><h3 id="1-主题"><a href="#1-主题" class="headerlink" title="1.主题"></a>1.主题</h3><p>​    <strong>什么是社会主义？</strong>  社会主义本质论（p95）见4.</p><p>​    <strong>怎么建设社会主义？</strong>  社会主义初级阶段论（1987年十三大）思想路线，三步走战略，改革开放，一国两制。</p><h3 id="2-形成过程"><a href="#2-形成过程" class="headerlink" title="2.形成过程"></a>2.形成过程</h3><ol><li><p>1978年12月党的十一届三中全会，确立了<u>解放思想，实事求是</u>的<strong>思想路线</strong>；</p><p>工作重心由以阶级斗争为纲转移到以经济建设为中心</p></li><li><p>1987年党的十三大第一次比较系统地论述了<strong>社会主义初级阶段理论</strong>，邓小平理论<strong>轮廓形成时期</strong>；</p></li><li><p>1992年南方谈话，邓小平理论逐步走向<strong>成熟</strong>；</p></li><li><p>1992年十四大报告系统阐述了邓小平理论的历史地位和指导意义。</p></li><li><p>1997年党的十五大<strong>正式提出</strong>邓小平理论这一概念，并将邓小平理论同马克思列宁主义、毛泽东思想一起确立为党的指导思想，并<strong>写入党章</strong>；</p></li><li><p>1999年，邓小平理论<strong>载入宪法</strong>；</p></li></ol><h3 id="3-一个中心，两个基本点"><a href="#3-一个中心，两个基本点" class="headerlink" title="3.一个中心，两个基本点"></a>3.一个中心，两个基本点</h3><p>（社会主义初级阶段论提出）</p><p>​    一个中心：以经济建设为中心；</p><p>​    两个基本点：坚持四项基本原则、坚持改革开放</p><h3 id="4-社会主义本质"><a href="#4-社会主义本质" class="headerlink" title="4.社会主义本质"></a>4.社会主义本质</h3><p>​    <strong>社会主义的本质是，解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕</strong></p><h3 id="5-邓小平理论的主要内容"><a href="#5-邓小平理论的主要内容" class="headerlink" title="5.邓小平理论的主要内容"></a>5.邓小平理论的主要内容</h3><ol><li><p>解放思想、实事求是的思想路线；</p></li><li><p>社会主义初级阶段理论；</p><p>（十三大 1987年）见6.</p><p><strong>社会主义初级阶段理论是建设中国特色社会主义的总依据</strong></p></li><li><p>党的基本路线；</p></li><li><p>社会主义根本任务理论；</p></li><li><p>“三步走”战略；</p></li><li><p>改革开放理论；</p></li><li><p>社会主义市场经济理论；</p></li><li><p>“两手抓，两手都要硬”；</p></li><li><p>“一国两制”；</p></li><li><p>中国问题的关键在于党</p></li></ol><h3 id="6-社会主义初级阶段理论"><a href="#6-社会主义初级阶段理论" class="headerlink" title="6.社会主义初级阶段理论"></a>6.社会主义初级阶段理论</h3><ol><li>提出时间：1987年十三大，邓小平</li><li>主要内容：社会主义初级阶段是指，我国在生产力落后、商品经济不发达条件下建设社会主义必然要经历的特定阶段，即从我国进入社会主义到基本实现社会主义现代化的整个历史阶段。（<strong>长期性、复杂性、艰巨性</strong>）</li><li>两层含义：<ul><li>我国已经进入社会主义，必须坚持而不能离开社会主义。</li><li>我国的社会主义社会还处在不发达的阶段，必须正视而不能超越初级阶段。</li></ul></li><li>意义：<u>社会主义初级阶段理论是建设中国特色社会主义的总依据</u></li></ol><h3 id="7-党的基本路线"><a href="#7-党的基本路线" class="headerlink" title="7.党的基本路线"></a>7.党的基本路线</h3><p>​    <u>领导和团结全国各族人民，<strong>以经济建设为中心，坚持四项基本原则，坚持改革开放</strong>，自力更生，艰苦创业，为把我国建设成为富强、民主、文明的社会主义现代化国家而奋斗。</u>   （和谐、美丽的现代化强国）</p><h3 id="8-三步走战略"><a href="#8-三步走战略" class="headerlink" title="8.三步走战略"></a>8.三步走战略</h3><ol><li>第一步，从1981年到1990年实现国民生产总值比1980年翻一番，解决人民的温饱问题；</li><li>第二步，从1991年到20世纪末，使国民生产总值再翻一番，达到小康水平；</li><li>第三步，到21世纪中叶，国民生产总值再翻两番，达到中等发达国家水平，基本实现现代化。</li></ol><h3 id="9-改革开放理论"><a href="#9-改革开放理论" class="headerlink" title="9.改革开放理论"></a>9.改革开放理论</h3><p>​    <strong>改革开放是中国的第二次革命。</strong></p><p>​    中国共产党领导的第一次革命，把一个半殖民地半封建的旧中国变成了一个社会主义新中国；</p><p>​    中国共产党领导的第二次革命，把一个经济文化比较落后的社会主义中国变成一个现代化的社会主义国家。</p><h3 id="10-一国两制"><a href="#10-一国两制" class="headerlink" title="10.一国两制"></a>10.一国两制</h3><p>​    主要内容：<strong>坚持一个中国</strong>，这是“和平统一，一国两制”的<strong>核心</strong>，是发展两岸关系和实现和平统一的<strong>基础</strong>；<strong>两制并存</strong>，在祖国统一的<strong>前提</strong>下，国家主体部分实行社会主义制度，同时在台湾、香港、澳门保持原有的社会制度和生活方式长期不变；<strong>高度自治</strong>，祖国完全统一后，台湾、香港、澳门作为特别行政区，享有不同于中国其他省、市、自治区的高度自治权，台湾、香港、澳门同胞各种合法权益将得到切实尊重和维护；<strong>尽最大努力争取和平统一</strong>，但不承诺放弃使用武力；<strong>解决台湾问题</strong>，实现祖国完全统一，寄希望于台湾人民。</p><h3 id="11-邓小平理论的历史地位"><a href="#11-邓小平理论的历史地位" class="headerlink" title="11.邓小平理论的历史地位"></a>11.邓小平理论的历史地位</h3><ol><li>马克思列宁主义、毛泽东思想的继承和发展；</li><li>中国特色社会主义理论体系的开篇之作；</li><li>改革开放和社会主义现代化建设的科学指南；</li></ol><h2 id="专题七-三个代表重要思想"><a href="#专题七-三个代表重要思想" class="headerlink" title="专题七  三个代表重要思想"></a>专题七  三个代表重要思想</h2><p>披荆斩棘——拓宽中国特色社会主义新道路（江泽民）</p><h3 id="1-主题-1"><a href="#1-主题-1" class="headerlink" title="1.主题"></a>1.主题</h3><p>​    建设一个什么样的党？怎样建设党？</p><h3 id="2-形成过程-1"><a href="#2-形成过程-1" class="headerlink" title="2.形成过程"></a>2.形成过程</h3><ol><li>十五大（1997）之后，江泽民考察工作中<strong>提出</strong>三个代表重要思想；</li><li>十六大（2002），<strong>写入党章</strong>。</li></ol><h3 id="3-核心观点"><a href="#3-核心观点" class="headerlink" title="3.核心观点"></a>3.核心观点</h3><ol><li>始终代表中国先进生产力的发展要求（<strong>前提和基础</strong>）</li><li>始终代表中国先进文化的前进方向（<strong>致力支持，反作用</strong>）</li><li>始终代表中国最广大人民的根本利益（<strong>最终的落脚点</strong>）</li></ol><h3 id="4-主要内容"><a href="#4-主要内容" class="headerlink" title="4.主要内容"></a>4.主要内容</h3><ol><li><p>发展是党执政兴国的第一要务</p></li><li><p>建立社会主义市场经济体制     1992年（十四大）</p><p>建立社会主义市场经济体制，必须坚持和完善公有制为主体、多种所有制经济共同发展的社会主义基本制度。</p></li><li><p>全面建设小康社会</p></li><li><p>建设社会主义政治文明</p></li><li><p>推进党的建设新的伟大工程</p></li></ol><h3 id="5-历史地位"><a href="#5-历史地位" class="headerlink" title="5.历史地位"></a>5.历史地位</h3><ol><li>中国特色社会主义理论体系的接续发展。</li><li>加强和改进党的建设，推进中国特色社会主义事业的强大理论武器。</li></ol><h2 id="专题八-科学发展观"><a href="#专题八-科学发展观" class="headerlink" title="专题八  科学发展观"></a>专题八  科学发展观</h2><p>科学转型——发展中国特色社会主义新道路（胡锦涛）</p><h3 id="1-主题-2"><a href="#1-主题-2" class="headerlink" title="1.主题"></a>1.主题</h3><p>​    要实现什么样的发展？怎么发展？</p><h3 id="2-科学内涵-1"><a href="#2-科学内涵-1" class="headerlink" title="2.科学内涵"></a>2.科学内涵</h3><p>​    <strong>第一要义</strong>   是发展，</p><p>​    <strong>核心立场</strong>   是以人为本，</p><p>​    <strong>基本要求</strong>   是全面协调可持续，</p><p>​    <strong>根本方法</strong>   是统筹兼顾。</p><h3 id="3-形成过程"><a href="#3-形成过程" class="headerlink" title="3.形成过程"></a>3.形成过程</h3><ol><li>2003年党的十六届三中全会第一次<strong>提出</strong>；</li><li>2004年，科学发展观<strong>形成</strong>；</li><li>2007年十七大<strong>写入党章</strong>，成为党必须长期坚持的指导思想；</li></ol><h3 id="4-精神实质"><a href="#4-精神实质" class="headerlink" title="4.精神实质"></a>4.精神实质</h3><p>​    解放思想、实事求是、与时俱进、求真务实，是科学发展观最鲜明的精神实质。</p><h3 id="5-历史地位-1"><a href="#5-历史地位-1" class="headerlink" title="5.历史地位"></a>5.历史地位</h3><ol><li>中国特色社会主义理论体系的接续发展；</li><li>发展中国特色社会主义必须长期坚持的指导思想；</li></ol><h1 id="第四部分-中国人民强起来"><a href="#第四部分-中国人民强起来" class="headerlink" title="第四部分  中国人民强起来"></a>第四部分  中国人民强起来</h1><h2 id="专题九-中国特色社会主义新时代"><a href="#专题九-中国特色社会主义新时代" class="headerlink" title="专题九     中国特色社会主义新时代"></a>专题九     中国特色社会主义新时代</h2><p>​    进入新时代：党的十八大（2012年10月18日-24日）习近平</p><h3 id="1-主题-3"><a href="#1-主题-3" class="headerlink" title="1.主题"></a>1.主题</h3><p>​    坚持和发展什么样的中国特色社会主义？</p><p>​    怎样坚持和发展中国特色社会主义？</p><h3 id="2-社会矛盾的变化"><a href="#2-社会矛盾的变化" class="headerlink" title="2.社会矛盾的变化"></a>2.社会矛盾的变化</h3><p>​    历史主要矛盾：人民日益增长的物质文化需要同落后的社会生产之间的矛盾；</p><p>​    现在主要矛盾：人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾；</p><p>​    我国仍处于并将长期处于社会主义初级阶段的<strong>基本国情</strong>，我国是世界最大发展中国家的<strong>国际地位</strong>没有变。</p><h3 id="3-新时代的内涵和意义"><a href="#3-新时代的内涵和意义" class="headerlink" title="3.新时代的内涵和意义"></a>3.新时代的内涵和意义</h3><p><strong>内涵：</strong></p><ol><li>这个新时代是承前启后、继往开来，在新的历史条件下继续夺取中国特色社会主义伟大胜利的时代；</li><li>这个新时代是决胜全面建成小康社会、进而全面建设社会主义现代化强国的时代；</li><li>这个新时代是全国各族人民团结奋斗、不断创造美好生活、逐步实现全体人民共同富裕的时代；</li><li>这个新时代是全体中国中华儿女勠力同心、奋力实现中华民族伟大复兴中国梦的时代；</li><li>这个新时代是我国日益走近世界舞台中央、不断为人类做出更大贡献的时代；</li></ol><p><strong>意义：</strong></p><ol><li>第一，从中华民族复兴的历史进程看，中国特色社会主义进入新时代，意味着近代以来久经磨难的中华民族迎来了从站起来、富起来到强起来的伟大飞跃，迎来了实现中华民族伟大复兴的光明前景；</li><li>第二，从科学社会主义发展进程看，中国特色社会主义进入新时代，意味着科学社会主义在21世纪的中国焕发出强大生机活力，在世界上高高举起了中国特色社会主义伟大旗帜；</li><li>第三，从人类文明进程看，中国特色社会主义进入新时代，意味着中国特色社会主义道理、理论、制度、文化不断发展，拓展了发展中国家走向现代化的途径，给世界上那些既希望加快发展又希望保持自身独立性的国家和民族提供了全新选择，为解决人类问题贡献了中国智慧和中国方案；</li></ol><h3 id="4-习近平新时代中国特色社会主义思想的主要内容（八个明确）"><a href="#4-习近平新时代中国特色社会主义思想的主要内容（八个明确）" class="headerlink" title="4.习近平新时代中国特色社会主义思想的主要内容（八个明确）"></a>4.习近平新时代中国特色社会主义思想的主要内容（八个明确）</h3><p>​    第一、明确坚持 和发展中国特色社会主义，总任务是实现社会主义现代化和中华民族伟大复兴，在全面建成小康社会的基础上，分两步走在本世纪中叶建成富强民主文明和谐美丽的社会主义现代化强国。</p><p>​    第二、明确新时代我国社会主要矛盾是人民益增长的美好生活需要和不平衡不充分的发展之间的矛盾，必须坚持以人民为中心的发展思想，不断促进人的全面发展、全体人民共同富裕。</p><p>​    第三、明确中国特色社会主义事业总体布局是“五位一体”、战略布局是“四个全面”，强调坚定道路自信、理论自信、制度自信、文化自信。</p><p>​    第四、明确全面深化改革总目标是完善和发展中国特色社会主义制度、推进国家治理体系和治理能力现代化。</p><p>​    第五、明确全面推进依法治国总目标是建设中国特色社会主义法治体系、建设社会主义法治国家。</p><p>​    第六、明确党在新时代的强军目标是建设一支听党指挥、能打胜仗、作风优良的人民军队，把人民军队建设成为世界一流军队。</p><p>​    第七、明确中国特色大国外交要推动构建新型国际关系，推动构建人类命运共同体。</p><p>​    第八、明确中国特色社会主义最本质的特征是中国共产党领导，中国特色社会主义制度的最大优势是中国共产党领导，党是最高政治领导力量，提出新时代党的建设总要求，突出政治建设在党的建设中的重要地位。</p><p>​    这“八个明确”，高度凝练、提纲挈领地点明了习近平新时代中国特色社会主义思想的主要内容。</p><h3 id="5-坚持和发展中国特色社会主义的基本方略（十四个坚持）"><a href="#5-坚持和发展中国特色社会主义的基本方略（十四个坚持）" class="headerlink" title="5.坚持和发展中国特色社会主义的基本方略（十四个坚持）"></a>5.坚持和发展中国特色社会主义的基本方略（十四个坚持）</h3><ol><li>坚持党对一切工作的领导</li><li>坚持以人民为中心</li><li>坚持全面深化改革</li><li>坚持新发展理念</li><li>坚持人民当家作主</li><li>坚持全面依法治国</li><li>坚持社会主义核心价值体系</li><li>坚持在发展中保障和改善民生</li><li>坚持人与自然和谐共生</li><li>坚持总体国家安全观</li><li>坚持党对人民军队的绝对领导</li><li>坚持一国两制和推进祖国统一</li><li>坚持推动构建人类命运共同体</li><li>坚持全面从严治党</li></ol><h3 id="6-两个一百年："><a href="#6-两个一百年：" class="headerlink" title="6.两个一百年："></a>6.两个一百年：</h3><ol><li>第一个一百年，是到中国共产党成立100年时（2021年）全面建成小康社会；</li><li>第二个一百年，是到新中国成立100年时（2049年）建成富强、民主、文明、和谐的社会主义现代化国家。</li></ol><h3 id="7-实现社会主义现代化强国“两步走”战略的具体安排：P203"><a href="#7-实现社会主义现代化强国“两步走”战略的具体安排：P203" class="headerlink" title="7.实现社会主义现代化强国“两步走”战略的具体安排：P203"></a>7.实现社会主义现代化强国“两步走”战略的具体安排：P203</h3><ol><li>从2020年到2035年，基本实现社会主义现代化的目标要求。</li><li>从2035年到本世纪中叶，建成社会主义现代化强国的目标要求</li></ol><h3 id="8-习近平新时代中国特色社会主义思想的历史地位"><a href="#8-习近平新时代中国特色社会主义思想的历史地位" class="headerlink" title="8.习近平新时代中国特色社会主义思想的历史地位"></a>8.习近平新时代中国特色社会主义思想的历史地位</h3><ol><li>马克思主义中国化的最新成果；</li><li>新时代的精神旗帜；</li><li>实现中华民族伟大复兴的行动指南；</li></ol><h2 id="专题十-五位一体总布局"><a href="#专题十-五位一体总布局" class="headerlink" title="专题十 五位一体总布局"></a>专题十 五位一体总布局</h2><h2 id="一、建设现代化经济体系"><a href="#一、建设现代化经济体系" class="headerlink" title="一、建设现代化经济体系"></a>一、建设现代化经济体系</h2><h3 id="1-贯彻五大新发展理念"><a href="#1-贯彻五大新发展理念" class="headerlink" title="1.贯彻五大新发展理念"></a>1.贯彻五大新发展理念</h3><ol><li><p>创新、协调、绿色、开放、共享，五个之中最重要的是创新。</p><ul><li>创新是引领发展的<strong>第一动力</strong>；</li><li>协调是持续健康发展的<strong>内在要求</strong>；</li><li>绿色是永续发展的<strong>必要条件</strong>；</li><li>开放是国家繁荣发展的<strong>必由之路</strong>；</li><li>共享是中国特色社会主义的<strong>本质要求</strong>。</li><li>共享的内涵（四个内涵）：<u>全民共享、全面共享、共建共享、渐进共享</u></li></ul></li><li><p>关系：</p><p>​    <u>创新、协调、绿色、开放、共享的新发展理念，相互贯通、相互促进，是具有内在联系的集合体。</u></p><p>​    <strong>创新</strong>注重的是解决发展动力问题；</p><p>​    <strong>协调</strong>注重的是解决发展不平衡问题；</p><p>​    <strong>绿色</strong>注重的是解决人与自然和谐问题；</p><p>​    <strong>开放</strong>注重的是解决发展内外联动问题；</p><p>​    <strong>共享</strong>注重的是解决社会公平正义问题。</p></li></ol><h3 id="2-深化供给侧结构性改革"><a href="#2-深化供给侧结构性改革" class="headerlink" title="2.深化供给侧结构性改革"></a>2.深化供给侧结构性改革</h3><ol><li>第一、推进增长动能转换，以加快发展先进制造业为重点全面提升实体经济；</li><li>第二、深化要素市场化配置改革，实现由以价取胜到以质取胜的转变；</li><li>第三、加大人力资本培育力度，更加注重调动和保护人的积极性；</li><li>第四、持续推进“三去一降一补”，优化市场供求结构。</li></ol><h3 id="3-建设现代化经济体系"><a href="#3-建设现代化经济体系" class="headerlink" title="3.建设现代化经济体系"></a>3.建设现代化经济体系</h3><ol><li>我国经济已由高速增长阶段转向高质量发展阶段，正处于在转变发展方式、优化经济结构、转变增长动力的攻关期。</li><li>六个体系，一个体制（p212）：<br>现代化经济体系，现代市场体系，收入分配体系，城乡区域发展体系，绿色发展体系，全面开放体系。<br>经济体制：有效、微观主体有活力，宏观调控有度。</li></ol><h3 id="4-建设现代化经济体系的主要任务"><a href="#4-建设现代化经济体系的主要任务" class="headerlink" title="4.建设现代化经济体系的主要任务"></a>4.建设现代化经济体系的主要任务</h3><ol><li>第一、大力发展实体经济；</li><li>第二、加快实施创新驱动发展战略；</li><li>第三、激发各类市场主体活力；</li><li>第四、积极推动城乡区域协调发展；</li><li>第五、着力发展开放型经济；</li><li>第六、加快完善社会主义市场经济体制。</li></ol><h2 id="二、发展社会主义民主政治"><a href="#二、发展社会主义民主政治" class="headerlink" title="二、发展社会主义民主政治"></a>二、发展社会主义民主政治</h2><h3 id="1-坚持中国特色社会主义政治发展道路"><a href="#1-坚持中国特色社会主义政治发展道路" class="headerlink" title="1.坚持中国特色社会主义政治发展道路"></a>1.坚持中国特色社会主义政治发展道路</h3><p>​    走中国特色社会主义政治发展道路，必须坚持<u>党的领导、人民当家作主、依法治国</u>有机统一。</p><ol><li>党的领导是 人民当家作主和依法治国的根本保证；</li><li>人民当家作主是社会主义民主政治的本质特征；</li><li>依法治国是党领导人民治理国家的基本方式；</li></ol><ul><li>根本国家制度：社会主义制度；（国体） </li><li>根本政治制度：人民代表大会制度；（政体）</li><li>基本政治制度：包括中国共产党领导的多党合作和政治协商制度、民族区域自治制度以及基层群众自治制度；</li></ul><h3 id="2-爱国统一战线"><a href="#2-爱国统一战线" class="headerlink" title="2.爱国统一战线"></a>2.爱国统一战线</h3><p>​    主题：大团结，大联合；（P218）</p><p>​    社会主义的建设事业必须依靠工人、农民和知识分子，团结一切可以团结的力量。要高举爱国主义、社会主义旗帜，牢牢把握大团结大联合的主题，坚持一致性和多样性统一，找到最大公约数，画出最大同心圆。</p><h3 id="3-一国两制"><a href="#3-一国两制" class="headerlink" title="3.一国两制"></a>3.一国两制</h3><ul><li><p>基本点：</p><ul><li>一、  一个中国。世界上只有一个中国，以中华人民共和国为主体，大陆和台湾同属于一个中国，中国的主权不容侵犯，中国的领土不容分割。</li><li>二、  两制并存。一个中国的前提下，国家的主体部分实行社会主义制度。同时在香港、澳门、台湾保持原有的资本主义制度长期不变。</li><li>三、  高度自治。祖国完全统一后，台湾、香港、澳门将成为特别行政区。它不同于中国其他一般省区，享有高度的自治权。</li><li>四、  和平谈判。尽最大努力争取和平统一，但不承诺放弃使用武力。</li><li>五、  解决台湾问题，实现祖国完全统一，寄希望于台湾人民。台湾同胞具有光荣的爱国主义传统，是发展两岸关系的重要力量。</li></ul></li><li><p>一国和两制的关系：</p><p>“一国”是实行“两制”的<strong>前提和基础</strong>；</p><p>“两制”<strong>从属和派生</strong>于“一国”，并<strong>统一</strong>于“一国”之内。</p></li></ul><p>  一国两治的前提是坚持只有一个中国即中华人民共和国；</p><p>  五个基本点是:基本立场、基本目标、基本准则、基本立足点、基本国策；</p><p>  “一国”和“两制”的关系：<br>  “一国两制”是一个完整的概念。“一国”是实行，“两制”是前提和基础，“两制”从属和派生于“一国”，并统一于“一国”之内。“一国”是根，根深才能叶茂；“一国”是本，本固才能枝荣。</p><p>  “一国两制”的提出首先是为了实现和维护国家统一。</p><h2 id="三、社会主义文化"><a href="#三、社会主义文化" class="headerlink" title="三、社会主义文化"></a>三、社会主义文化</h2><h3 id="1-意识形态"><a href="#1-意识形态" class="headerlink" title="1.意识形态"></a>1.意识形态</h3><ol><li>重要性：意识形态关乎旗帜、关乎道路、关乎国家政治安全，决定文化前进方向和道路。</li><li>主要作用：强大凝聚力。</li></ol><h3 id="2-社会主义核心价值观"><a href="#2-社会主义核心价值观" class="headerlink" title="2.社会主义核心价值观"></a>2.社会主义核心价值观</h3><p>习近平当选总书记（2012年十八大提出）</p><ol><li><p>核心价值观是一个民族赖以维系的精神纽带，是一个国家共同的思想道德基础。</p></li><li><p>核心价值观是一个国家重要稳定器，能否构建具有强大感召力的核心价值观，关系社会和谐稳定，关系国家长治久安。</p><p><strong>富强、民主、文明、和谐（国家层面）</strong><br><strong>自由、平等、公正、法治（社会层面）</strong><br><strong>爱国、敬业、诚信、友善（个人层面）</strong></p></li></ol><h3 id="3-文化自信，文化自省"><a href="#3-文化自信，文化自省" class="headerlink" title="3.文化自信，文化自省"></a>3.文化自信，文化自省</h3><ol><li>文化是一个国家、一个民族的灵魂，是人民的精神家园，也是政党的精神旗帜。</li><li>文化兴国运兴，文化强国运强。没有高度的文化自信，没有文化的繁荣兴盛，就没有中华民族伟大复兴…（P230） </li></ol><h3 id="4-四个自信"><a href="#4-四个自信" class="headerlink" title="4.四个自信"></a>4.四个自信</h3><ol><li>中国特色社会主义道路自信；</li><li>理论自信；</li><li>制度自信；</li><li>文化自信；</li></ol><h2 id="四、民生"><a href="#四、民生" class="headerlink" title="四、民生"></a>四、民生</h2><h3 id="1-提高保障和改善民生水平"><a href="#1-提高保障和改善民生水平" class="headerlink" title="1.提高保障和改善民生水平"></a>1.提高保障和改善民生水平</h3><p>​    在中国特色社会主义新时代，我们要以更大的力度、更实的措施保障和改善民生，加强和创新社会治理，坚决打赢脱贫攻坚战，促进社会公平正义，在幼有所育、学有所教、劳有所得、病有所医、老有所养、住有所居、弱有所扶上不断取得新发展，让实现全体人民共同富裕在广大人民现实生活中更加充分的展示出来。</p><p>举措：</p><ol><li>第一、优先发展教育事业；</li><li>第二、提高就业质量和人民收入水平；</li><li>第三、加强社会保障体系建设；</li><li>第四、坚决打赢脱贫攻坚战；</li><li>第五、实施健康中国战略。</li></ol><h3 id="2-加强和创新社会治理：P233"><a href="#2-加强和创新社会治理：P233" class="headerlink" title="2.加强和创新社会治理：P233"></a>2.加强和创新社会治理：P233</h3><p>1.创新社会治理体制；</p><p>2.改进社会治理方式；</p><p>3.加强预防和化解社会矛盾机制建设；</p><p>4.加强社会心理服务体系建设；</p><p>5.加强社区治理体系建设。</p><h3 id="3-坚持总体国家安全观"><a href="#3-坚持总体国家安全观" class="headerlink" title="3.坚持总体国家安全观"></a>3.坚持总体国家安全观</h3><p>​    总体国家安全观是指坚持国家利益至上，以人民安全为宗旨，以政治安全为根本，以经济安全为基础，以军事、文化、社会安全为保障，以促进国际安全为依托，维护各领域国家安全，构建国家安全体系，走中国特色国家安全道路。</p><p>举措：（五个方面 P235-236）：</p><ol><li>第一、完善国家安全体系；(政治国土军事经济文化社会科技信息生态资源核安全)</li><li>第二、健全公共安全体系；</li><li>第三、推进平安中国建设；</li><li>第四、加强国家安全能力建设；</li><li>第五、加强国家安全教育。</li></ol><h2 id="五、生态文明建设"><a href="#五、生态文明建设" class="headerlink" title="五、生态文明建设"></a>五、生态文明建设</h2><h3 id="1-坚持人与自然和谐共生：P237"><a href="#1-坚持人与自然和谐共生：P237" class="headerlink" title="1.坚持人与自然和谐共生：P237"></a>1.坚持人与自然和谐共生：P237</h3><ol><li>核心：坚持人与自然和谐共生。</li><li>含义：生态文明建设是指人类再利用和改造自然的过程中，主动保护自然，积极改善和优化人与自然的关系，建设健康有序的生态运行机制和良好的生态环境。</li><li>生态文明建设的重要地位：用之不觉，失之难存。</li></ol><h3 id="2-形成人与自然和谐发展的新格局：P239"><a href="#2-形成人与自然和谐发展的新格局：P239" class="headerlink" title="2.形成人与自然和谐发展的新格局：P239"></a>2.形成人与自然和谐发展的新格局：P239</h3><ol><li>第一、把节约资源放在首位；</li><li>第二、坚持保护优先、自然恢复为主；</li><li>第三、着力推进绿色发展、循环发展、低碳发展。</li><li>第四、形成节约资源和保护环境的空间格局、产业结构、生产方式、生活方式。</li></ol><h3 id="3-建设美丽中国"><a href="#3-建设美丽中国" class="headerlink" title="3.建设美丽中国"></a>3.建设美丽中国</h3><p>​    建设美丽中国，要树立人与自然和谐共生的基本理念，实现最严格的环境保护政策，坚持绿色发展，加快生态文明体制改革（P240）。</p><p>生态文明体制改革：</p><ol><li>推进绿色发展；</li><li>着力解决突出环境问题；</li><li>加大生态系统保护力度；</li><li>改革生态环境监管体制；</li></ol><h2 id="专题十一-“四个全面”战略布局：P245"><a href="#专题十一-“四个全面”战略布局：P245" class="headerlink" title="专题十一 “四个全面”战略布局：P245"></a>专题十一 “四个全面”战略布局：P245</h2><p>​    四个全面是指：1.全面建成小康社会；2.全面深化改革；3.全面依法治国；4.全面 从严治党。    </p><p>​        党的十八大提出了到2020年全面建成小康社会的奋斗目标。全面建成小康社会标志着我们跨过了实现现代化建设第三步战略目标必经的承上启下的重要发展阶段。全面小康有更高的标准、更丰富的内涵、更全面的要求，即经济更加发展、民主更加健全、科教更加进步、文化更加繁荣、社会更加和谐、人民生活更加殷实。 </p><h3 id="1-全面建成小康社会"><a href="#1-全面建成小康社会" class="headerlink" title="1.全面建成小康社会"></a>1.全面建成小康社会</h3><p>​    全面建成小康社会，经济更加发展、民主更加健全、科教更加进步、文化更加繁荣、社会更加和谐、人民生活更加殷实。</p><p>全面指的是：平衡性、协调性、可持续性。</p><p>小康指的是：发展水平</p><p>其他三个方面在书 P249、255、259；</p><h2 id="专题十二-中国特色-大国外交"><a href="#专题十二-中国特色-大国外交" class="headerlink" title="专题十二 中国特色 大国外交"></a>专题十二 中国特色 大国外交</h2><p>（简介：书 P282 页）<br>    维护世界和平、促进共同发展是中国外交政策的宗旨。中国将坚定不移奉行独立自主的和平外交政策，同国际社会一道致力于推动建立以相互尊重、公平正义、合作共赢为核心的新型国际关系。</p><h3 id="1-人类命运共同体"><a href="#1-人类命运共同体" class="headerlink" title="1.人类命运共同体"></a>1.人类命运共同体</h3><p>（具体内容：书 289 页）<br>    推动构建人类命运共同体，就是要各国人民同心协力，建设持久和平、普遍安全、共同繁荣、开放包容、清洁美丽的世界。</p><p>​    人类只有一个地球，各国共处于一个世界。构建人类命运共同体既是中国外交的崇高目标，也是世界各国的共同责任和历史使命。世界各国应携手合作，共同努构建人类命运共同体，建设一个更加美好的世界。 </p><h3 id="2-一带一路"><a href="#2-一带一路" class="headerlink" title="2.一带一路"></a>2.一带一路</h3><p>（具体内容：书 293 页）<br>    党的十九大提出要以“一带一路”建设为重点，坚持引进来和走出去并重，遵循共商共建共享原则，加强创新能力开放合作，形成陆海内外联动、东西双向互济经济的开放格局。</p><p>​    把一带一路建成和平之路、繁荣之路、开放之路、创新之路、文明之路。</p>]]></content>
      
      
      <categories>
          
          <category> Review </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>os</title>
      <link href="/2019/06/17/os/"/>
      <url>/2019/06/17/os/</url>
      
        <content type="html"><![CDATA[<h1 id="作业1（第一章）"><a href="#作业1（第一章）" class="headerlink" title="作业1（第一章）"></a>作业1（第一章）</h1><p>一、填空题</p><p>1.以下有关操作系统的叙述中，哪一个是不正确的         </p><p>A.操作系统管理系统中的各种资源 </p><p>B.操作系统为用户提供的良好的界面</p><p>C.操作系统就是资源的管理者和仲裁者 </p><p>D.操作系统是计算机系统中的一个应用软件</p><p>2.操作系统所占用的系统资源和所需的处理器时间称为         </p><p>A.资源利用率 B.系统性能 C.系统吞吐率 D.系统开销</p><p>3.操作系统所管理的资源包括:ⅠCPU Ⅱ 程序 Ⅲ 内存 Ⅳ 外部设备         </p><p>A.Ⅰ和Ⅱ B.Ⅱ和Ⅲ C Ⅰ、Ⅱ和Ⅲ D.全部</p><p>4.分时操作系统的主要特点是         </p><p>A.个人独占机器资源 B.自动控制作业运行</p><p>C.高可靠性和安全性 D.多个用户共享计算机资源</p><p>5.分时操作系统的主要目标是         </p><p>A.提高计算机系统的实时性 B.提高计算机系统的利用率</p><p>C.提高软件的运行速度 D.提高计算机系统的交互性</p><p>6.在用户程序中请求操作系统服务时应使用         </p><p>A.终端命令 B.作业控制语言 C.系统调用 D.原语</p><p>7.实时操作系统的主要目标是         </p><p>A.计算机系统的交互性 B.计算机系统的利用率</p><p>C.计算机系统的可靠性 D.提高软件的运行速度</p><p>8.操作系统具有进程管理,存储管理,文件管理和设备管理的功能,下列有关描述中,哪一项是不正确的?         </p><p>A.进程管理主要是对程序进行管理 B.存储管理主要管理内存资源</p><p>C.文件管理可以有效的支持对文件的操作，解决文件共享、保密和保护问题</p><p>D. 设备管理是指计算机系统中除了CPU和内存以外的所有输入输出设备的管理</p><p>9..引入多道程序设计的目的是         </p><p>A.增强系统的用户友好性 B.提高系统实用性 C.充分利用CPU D.扩充内存容量</p><p>10.下列哪一个不是操作系统的主要特征?         </p><p>A.并发性 B.共享性 C.灵活性 D.异步性</p><p>11.下列特性中,哪一个不是进程的特性         </p><p>A.交互性 B.异步性 C.并发性 D.静态性 </p><p>12.在精确制导导弹中使用的操作系统应属于下列哪一种         </p><p>A.批处理操作系统 B.个人计算机操作系统 C.实时操作系统 D.网络操作系统</p><p>二、判断题</p><p>1.早期的计算机中没有操作系统，用户直接与硬件打交道。     √    </p><p>2．操作系统是控制应用程序执行的程序，并充当应用程序和计算机硬件之间的接口。    √     </p><p>三、名词解释：</p><p>1．脱机I/O、联机I/O</p><p>脱机I/O:程序和数据的输入和输出都是在外围机的控制下完成的在脱离主机的情况下进行的。</p><p>联机I/O:是指程序和数据的输入输出都是在主机的直接控制下进行的。</p><p>2.临界资源</p><p>在一段时间内只允许一个进程访问的资源</p><p>3.单用户单任务OS、单用户多任务OS、多用户多任务OS（举例）</p><p>​    单用户单任务OS：只允许一个用户上机，且只允许应用程序作为一个任务运行。MS-DOS CP/M</p><p>​    单用户多任务OS：只允许一个用户上机，但允许用户把程序分为若干个任务，使它们并发执行。Windows</p><p>​    多用户多任务OS：允许多个用户通过各自的终端，使用同一台机器，共享主机系统中的各种资源。Linux</p><p>四、问答题：</p><p>1.操作系统有哪几大特征？并给予解释。</p><p>\1.   并发：指两个或多个事件在同一时间间隔内发生（不同于并行性，指两个或多个事件在同一时刻发生）；</p><p>\2.   共享：指系统中的资源可供内存中多个并发执行的进程共同使用；</p><p>\3.   虚拟：通过某种技术将一个物理实体变成若干个逻辑上的对应物的功能；</p><p>\4.   异步：进程是以人们不可预知的速度向前推进的；</p><p>2.文件管理有哪些主要功能？其主要任务是什么？</p><p>\1.   文件存储空间的管理</p><p>\2.   目录管理</p><p>\3.   文件的读/写管理和保护</p><p>\4.   主要任务：对用户文件和系统文件进行管理以方便用户使用，并保证文件的安全性。</p><h1 id="阶段测试1（第二章）"><a href="#阶段测试1（第二章）" class="headerlink" title="阶段测试1（第二章）"></a>阶段测试1（第二章）</h1><p>一、单项选择题</p><p>1．以下对进程的描述中，错误的是        。</p><p>​    A．进程是动态的概念    B．进程执行需要处理机</p><p>​    C．进程是有生命期的    D．进程是指令的集合（程序是指令的集合）</p><p>2．并发进程指的是        。</p><p>​    A．可并行执行的进程    B．可同一时刻执行的进程</p><p>​    C．可同时执行的进程    D．不可中断的进程</p><p>3．分配到必要的资源并获得处理机时间的进程状态是        。</p><p>​    A．就绪状态    B．运行状态    C．阻塞状态    D．撤销状态</p><p>4．某个运行中的进程要申请打印机，它将变为        。</p><p>​    A．就绪态    B．阻塞态    C．创建态    D．撤销态</p><p>5．以下进程状态转变中，        转变是不可能发生的。</p><p>​    A．运行一&gt;就绪    B．运行一&gt;阻塞  C．阻塞一&gt;运行  D．阻塞一&gt;就绪</p><p>6．当        时，进程从执行状态转变为就绪状态。</p><p>A．进程被调度程序选中    B．时间片到</p><p>​     C．等待某一事件          D．等待的事件发生</p><p>7．进程状态由就绪态转换为运行态是由        引起的。</p><p>A．中断事件    B．进程状态转换  C．进程调度  D．为程序创建进程</p><p>8．一个进程被唤醒意味着        。</p><p>​    A．该进程一定重新占用CPU    B．它的优先级变为最大</p><p>​    C．其PCB移至就绪队列队首    D．进程变为就绪状态</p><p>9．若P、V操作的信号量S初值为2，当前值为—1，则表示有        等待进程。</p><p>A．0个    B.1个     C.2个     D.3个</p><p>10．一次I/O操作的结束，有可能导致        。</p><p>​    A．一个进程由阻塞变为就绪    B．几个进程由阻塞变为就绪</p><p>​    C．一个进程由阻塞变为运行    D．几个进程由阻塞变为运行</p><p>二、综合应用题</p><p>1．在单用户系统中，有n个进程，问排在就绪队列和等待队列中进程个数的范围是什么?</p><p>​    解：若就绪队列中有进程在排队，则调度程序必将其中一个调入CPU并运行，所以就绪队列中的进程个数为0～n-1。所有n个进程都有可能处于阻塞状态，所以等待队列中的进程个数为0～n。</p><p>2．回答以下问题：</p><p> (1)若系统中没有运行进程，是否一定没有就绪进程?为什么?</p><p>​    是，因为若系统没有运行进程，那么系统很快会选择一个就绪进程运行。只有就绪队列无进程时，CPU才可能处于空闲状态。</p><p>(2)若系统中既没有运行进程，也没有就绪进程，系统中是否就没有进程?为什么?</p><p>​    不一定，因为系统中的所有进程可能都处于等待状态，但不一定处于死锁状态。</p><p>(3)在采用优先级进程调度时，运行进程是否一定是系统中优先级最高的进程?</p><p>​    不一定。因为高优先级的进程可能正处于等待队列。</p><p>\3. 某博物馆最多可容纳500人同时参观，有一个出入口，该出入口一次仅允许一个人通过。参观者的活动描述如下：</p><p>​    参观者进程i:</p><p>​       Begin</p><p>​         进门; 参观; 出门</p><p>​       End</p><p>​    </p><p>定义两个信号量 </p><p>Semaphore empty=500； //博物馆可以容纳的最多人数 </p><p>Semaphore mutex=1； //用于出入口资源的控制 </p><p>begin 参观者进程i： </p><p>{ </p><p>… </p><p>P(empty)；</p><p>P(mutex)；</p><p>进门； </p><p>V(mutex)； </p><p>参观； </p><p>P(mutex)； </p><p>出门； </p><p>V(mutex)； </p><p>V(empty)； </p><p>… </p><p>} </p><p>end</p><p>\4. 桌上有一空盘，允许存放一个水果。爸爸可向盘中放苹果，也可向盘中放橘子，儿子专等吃盘中的橘子，女儿专等吃盘中的苹果。规定当盘空时一次只能放一只水果供吃者取用，请用P、V原语实现爸爸、儿子、女儿三个并发进程的同步。</p><p>​    设置三个信号量： </p><p>S，初值为1，用于爸爸、儿子、女儿三个进程间的互斥，表示盘中是否为空。SO，初值为0，用于爸爸、女儿两个进程间的同步，表示盘中是否有橘子。     SA，初值为0，用于爸爸、儿子两个进程间的同步，表示盘中是否有苹果。</p><p>三个进程之间的同步描述如下：</p><p>father进程    daughter进程    son进程 </p><p>  L1：           L2：         L3：</p><p>P(S)           P(SO)        P(SA)               将水果放入盘中  从盘中取出橘子   从盘中取出苹果</p><p>if(放入是橘子)V(SO)    V(S)       V(S) </p><p>else V(SA)        吃橘子      吃苹果            </p><p>goto L1          goto L2     goto L3 </p><h1 id="作业2（第二章）"><a href="#作业2（第二章）" class="headerlink" title="作业2（第二章）"></a>作业2（第二章）</h1><p>一、单项选择</p><p>1．以下关于进程的描述中，正确的是        。</p><p>​    A．进程获得CPU运行是通过调度得到的</p><p>​    B．优先级是进程调度的重要依据，一旦确定就不能改变</p><p>​    C．在单CPU的系统中，任意时刻都有一个进程处于运行状态</p><p>D．进程申请CPU得不到满足时，其状态变为阻塞</p><p>调度程序的功能是为进程分配处理机；动态优先级是可以改变的；有时计算机系统中没有任何进程运行，CPU处于空闲状态，计算机进行空转；进程已获得除CPU以外的资源时处于就绪状态。本题答案为A。</p><p>2．一个进程是        。</p><p>​    A．由处理机执行的一个程序         B．一个独立的程序+数据集</p><p>​    C．PCB结构、程序和数据的组合     D．一个独立的程序</p><p>3．在多道程序环境下，操作系统分配资源以        为基本单位。</p><p>​    A．程序    B．指令    C．进程    D．作业</p><p>4．操作系统通过        对进程进行管理。</p><p>​    A．JCB    B．PCB    C．DCT D．CHCT</p><p>5．当一个进程处于这样的状态时，        ，称为阻塞状态。</p><p>​    A．它正等着输入一批数据        B．它正等着进程调度</p><p>​    C．它正等着分给它一个时间片    D．它正等着进入内存</p><p>6．一个进程的基本状态可以从其他两种基本状态转变过来，这个基本状态一定是        。</p><p>​    A．运行状态    B．阻塞状态    c．就绪状态    D．完成状态</p><p>7．以下可能导致一个进程从运行状态变为就绪状态的事件是        。</p><p>​    A．一次I/O操作结束     B．运行进程需做I/O操作</p><p>​    C．运行进程结束         D．出现了比现在进程优先级更高的进程</p><p>8．以下说法中，        不是创建进程必须的。</p><p>​    A．建立一个进程的进程表项    B．为进程分配内存</p><p>C．为进程分配 CPU            D．将进程表项插入就绪队列中</p><p>解：进程刚创建后处于就绪状态，所以不为其分配CPU。本题答案为C。</p><p>9．以下关于父进程和子进程的叙述中，正确的是        。</p><p>​    A．父进程创建了子进程，因此父进程运行完了，子进程才能运行</p><p>​    B．父进程和子进程可以并发执行</p><p>​    C．撤销子进程时，应该同时撤销父进程</p><p>​    D．撤销父进程时，应该同时撤销子进程</p><p>10．在引入线程的操作系统中，资源分配的基本单位是  ①C．进程  ，CPU分配的基本单位是② D进程 。</p><p>​    A．程序    B．作业    C．进程    D．线程</p><p>二、综合应用题</p><p>1．为什么要引入进程概念?进程的基本特点是什么?它与程序有何联系和区别。</p><p>​    解：为了能使程序并发执行，并且可以对并发执行的程序加以描述和控制</p><p>​    基本特点：</p><p>​       动态性、并发性、独立性和异步性。</p><p>​    联系：</p><p>​       进程是程序的一次执行过程，没有程序就没有进程；</p><p>​    区别：</p><p>\1.   进程是程序的执行，进程属于动态的概念；而程序是一组指令的集合，是静态的概念。</p><p>\2.   进程是程序的执行，它是由声明过程的，由创建到死亡，进程的存在是暂时的，程序的存在是永久的。</p><p>\3.   进程是程序的执行，所以进程的组成包括程序和数据。除此之外，进程还由记录进程状态信息的PCB组成。</p><p>\4.   进程是竞争计算机系统资源的基本单位。</p><p>\5.   一个进程能与其他进程并发地活动。</p><p>\6.   一个程序可能对应多个进程，一个进程可以包含多个程序。也就是说，程序和进程无一一对应关系。</p><p>\7.   进程的几个特点程序都不具备。</p><p>2．设系统中有n(n&gt;2)个进程，且当前不执行进程调度程序，试考虑下述4种情况：</p><p>①没有运行进程，有2个就绪进程，n个进程处于等待状态。</p><p>②有1个运行进程，没有就绪进程，n-1个进程处于等待状态。</p><p>③有1个运行进程，有1个就绪进程，n-2个进程处于等待状态。</p><p>④有1个运行进程，n-1个就绪进程，没有进程处于等待状态。</p><p>上述情况中，不可能发生的情况是哪些? </p><p>①就绪队列非空，处理机不应休闲。</p><p>\3. 用P、V操作管理临界区时，任何一个进程在进入临界区之前应调用<strong>P</strong>操作，退出临界区时应调用<strong><em>V</em></strong>操作。</p><p>\4. 信箱是一种   间接  通信方式；用信箱实现通信时，应有      发送  <strong>_和</strong>接收<strong>两条基本原语。信箱在逻辑上分成</strong>信箱头__ _和__信箱体_两部分，前一部分存放有关信箱的描述，后者由若干格子组成，每格存放一信件，格子的数目和大小在创建信箱时确定。</p><p>\5. 有一自动管理的地下车库，最多可停放50辆汽车，出入口都有自动感应装置。当有车到达入口时，若车库中没有停满车，则开启入口门让其驶入，否则需等待；当有一辆车要离开车库时，若有车等待进入，则允许一辆车驶入；否则，增加一个空位。假定这个自动管理系统采用P、V操作来管理，回答下列问题：</p><p>(1) 应定义几个信号量?写出信号量的初值。</p><p>​           1                 50</p><p>(2) 在下面管理系统的程序结构中的方框位置填上能满足管理要求的P、V操作。</p><p>入口：                                出口：</p><p>Begin  P                                  begin  V</p><p>一辆车到达入口；                      一辆车到达出口；</p><p>打开车库门；</p><p>打开车库门；</p><p>汽车驶入车库；                      汽车离开车库；</p><p>end；                                 end；</p><p>(3) 分别写出信号量值变化成&gt;0、&lt;0和=0时的含义。</p><p>大于0：表示车库中有空位</p><p>小于0：表示车库已满，且有车辆等待进入</p><p>等于0：表示车库已满，且没有车辆等待</p><p>\6. 从调度性、并发性、拥有资源及系统开销方面对进程和线程进行比较。</p><p>​    调度性：在传统OS中，进程是资源拥有的基本单位，也是独立调度和分派的基本单位；在引入线程的OS中，线程是独立调度和分派的基本单位，进程只是拥有资源的基本单位，两个角色分开。</p><p>​    并发性：在引入线程的OS中，不仅进程间可以并发执行，而且一个进程内的多线程也可以并发执行，因而比传统的OS具有更好的并发性；</p><p>​    拥有资源：在各类OS中，拥有资源的基本单位都是进程，线程除了一点简单资源外，本身基本不拥有系统资源，但它可以共享所属进程的资源。</p><p>​    系统开销：创建和撤销进程，由于要分配和回收系统资源，因此系统开销远大于创建和撤销线程；进程切换要保存和设置的现场信息也较多，所以进程切换的系统开销也大于线程切换。</p><p>\7. 用记录型信号量解决哲学家进餐问题。</p><p>8 .系统中有多个生产者进程和消费者进程，共用一个可以存1000个产品的缓冲区（初始为空），当缓冲区未满时，生产者进程可以放入一件其生产的产品，否则等待；当缓冲区未空时，消费者进程可以取走一件产品，否则等待。要求一个消费者进程从缓冲区连续取出10件产品后，其他消费者进程才可以取产品，请用P，V（wait，signal）操作实现进程间的互斥和同步，要求写出完整的过程；并指出所用信号量的含义和初值。</p><h1 id="作业3（第三章）"><a href="#作业3（第三章）" class="headerlink" title="作业3（第三章）"></a>作业3（第三章）</h1><p>一、判断题</p><p>1、循环轮转调度中，时间片q越小，响应时间越短，所以调度效果越好。       （   ×   ）</p><p>2、按银行家算法来分配资源是不会产生死锁的。                             （   √   ）</p><p>二、选择题</p><p>1、下列进程调度算法中，                调度算法对长进程比较有利。</p><p>A、先来先服务       B、时间片轮转        C、短进程优先     D、最高响应比优先</p><p>2、以下哪种调度算法不可能是剥夺方式的？                </p><p>A、先来先服务   B、最短CPU执行期优先   C、最高优先权   D、轮转法</p><p>3、预防死锁的方法通常是打破四个必要条件之一，但一般不能破坏(        )条件。</p><p>A、互斥条件          B、请求保持条件       C、不剥夺条件       D、环路等待条件</p><p>4、若系统中有五台绘图仪，有多个进程均需要使用两台，规定每个进程一次仅允许申请一台，则至多允许（      ）个进程参于竞争，而不会发生死锁。</p><p>A、5             B、2                  C、3                   D、4</p><p>5、在进程资源图中(   )是发生死锁的必要条件。</p><p>A、互斥        B、可剥夺件             C、环路                D、同步</p><p>三、填空题</p><p>1、产生死锁有四个必要条件，预先分配策略破坏了<strong><em>请求和保持</em></strong>条件，使死锁不会发生；而有序分配策略破坏了<strong><em>循环等待</em></strong>条件，也同样使死锁不会发生。</p><p>2、银行家算法是在能确保系统处于    安全状态     的情况下，才把资源分配给申请者的。</p><p>四、简答题</p><p>1、课后作业P127：1、6、11、15、23、27</p><p>五、综合题</p><p>1、某操作系统采用非抢占的调度方式，若有4个作业A、B、C、D，它们的到达时间、估计的运行时间和设置的优先级如下表所示（单位为S）。请回答下列问题（要求给出过程）：</p><p>（1）采用先来先服务调度算法，调度顺序是什么？作业的平均周转时间是多少？</p><p>（2）采用最短作业优先调度算法时,调度顺序是什么？作业的平均周转时间是多少？</p><p>（3）采用最高优先级优先的调度算法时,调度顺序是什么？作业的平均周转时间是多少？    </p><table><thead><tr><th>作业</th><th>到达时间</th><th>运行时间</th><th>优先级(大者高)</th></tr></thead><tbody><tr><td>A</td><td>0</td><td>2</td><td>1</td></tr><tr><td>B</td><td>1</td><td>10</td><td>3</td></tr><tr><td>C</td><td>2</td><td>2</td><td>2</td></tr><tr><td>D</td><td>4</td><td>5</td><td>4</td></tr></tbody></table><p>2、课后作业P128：30。</p><p>3、某系统有三类非剥夺性资源，其中A类资源共有2个、B类资源共有2个、C类共有3个；若有三个进程P1、P2、P3，它们对资源的占用和请求情况如下表所示。</p><table><thead><tr><th>进程</th><th>资源占用情况</th><th>资源请求情况</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>A</td><td>B</td><td>C</td><td>A</td><td>B</td><td>C</td><td></td></tr><tr><td>P1</td><td>1</td><td></td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>P2</td><td></td><td></td><td>2</td><td></td><td>1</td><td></td></tr><tr><td>P3</td><td></td><td>2</td><td></td><td>2</td><td></td><td>1</td></tr></tbody></table><p>请用死锁定理解释该状态是否发生了死锁？(要给出过程)</p><h1 id="阶段测试2（第三章）"><a href="#阶段测试2（第三章）" class="headerlink" title="阶段测试2（第三章）"></a>阶段测试2（第三章）</h1><p>一、判断题</p><p>1、先来先服务（FCFS）算法是一种简单的调度算法，但其效率比较高。（   ×  ）</p><p>2、FCFS调度算法对短作业有利。（      ×     ）</p><p>3、时间片的大小对轮转法（RR）的性能有很大的影响，时间片太短，会导致系统开销大大增加。（      √     ）</p><p>4、进程申请CPU得不到满足时, 其状态变为等待态。                      （    ×    ）</p><p>5、系统处于不安全状态必然导致系统死锁。                              （    ×    ）</p><p>二、选择题</p><p>1、在进行作业调度时，要想兼顾作业等待时间和作业执行时间，应选取          。</p><p>A.轮转法      B.先进先出调度算法      C.响应比高优先算法      D.短作业优先调度</p><p>2、规定进程必须一次性地申请其在整个执行过程中所需要的全部资源，破坏了                 条件，保证死锁不会发生。</p><p>环路等待 B. 不剥夺        C. 互斥        D. 请求保持</p><p>3、用P、V操作管理临界区时，信号量的初值应定义为          。</p><p>A．—1            B．0              C．1               D．2</p><p>4、死锁定理用于                                。</p><p>A.死锁预防    B.死锁解除    C.死锁避免    D.死锁检测</p><p>5、某系统正在执行三个进程P1、P2和P3，各进程的计算(CPU)时间和I/O时间比例如下表所列：为提高系统资源利用率，合理的进程优先级设置应为          。</p><table><thead><tr><th>进程</th><th>计算时间</th><th>I/O时间</th></tr></thead><tbody><tr><td>P1</td><td>90%</td><td>10%</td></tr><tr><td>P2</td><td>50%</td><td>50%</td></tr><tr><td>P3</td><td>15%</td><td>85%</td></tr></tbody></table><p>A．P1＞P2＞P3     B．P3＞P2＞P1      C．P2＞P1=P3      D．P1＞P2=P3</p><p>三、填空题</p><p>1、在响应比最高者优先的作业调度算法中，当各个作业等待时间相同时，     要求服务时间短     的作业将得到优先调度；当各个作业要求运行的时间相同时，      等待时间长      的作业得到优先调度。</p><p>2、分时系统采用的调度方法是    轮转调度算法        。在分时系统中，当用户数目为100时，为保证响应时间不超过2秒，此时时间片最大应为      0.02        。</p><p>3、有三个同时到达的作业J1，J2和J3，它们的执行时间分别是T1，T2和T3，且T1&lt;T2&lt;T3。系统按单道方式运行且采用短作业优先算法，则平均周转时间是   (3T1+2T2+T3)/3             。</p><p>4、作业进入系统到运行结束，可能要经历作业调度,进程调度 、中级调度 三级调度。</p><p>5、在处理死锁问题的方法中，银行家算法属于  _避免死锁<strong>的方法；资源的按序请求摒弃了产生死锁的</strong>循环等待    条件。</p><p>6、某系统中有3个并发进程，分别需要某类资源2、3、3个，试问该类资源最少应配备<strong><em>5</em></strong>个，使它们一定不会发生死锁。</p><p>四、综合应用题</p><p>1、设有四道作业，它们的提交时间及执行时间由下表给出:</p><p>作业号 提交时间 执行时   间   优先级</p><p>1        8.5       1.0     2</p><p>2        9.2       1.6     4</p><p>3        9.4       0.5     1</p><p>4        9.8       2.0     3</p><p>试计算在单道程序环境下，采用先来先服务调度算法（4分）、最短作业优先调度算法（8分）和高优先级优先调度算法（8分）时的平均周转时间 (时间单位:小时，以十进制进行计算；要求写出计算过程)。</p><p>2、设系统中有3种类型的资源（A，B，C）和5个进程P1，P2，P3，P4，P5。A资源的总数为17，B资源的总数为5，C资源的总数为20。在To时刻的系统状态见下表所示。系统采用银行家算法实施死锁避免策略。</p><p>① To时刻是否为安全状态？若是，请给出安全序列。（7分）</p><p>② 在To时刻,若进程P2请求资源（0，3，4），是否能实现资源分配？为什么？（3分）</p><p>③ 在②的基础上，若进程P3请求资源（2，0，1），是否能实施资源分配？为什么？（10分）</p><p>（请给出必要过程）</p><table><thead><tr><th></th><th>Allocation</th><th>Need</th><th>Available</th></tr></thead><tbody><tr><td>P1   P2   P3   P4   P5</td><td>2      1       2   4      0       2   2      0       4   4      0       5   3      1       4</td><td>3      4       7   1      3       4   2      2       1   0      0       6   1      1       0</td><td></td></tr></tbody></table><h1 id="作业4（第四章）"><a href="#作业4（第四章）" class="headerlink" title="作业4（第四章）"></a>作业4（第四章）</h1><p>一、选择填空题</p><p>1、在存储管理中，采用覆盖与交换技术的目的是            。</p><p>A. 节省存储空间                  B. 物理上扩充主存容量</p><p>C. 提高CPU利用率                   D. 实现主存共享</p><p>覆盖和交换是虚拟上扩充内存的技术。</p><p>2、动态重定位技术依赖于            。</p><p>A. 重定位装入程序             B. 重定位寄存器</p><p>C. 地址机构                      D. 目标程序</p><p>3、在固定分区分配中,每个分区的大小是            .</p><p>A.相同   B.随作业长度变化    C.可以不同但预先固定   D.可以不同但根据作业长度固定</p><p>4、在连续存储管理方式中，可重定位分区管理采用紧凑技术的目的是<strong><strong>____</strong></strong>。</p><p>A.增加主存容量    B. 缩短访问周期    C. 集中空闲区   D.加速地址转换</p><p>5、分区管理中采用”最佳适应”分配算法时,宜把空闲区按            次序登记在空闲区表中.</p><p>A.长度递增    B.长度递减    C.地址递增    D.地址递减</p><p>6、若一个系统采用分页存储管理方式，当一个进程处于执行态时，该进程的页表始址和页表长度信息将被送至           。</p><p>A.PCB    B. 物理地址寄存器     C. 页表寄存器       D. 重定位寄存器</p><p>7、采用段式存储管理的系统中,若地址用24位表示,其中8位表示段号,则允许每段的最大长度是＿＿＿.</p><p>  A.2的24次方    B.2的16次方    C.2的8次方    D.2的32次方</p><p>8、首次适应算法的空闲区是<strong>____</strong>.</p><p>A.按地址递增顺序连在一起    B.始端指针表指向最大空闲区</p><p>C.按大小递增顺序连在一起    D.寻找从最大空闲区开始</p><p>9、在分页地址环境下,程序员编制的程序,其地址空间是连续的，分页是由<strong>____</strong>完成的。</p><p>A.程序员     B.编译地址     C.用户     D.系统</p><p>10、在段页式存储管理系统中，内存等分成<strong>_ A.块___</strong>，程序按逻辑模块划分成若干_   D. 段 ___</p><p>A.块      B. 基块     C. 分区       D. 段     E. 页号       F. 段长</p><p>11、某段表的内容表示如下:</p><table><thead><tr><th>段号                      段首址                       段长度</th></tr></thead><tbody><tr><td>0                         120K                        40K   1                         760K                        30K   2                         480K                        20K   3                         370K                        20K</td></tr></tbody></table><p> 一逻辑地址为 (2，154) , 它对应的物理地址为<strong>_____</strong>.</p><p>A.120K+2    B. 480K+154    C. 30K+154            D. 2+480K</p><p>12、如果一个程序为多个进程所共享, 那么该程序的代码在执行的过程中不能被修改, 即程序应该是<strong>_____</strong>.</p><p>A.可执行码     B. 可重入码p160     C.可改变码       D.可再现码</p><p><strong>二、</strong> <strong>填空题</strong></p><p>\1. 将作业地址空间中的逻辑地址转换为贮存中的物理地址的过程为_ 重定位_.</p><p>\2. 在页式和段式管理中, 指令的地址结构形式分别为__       页号__            和<strong>页内地址（位移量）<em>、</em></strong>段号<strong>__</strong>和<strong><strong>段内地址__</strong></strong>。</p><p>\3. 段表表目的主要内容包括<strong><strong>起始地址___</strong></strong>和<strong><strong><em>段的长度_</em></strong></strong>.</p><p>4．页表表目的主要内容包括<strong><em>页号____</em></strong>、<strong><strong>块号_</strong></strong>.  </p><p>5．主存中一系列物理存储单元的集合称为<strong><strong>存储空间___</strong></strong>. </p><p>6．静态重定位在<strong>进程装入_</strong>时进行；而动态重定位在<strong>运行</strong>时进行。</p><p>7．在段页式存储管理系统中，每道程序都有一个<strong><em>段</em>表和一组</strong>页__表。</p><p><strong>三、简答题</strong></p><p>第四章课后P162: 11、14、19、24、26</p><p>没有快表的情况下，基本分页、基本分段、基本段页式存储管理，要访问一个数据需要访问内存的次数？2   2   3</p><p><strong>四、分析题</strong></p><p>1、某系统采用页式存储管理策略，拥有逻辑空间32页，每页为2KB，拥有物理空间1MB。</p><p>（1）写出逻辑地址的格式。</p><p>（2）若不考虑访问权限等，进程的页表有多少项？每项至少有多少位？</p><p>（3）如果物理空间减少一半，页表结构应相应作怎样的改变？</p><p>​                                                  </p><p>2、某程序在逻辑地址100处有一条取数指令LOAD 1,200，而200单元存放数据2500，设程序分配到内存起始地址为5000的单元。要求分别用图表示出如下三种地址变换过程：</p><p>（1）静态重定位；</p><p>（2）动态重定位；</p><p>（3）页面大小为100个单元，该程序的页面顺序映射到50、51、52、53号物理块上。</p><p>（选择每题3分，填空每空1分，简答每题5分，分析每题10分）</p><h1 id="作业5（第五章）"><a href="#作业5（第五章）" class="headerlink" title="作业5（第五章）"></a>作业5（第五章）</h1><p>一、单选题</p><p>\1. 虚拟存储器的最大容量            。</p><p>A.为内外存容量之和    B. 由计算机的地址结构决定  </p><p> C.是任意的           D. 由作业的地址空间决定</p><p>2.在虚拟存储系统中，若进程在内存中占3块（开始时为空），采用先进先出页面淘汰算法，当执行访问页号序列为1﹑2﹑3﹑4﹑1﹑2﹑5﹑1﹑2﹑3﹑4﹑5﹑6时，将产生            次缺页中断。</p><p>A.7                 B. 8                    C. 9         D. 10</p><p>\3. 实现虚拟存储器的目的是             .</p><p>A.实现存储保护      B.实现程序浮动       C.扩充辅存容量      D.扩充主存容量</p><p>\4. 作业在执行中发生了缺页中断,经操作系统处理后,应让其执行       指令.</p><p>A.被中断的前一条    B.被中断的       C.被中断的后一条        D.启动时的第一条</p><p>5.在请求分页存储管理中，若采用FIFO页面淘汰算法，则当分配的页面数增加时，缺页中断的次数<strong>____</strong>。(在最后一题做完后再作答)</p><p>A．减少         B. 增加           C. 无影响            D. 可能增加也可能减少</p><p>6.虚拟存储管理系统的基础是程序的<strong>____</strong>理论.</p><p>A.局部性       B. 全局性        C. 动态性            D.虚拟性</p><p>\7. 下述<strong>___</strong>页面淘汰算法会产生Belady现象.</p><p>A.先进先出      B. 最近最少使用       C. 最近不经常使用     D. 最佳</p><p><strong>二**</strong>.** <strong>填空题</strong></p><p>1．在虚存管理中，虚拟地址空间是指逻辑地址空间，实地址空间是指物理地址空间；前者的大小只受_  机器的地址长度  限制，而后者的大小受_物理内存大小。</p><p>2．若选用的<strong>置换_</strong>算法不合适，可能会出现抖动现象。</p><p>3．在页式存储管理系统中，常用的页面淘汰算法有：<strong>最佳置换算法_</strong>，选择淘汰不再使用或最远的将来才使用的页；<strong>先进先出页面置换算法___</strong>，选择淘汰在主存驻留时间最长的页；<strong><em>最近最久未使用置换算法_</em></strong>选择淘汰离当前时刻最近的一段时间内使用代最少的页。</p><p>4．在虚拟段式存储管理系统中，若逻辑地址的段内地质大于段表中该段的段长，则发生<strong>地址越界中断_</strong>.</p><p><strong>三、简答题：</strong></p><p>P189: 3、6、7、14、15</p><p>1、什么是抖动？（P182）</p><p>2、请求分段存储管理方式下，在地址变换过程中，可能出现哪些中断？分别在什么情况下发生？</p><p>3、在分段系统中，为确保段信息安全，采取的保护措施有哪些？</p><p><strong>四、综合题：</strong></p><p>1、一个进程已经分配到4个物理块，每一页的装入时间、最后访问时间、访问位A、修改位M如下表所示（所有数字为十进制）：</p><p>（1）若页面大小为1024B，则逻辑地址3125对应的物理地址是什么？</p><p>（2）当进程访问4号页面时，产生缺页中断。请分别用FIFO、LRU和改进型Clock置换算法选择淘汰页面；要求给出其页号，并说明作出该决定的原因。</p><table><thead><tr><th>页号</th><th>块号</th><th>装入时间</th><th>最后访问时间</th><th>访问位A</th><th>修改位M</th></tr></thead><tbody><tr><td>2</td><td>7</td><td>60</td><td>279</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>130</td><td>290</td><td>0</td><td>0</td></tr><tr><td>0</td><td>4</td><td>26</td><td>160</td><td>1</td><td>0</td></tr><tr><td>3</td><td>2</td><td>20</td><td>200</td><td>1</td><td>1</td></tr></tbody></table><p>2、在一个请求分页存储管理系统中，一个作业的页面走向为4，3，2，1，4，3，5，4，3，2，1，5，当分配给该作业的物理块数分别为3，4时，试计算采用下述页面淘汰算法时的缺页率（假设开始执行时主存中没有页面），并比较所得结果。</p><p>(1)最佳置换淘汰算法</p><p>(2)先进先出淘汰算法</p><p>(3)最近最久未使用淘汰算法</p><p>(一题每空3分，二题每空2分，三题每题5分，四（1）10分4/2/2/2，四（2）13分4/4/5)</p><h1 id="阶段测试三（）"><a href="#阶段测试三（）" class="headerlink" title="阶段测试三（）"></a>阶段测试三（）</h1><p>一、判断题</p><p>1、动态地址映射是指在程序装入主存时，将逻辑地址转换为物理地址。      （   ×  ）</p><p>2、在没有快表的情况下，基本段页式系统每访问一次数据，要访问3次内存。     （   √   ）</p><p>3、采用动态重定位技术的系统，目标程序可以不经任何改动，而装入物理内存。   （   √   ）</p><p>4、在虚存存储器系统中, 只要磁盘空间无限大, 作业就能拥有任意大的编址空间。 （    ×  ）</p><p>5、请求分段存储管理中，分段的尺寸由系统决定。                             （   ×   ）</p><p>6、请求段页式系统是以页为单位管理用户的虚空间，以段为单位管理内存空间。   （   ×   ）</p><p>7、虚拟存储器容量的扩大是以牺牲CPU时间以及内、外存交换时间为代价的。     （   √   ）</p><p>8、将用户源程序变成可在内存中执行的程序，要经过的步骤是：链接-&gt;编译-&gt;装入。（   ×   ）</p><p>二、填空题</p><p>1、文件系统中，位示图的主要功能是                    。</p><p>   A.实现按名存取  B.文件目录查找     C.管理文件存储器的空闲空间   D.允许重名</p><p>2、为了解决“命名冲突”问题，通常在文件系统中采用                  。</p><p>   A.约定的方法     B.路径     C.多级目录     D.索引</p><p>3、下列选项中，属于多级页表优点的是<strong>_____</strong>。</p><p>   A.加快地址变换速度                   B. 减少页表项所占字节数</p><p>   C.减少页表所占的连续内存空间        D. 减少缺页中断次数</p><p>4、不适当的页面置换算法可能会导致进程发生“抖动”，抖动是指<strong><strong>____</strong></strong>。</p><p>   A.使用机器时，造成屏幕闪烁的现象</p><p>   B.刚被调出的页面又立即被装入所形成的频繁装入/调出的现象　</p><p>   C.系统盘有问题，造成系统不稳定的现象</p><p>   D.由于主存分配不当，偶然造成主存不够的现象</p><p>三、综合题</p><p>1、在一个请求分段系统中，作业的虚地址为24位，其中高8位是段号，低16位为段内相对地址。试问：</p><p>①一个作业最多可以有多少段？</p><p>​    28 =256段</p><p>②每段的最大长度为多少字节？</p><p>216=64KB</p><p>③系统中一个作业的段表如右图，试计算逻辑地址[0，600]、[1，80]、[3，60]的主存地址。当无法进行地址变换时，应说明产生何种中断。</p><table><thead><tr><th>段号</th><th>段长</th><th>主存起始地址</th><th>是否在主存</th></tr></thead><tbody><tr><td>0</td><td>600</td><td>2100</td><td>是</td></tr><tr><td>1</td><td>100</td><td></td><td>否</td></tr><tr><td>2</td><td>40</td><td>3000</td><td>是</td></tr><tr><td>3</td><td>80</td><td>4000</td><td>是</td></tr></tbody></table><p> 2、请求分页管理系统中，假设某进程的页表内容如下表所示（H代表十六进制）。</p><p>页号   页框号    存在位</p><p>0       101H       1</p><p>1       –         0</p><p>2       254H       1</p><p>页面大小为4KB，一次内存的访问时间是100ns，一次快表的访问时间是10ns，处理一次缺页的平均时间为108ns（已含更新快表和页表的时间），进程所占内存块固定为2块，采用最近最少使用置换算法（LRU）和局部淘汰策略。假设①快表初始为空；②地址转换时先访问快表，若快表未命中，再访问页表（忽略访问页表之后的快表更新时间）；③存在位为0表示页面不在内存，产生缺页中断，缺页中断处理后，返回到产生缺页中断的指令处重新执行。设有虚地址访问序列2362H、1565H、25A5H，请问：</p><p>（1）依次访问上述三个虚地址，各需多少时间？给出计算过程。</p><p>（2）基于上述访问序列，虚地址1565H的物理地址是多少？请说明理由。</p><h1 id="作业6"><a href="#作业6" class="headerlink" title="作业6"></a>作业6</h1><p>一、选择题</p><p>1、对操作系统的文件系统而言，一个源程序、一批数据、一篇文章或一张图片等都可以被称为文件，只要它是<strong><strong>____</strong></strong>。</p><p>A．连续分布在一片磁盘区域中的信息集合</p><p>B．采用链接方式连接起来的多个磁盘块组成的信息集合</p><p>C．逻辑上具有完整意义的信息集合</p><p>D．属于同一个用户的一个信息集合</p><p>2、通过<strong><strong>____</strong></strong>技术，可以把一台物理I/O设备虚拟为多台逻辑I/O设备。</p><p>​    A.多道程序   B. 可重入码         C. 紧凑      D. Spooling</p><p>3、使用绝对路径名访问文件是从<strong><strong>____</strong></strong>开始按目录结构访问某个文件。</p><p>​    A.当前目录   B. 用户主目录    C. 根目录             D. 父目录</p><p>4、在计算机系统中引入通道结构后仍然无法做到的是<strong><strong>____</strong></strong>。</p><p>  A．主存储器和外围设备之间传送信息的操作直接通过通道进行</p><p>  B．通道完全独立运行，无需由CPU 启动</p><p>  C．外围设备可以和 CPU 并行工作</p><p>  D．各通道上的外围设备可以并行工作</p><p>5、程序员利用系统调用打开I/O设备时，通常使用的设备标识是<strong><strong>____</strong></strong>。</p><p>​    A.逻辑设备名     B. 物理设备名       C. 主设备号         D. 从设备号</p><p>6、在磁盘调度算法中，磁头只能单向移动，优先响应与当前磁头移动方向一致、且距离最近的进程的算法为           算法。</p><p>   A.FIFO             B. SCAN             C. CSCAN              D. FSCAN</p><p>7、为了允许不同用户的文件具有相同的文件名，通常在文件系统中采用<strong><strong>____</strong></strong>。</p><p>​    A.重名翻译      B. 多级目录         C. 约定               D. 文件名</p><p>8、在磁盘调度算法中，有可能使I/O请求无限期等待的调度算法是(        )。</p><p>​    A.FCFS          B.SSTF　           C.SCAN            D.CSCAN</p><p>二、简答题</p><p>课本p236： 24、30、31</p><p>（15、16、17）回答：有哪几种I/O控制方式?I/O控制方式发展的目标(宗旨/驱动力)是什么?各自的特点？字符设备、块设备分别用什么样的控制方式?</p><p>（4、18）回答：设备无关性(设备独立性)的含义是什么?为什么要引入设备独立性?如何实现?</p><p>假设磁盘有200个磁道，磁盘请求队列中是一些随机请求，它们按照到达的次序分别处于98、183、37、122、14、124、65、67号磁道上，当前磁头在53号磁道上，并向磁道号减小的方向上移动。</p><p>(1)请给出按电梯（SCAN）算法进行磁盘调度时满足请求的次序。</p><p>(2)计算平均寻道长度。</p><p>课本P266： 4、16</p><p>课本296： 2、3、7、9、14、15</p><p>页面大小为4KB，一次内存的访问时间是100ns，一次快表的访问时间是10ns，处理一次缺页的平均时间为108ns（已含更新快表和页表的时间），进程所占内存块固定为2块，采用最近最少使用置换算法（LRU）和局部淘汰策略。假设①快表初始为空；②地址转换时先访问快表，若快表未命中，再访问页表（忽略访问页表之后的快表更新时间）；③存在位为0表示页面不在内存，产生缺页中断，缺页中断处理后，返回到产生缺页中断的指令处重新执行。设有虚地址访问序列2362H、1565H、25A5H，请问：</p><p>（1）依次访问上述三个虚地址，各需多少时间？给出计算过程。</p><p>（2）基于上述访问序列，虚地址1565H的物理地址是多少？请说明理由。</p>]]></content>
      
      
      <categories>
          
          <category> Review </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2019/06/13/computer-internet/"/>
      <url>/2019/06/13/computer-internet/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="前言：题型解析"><a href="#前言：题型解析" class="headerlink" title="前言：题型解析"></a>前言：题型解析</h2><table><thead><tr><th>题型</th><th>题数</th><th>分值占比</th></tr></thead><tbody><tr><td>选择题</td><td>16</td><td>24</td></tr><tr><td>填空题</td><td>10</td><td>10</td></tr><tr><td>名词解释</td><td>10</td><td>10</td></tr><tr><td>简答题</td><td>3</td><td>24</td></tr><tr><td>计算题</td><td>2</td><td>22</td></tr><tr><td>应用题</td><td>1</td><td>10</td></tr></tbody></table><h2 id="第一章-概述部分"><a href="#第一章-概述部分" class="headerlink" title="第一章 概述部分"></a>第一章 概述部分</h2><ol><li><p>三网：电信网络、有线电视网络、计算机网络 p1</p></li><li><p>互联网的两个基本特点：连通性和共享 p2</p></li><li><p>所谓的共享即资源共享：可以是信息共享、软件共享也可以是硬件共享 p3</p></li><li><p>ARPANET：Internet的前身，美国。p5</p></li><li><p>ISP：（Internet Service Provider）互联网服务提供者。 p6</p></li><li><p>RFC：（Request For Comments）互联网标准发布的文档形式。 p9</p></li><li><p>互联网的组成：边缘部分、核心部分。 p10 小题</p></li><li><p>通信方式(边缘部分)：客户-服务器方式（C/S方式）、对等方式（P2P方式）。 p11</p></li><li><p>交换技术(核心部分)：电路交换、报文交换、分组交换 p17 小题</p></li><li><p>计算机网络的性能指标：速率、带宽、吞吐量、时延 p21</p></li><li><p>带宽：单位，比特每秒（bit/s） p21</p></li><li><p>时延： p22</p><ul><li>发送时延：</li></ul><p>$$<br>发送时延=数据帧长度（bit）/发送速率（bit/s）<br>$$</p><ul><li>传播时延：</li></ul><p>$$<br>传播时延=信道长度（m）/电磁波在信道上的传播速率（m/s）<br>$$</p></li></ol><pre><code>- 处理时延：主机或路由器在收到分组时的处理时间- 排队时延：分组在经过网络传输时，进图路由器后在队列中的排队时间- 总时延：$$总时延=发送时延+传播时延+处理时延+排队时延$$</code></pre><ol start="13"><li><p>OSI/RM：（Open System Interconnection Reference Model）开放系统互连基本参考模型 p27</p></li><li><p>协议：p29 简答，填空</p><ul><li>三要素：语法、语义、同步 </li></ul></li><li><p>OSI和TCP/IP的体系结构 p31</p></li></ol><p><img src="https://zsy0216.github.io/image/hexo/computer-networks/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="计算机网络体系结构"></p><ol start="16"><li><p>PDU：（Protocol Data Unit）协议数据单元，指对等层次之间传送的数据单位。  p33</p></li><li><p>各层对应数据单元名称：p31</p><ul><li>应用层：报文/数据/消息</li><li>运输层：报文段</li><li>网络层：分组/数据报</li><li>数据链路层：帧</li><li>物理层：比特</li></ul></li><li><p>协议和服务的区别与联系  p34</p><ul><li><p>区别：协议是控制两个对等实体（或多个实体）进行通信的规则的集合，是水平的。</p><pre><code>服务是下层通过层间接口向上层提供的功能，是垂直的。</code></pre></li><li><p>联系：协议的实现保证了能够向上一层提供服务，要实现本层协议还需使用下层提供的服务。</p></li></ul></li><li></li></ol><h2 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h2><ol><li><p>特性：机械特性、电气特性、功能特性、过程特性   p41</p></li><li><p>信号：模拟信号、数字信号。  p43 小题</p></li><li><p>通信方式：单工通信、半双工通信、全双工通信。  p43</p></li><li><p>信道的极限容量：  p45</p><ul><li><p>奈氏准则：在任何信道中，码元传输的速率是有上限的，传输速率超过此上限，就会出现严重的码间串扰的问题，使接收端对码元的判决（即识别）成为不可能。</p></li><li><p>香农公式：信道的带宽或信道中的信噪比越大，信息的极限传输速率就越高。</p><p>​        C=W log<sub>2</sub>(1+S/N)（bit/s）</p><p>C：信道的极限信息传输速率</p><p>W：信道的带宽（以Hz为单位）</p><p>S：信道内所传信号的平均功率</p><p>N：信道内部的高斯噪声功率</p></li></ul></li><li><p>传输介质：p47</p><p>抗干扰能力强的应选屏蔽双绞线和光纤    </p><ul><li>双绞线：p47<ul><li>STP：屏蔽双绞线</li><li>UTP：非屏蔽双绞线</li></ul></li><li>同轴电缆：p48</li><li>光缆：单模光纤、多模光纤  p49</li></ul><table><thead><tr><th>类别</th><th>传输质量</th><th>传输距离</th><th>价格</th><th>颜色</th></tr></thead><tbody><tr><td>多模光纤</td><td>低</td><td>近</td><td>便宜</td><td>橙</td></tr><tr><td>单模光纤</td><td>高</td><td>远</td><td>贵</td><td>黄</td></tr></tbody></table></li><li><p>ISM：Industrial、Scientific、Medical(工业、科学、医药)，即所谓的工、科、医频段。  p53</p></li><li><p>信道复用技术：p53</p><ul><li>FDM：频分复用</li><li>TDM：时分复用</li><li>WDM：波分复用</li><li>CDM：码分复用</li></ul></li><li><p>多路复用的速率体系：北美和日本的T1速率（1.544Mbit/s），欧洲的E1速率（2.048Mbit/s）互不兼容  p59</p></li><li><p>宽带接入技术：p60</p><ul><li>ADSL技术：非对称数字用户线</li><li>HFC网：光纤同轴混合网</li><li>FTTx技术：光纤到x</li></ul></li><li></li></ol><h2 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h2><ol><li><p>信道类型：点对点信道，广播信道。  p69</p></li><li><p>三个基本问题：封装成帧，透明传输，差错检测。  p71</p></li><li><p>CRC：循环冗余检验。  p74</p></li><li><p>差错处理：检错（CRC），纠错（海明码）.  p75</p></li><li><p>PPP：point-to-point protocol . 点对点协议。  p76</p></li><li><p>PPP的组成： p78</p><ul><li>一个将IP数据报封装到串行链路的方法。</li><li>一个用来建立、配置和测试数据链路连接的链路控制协议LCP。</li><li>一套网络控制协议NCP。</li></ul></li><li><p>零比特填充：如何填/删？ p80</p><p>​    在发送端，先扫描整个信息字段（通常用硬件实现，但也可用软件实现，只是会慢些）。只要发现有5个连续1，则立即填入一个0.因此经过这种零比特填充的数据，就可以保证在信息字段中不会出现6个连续1。（六个连续的1表示一个帧的开始或结束）</p><p>​    接收端在收到一个帧时，先找到标志字段F以确定一个帧的边界，接着再用硬件对其中的比特流进行扫描。每当发现5个连续1时，就把这5个连续1后的一个0删除，以还原成原来的信息比特流。这样就保证了透明传输：在所传送的数据比特流中可以传送任意组合的比特流，而不会引起对帧边界的错误判断。</p></li><li><p>拓扑类型：星形网，环形网，总线网。  p82</p></li><li><p>CSMA/CD：以太网协议。  p85</p></li><li><p>以太网帧：p96. p97.</p><ul><li>MAC帧格式：</li></ul><p><img src="https://zsy0216.github.io/image/hexo/computer-networks/MAC%E5%B8%A7%E6%A0%BC%E5%BC%8F.png" alt="MAC帧格式"></p><ul><li>帧尾(FCS)作用：校验</li><li>前同步码（前导码）作用：实现位同步</li></ul></li><li><p>STP：生成树协议   p101</p><p>作用：防止链路层环路</p></li><li><p>VLAN：虚拟局域网。   p101</p><p>作用：限制了接收广播信息的计算机数，使得网络不会因传播过多的广播信息（即所谓的“广播风暴”）而引起性能恶化。</p></li><li></li></ol><h2 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h2><ol><li><p>中间设备：  p116</p><ul><li><strong>物理层</strong>使用的中间设备叫做<strong>转发器</strong>。升级版为集线器</li><li><strong>数据链路层</strong>：<strong>网桥或桥接器</strong>。（交换机）</li><li><strong>网络层</strong>：<strong>路由器</strong></li><li><strong>网络层以上</strong>：<strong>网关</strong></li></ul></li><li><p>IP地址：p119</p><table><thead><tr><th>类别</th><th>网络号</th><th>主机号</th><th>最大网络数</th><th>IP地址范围</th><th>单个网段最大主机数</th></tr></thead><tbody><tr><td>A</td><td>8</td><td>24</td><td>126(2<sup>7</sup>-2)</td><td>1.0.0.1-127.255.255.254</td><td>16777214</td></tr><tr><td>B</td><td>16</td><td>16</td><td>16384(2<sup>14</sup>)</td><td>128.0.0.0-191.255.255.255</td><td>65534</td></tr><tr><td>C</td><td>24</td><td>8</td><td>2097152(2<sup>21</sup>)</td><td>192.0.0.0-223.255.255.255</td><td>254</td></tr></tbody></table></li><li><p><strong>IP地址</strong> 简答题：p119???</p><ul><li>IP地址是否合法？</li><li>广播地址？网络号？主机地址？</li></ul></li><li><p>ARP：地址解析协议  p124</p><p>作用：地址映射。通过IP地址找出其对应的硬件地址。</p></li><li><p>IP数据报的格式：  p128</p><p>生存时间字段：防止分组在网络中无限循环。</p></li><li><p>子网掩码：  p137</p><ul><li><p>默认子网掩码：</p><ul><li>A类：255.0.0.0</li><li>B类：255.255.0.0</li><li>C类：255.255.255.0</li></ul></li><li><p>问题：前缀为/30，包含多少IP，多少主机IP</p><p>IP数：2<sup>32-30</sup> = 2<sup>2 </sup> = 4个</p><p>​    IP地址位数为32位，除去前缀还有2位，可分配2的平方个IP</p><p>主机数：4 - 2 = 2 个</p><p>​    IP地址中全0和全1为特殊地址，全0表示本主机，全1表示该网络上的所有主机</p></li></ul></li><li><p>VLSM：变长子网掩码。 p142</p></li><li><p>CIDR：无分类域间路由选择。  p142</p></li><li><p>最长前缀匹配：  p145</p><p>在查找路由表时可能会得到不止一个匹配结果，应当从匹配结果中选择具有最长网络前缀的路由。</p></li><li><p>ICMP：网际控制报文协议。  p149</p><ul><li>PING：<ul><li>作用：用来测试两台主机之间的连通性</li><li>原理：</li></ul></li><li>traceroute：<ul><li>作用：跟踪一个分组从源点到终点的路径。</li><li>原理：TTL，生存时间</li></ul></li></ul></li><li><p>路由协议： p152</p><ul><li>分类：???</li></ul></li><li><p>内部网关协议RIP与OSPF对比：  p153???</p></li><li><p>RIP的特点： p154</p></li><li><p>仅和<strong>相邻路由器</strong>交换信息；who</p></li><li><p>路由器交换的信息是<strong>当前本路由器所知道的全部信息，即自己现在的路由表</strong>；what</p></li><li><p>按<strong>固定的时间间隔</strong>交换路由信息；when</p></li><li><p>IPV6：地址长度128比特   p171</p></li><li><p>私有（专有）地址范围：  p185</p></li></ol><table><thead><tr><th>类别</th><th>范围</th></tr></thead><tbody><tr><td>A类</td><td>10.0.0.0-10.255.255.255（或10.0.0.0/8，又称为24位块）</td></tr><tr><td>B类</td><td>172.16.0.0~172.31.255.255（或172.16.0.0/12，又称为20位块）</td></tr><tr><td>C类</td><td>192.168.0.0~192.168.255.255（或192.168.0.0/16，又称为16位块）</td></tr></tbody></table><ol start="16"><li><p>NAT：网络地址转换。  p187</p><p>DHCP：动态主机配置协议，分配ip。</p><p>NAT和DHCP：家用路由器，应用题</p></li><li><p>课后题：p197 199</p></li></ol><blockquote><p><strong>4-20</strong>  设某路由器建立了如下路由表</p><table><thead><tr><th>目的网络</th><th>子网掩码</th><th>下一跳</th></tr></thead><tbody><tr><td>128.96.39.0</td><td>255.255.255.128</td><td>接口m0</td></tr><tr><td>128.96.39.128</td><td>255.255.255.128</td><td>接口m1</td></tr><tr><td>128.96.40.0</td><td>255.255.255.128</td><td>R2</td></tr><tr><td>128.4.153.0</td><td>255.255.255.192</td><td>R3</td></tr><tr><td>* （默认）</td><td>-</td><td>R4</td></tr></tbody></table><p>现共收到5个分组，其目的地址分别为：</p><p>（1）128.96.39.0</p><p>（2）128.96.40.12    </p><p>（3）128.96.40.151</p><p>（4）192.4.153.17</p><p>（5）192.4.153.90</p><p>试分别计算其下一跳</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解：用目的IP地址和路由表中的子网掩码相与，若结果出现在路由表中的目的网络中，则转发相应的下一跳，若没有出现在路由表中的目的网络中，则转发到默认站R4.(1与1相与为1,1与0,0与1,0与0都为0)</span><br><span class="line">十进制转化二进制：除二取余，逆序排列</span><br><span class="line">二进制转化十进制：补齐位数，0或1乘以2的0次方，1次方。。。相加</span><br><span class="line">（1）</span><br></pre></td></tr></table></figure><blockquote><p>​    <strong>4-37</strong>  某单位分配到一个地址块136.23.12.64/26.现在需要进一步划分为4个一样大的字网。试问：</p><p>（1）每个子网的网络前缀有多长？</p><p>（2）每一个子网中有多少个地址？</p><p>（3）每一个子网的地址块是什么？</p><p>（4）每一个子网可分配给主机使用的最小地址和最大地址是什么？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(1)原来网络前缀是26位，需要再增加2位，才能划分4个一样大的子网。因此每个子网的网络前缀是28位</span><br><span class="line">(2)每个子网的地址中有32-28=4位留给主机用，因此共有2的4次方即16个地址（可用的有14个）</span><br><span class="line">(3)地址中的前三个字节分别记为B1,B2,B3则136.23.12.64/26=B1.B2.B3.01000000/26</span><br><span class="line">四个子网的地址块是：</span><br><span class="line">B1.B2.B3.01000000/28=136.23.12.64/28,</span><br><span class="line">B1.B2.B3.01010000/28=136.23.12.80/28,</span><br><span class="line">B1.B2.B3.01100000/28=136.23.12.96/28,</span><br><span class="line">B1.B2.B3.01110000/28=136.23.12.112/28,</span><br><span class="line">(4)136.23.12.64/28,</span><br><span class="line">最小地址：B1.B2.B3.01000001=136.23.12.65,</span><br><span class="line">最大地址：B1.B2.B3.01001110=136.23.12.78,</span><br><span class="line">   136.23.12.80/28,</span><br><span class="line">   最小地址：B1.B2.B3.01010001=136.23.12.81</span><br><span class="line">   最大地址：B1.B2.B3.01011110=136.23.12.94</span><br><span class="line">   136.23.12.96/28,</span><br><span class="line">   最小地址：B1.B2.B3.01100001=136.23.12.97</span><br><span class="line">   最大地址：B1.B2.B3.01101110=136.23.12.110</span><br><span class="line">   136.23.12.112/28,</span><br><span class="line">  最小地址：B1.B2.B3.01110001=136.23.12.113</span><br><span class="line">   最大地址：B1.B2.B3.01111110=136.23.12.126</span><br></pre></td></tr></table></figure><blockquote><p><strong>4-41</strong>  假定网络中的路由器B的路由表有如下的项目（这三列分别表示“目的网络”、“距离”和“下一跳路由器”）：</p><table><thead><tr><th>目的网络</th><th>距离</th><th>下一跳路由器</th></tr></thead><tbody><tr><td>N1</td><td>7</td><td>A</td></tr><tr><td>N2</td><td>2</td><td>C</td></tr><tr><td>N6</td><td>8</td><td>F</td></tr><tr><td>N8</td><td>4</td><td>E</td></tr><tr><td>N9</td><td>4</td><td>F</td></tr></tbody></table><p>​        现在B收到从C发来的路由信息（这两列分别表示“目的网络”和“距离”）：</p><table><thead><tr><th>目的网络</th><th>距离</th></tr></thead><tbody><tr><td>N2</td><td>4</td></tr><tr><td>N3</td><td>8</td></tr><tr><td>N6</td><td>4</td></tr><tr><td>N8</td><td>3</td></tr><tr><td>N9</td><td>5</td></tr></tbody></table><p>​    试求出路由器B更新后的路由表（详细说明每一个步骤）。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">先把收到的路由信息中的距离加一：</span><br><span class="line">N25</span><br><span class="line">N39</span><br><span class="line">N65</span><br><span class="line">N84</span><br><span class="line">N96</span><br><span class="line">路由器B更新后的路由表如下：</span><br><span class="line">N17A无新信息，不改变</span><br><span class="line">N25C相同的下一跳，更新</span><br><span class="line">N39C新的项目，添加进来</span><br><span class="line">N65C不同的下一跳，距离更短，更新</span><br><span class="line">N84E不同的下一跳，距离一样，不改变</span><br><span class="line">N94F不同的下一跳，距离更大，不改变</span><br></pre></td></tr></table></figure><h2 id="第五章-运输层"><a href="#第五章-运输层" class="headerlink" title="第五章 运输层"></a>第五章 运输层</h2><ol><li>网络寻址实现： p203</li></ol><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>运输层</td><td>port</td><td>端到端</td></tr><tr><td>网络层</td><td>IP</td><td>主机之间</td></tr><tr><td>数据链路层</td><td>MAC</td><td>相邻两个节点</td></tr></tbody></table><ol start="2"><li>TCP、UDP对比？  p207</li></ol><table><thead><tr><th>对比</th><th>UDP</th><th>TCP</th></tr></thead><tbody><tr><td><strong>协议名称</strong></td><td>用户数据报协议</td><td>传输控制协议</td></tr><tr><td><strong>是否面向连接</strong></td><td>无连接</td><td>面向连接</td></tr><tr><td><strong>是否支持广播或多播</strong></td><td>支持一对一，一对多，多对一和多对多交互通信</td><td>每一条TCP连接只能有两个端点，只能是点对点（一对一）的</td></tr><tr><td><strong>是否提供可靠传输服务</strong></td><td>尽最大努力交付（不可靠交付）</td><td>可靠交付</td></tr><tr><td><strong>对应用层报文的处理</strong></td><td>面向报文</td><td>面向字节流</td></tr><tr><td><strong>流量控制和拥塞控制</strong></td><td>不使用流量控制和拥塞控制</td><td>使用流量控制和拥塞服务</td></tr><tr><td><strong>首部开销</strong></td><td>首部开销小，仅8字节</td><td>首部最小20字节，最大60字节</td></tr></tbody></table><ol start="3"><li>port：端口，socket：套接字  p207</li><li>熟知端口号或系统端口号：0~1023  p207</li><li>UDP报文格式：p217</li></ol><p><img src="https://zsy0216.github.io/image/hexo/computer-networks/UDP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png" alt="img"></p><ol start="3"><li>TCP报文格式</li></ol><p><img src="https://zsy0216.github.io/image/hexo/computer-networks/TCP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png" alt="img"></p><ol start="3"><li>相同字段：源端口、目的端口、校验和  p217</li><li>TCP的四个计时器：重传计时器、坚持计时器、保活计时器、时间等待计时器。  p225</li><li>TCP的流量控制：滑动窗口技术。  p227</li><li>TCP的拥塞控制方法：慢开始、拥塞避免、快重传、快恢复。  p232</li><li>TCP，建立连接：3次握手，释放连接：4次握手。  p238  非大题</li><li>课后题：p247 248</li></ol><h2 id="第六章-应用层"><a href="#第六章-应用层" class="headerlink" title="第六章 应用层"></a>第六章 应用层</h2><ol><li>DNS：域名系统   p252</li><li>WWW：万维网  p264</li><li>URL：统一资源定位符  p266</li><li>HTTP：超文本传输协议  p267</li><li>HTML：超文本标记语言  p274</li><li>电子邮件协议：  p284<ul><li>SMTP：简单邮件传送协议</li><li>POP：邮局协议</li></ul></li><li>DHCP：动态主机配置协议，  p295</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Review </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建博客</title>
      <link href="/2019/05/31/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/05/31/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前提：</p><p>1.新建一个github仓库</p><p>2.安装配置Node.js</p><p>3.安装配置Git</p></blockquote><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><h2 id="步骤1-新建一个github仓库"><a href="#步骤1-新建一个github仓库" class="headerlink" title="步骤1.新建一个github仓库"></a>步骤1.新建一个github仓库</h2><ol><li>打开<a href="https://github.com/" target="_blank" rel="noopener">github网站</a>，（注册）登录账号，<a href="https://github.com/new" target="_blank" rel="noopener">新建一个仓库</a>;</li></ol><p>注：==仓库名称要求，yourname.github.io；==</p><p>​    勾选Initialize this repository with a README；</p><ol start="2"><li>新建完成后打开仓库，点击右侧settings按钮，找到下面的GitHub Pages；</li><li>Source保存为master branch，上面的链接是之后博客访问的链接</li></ol><h2 id="步骤2-安装Node-js"><a href="#步骤2-安装Node-js" class="headerlink" title="步骤2.安装Node.js"></a>步骤2.安装Node.js</h2><ol><li><p>打开<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js官网</a>下载对应操作系统版本及位数的node.js</p></li><li><p>安装完成后可通过以下命令验证是否已配置成功（默认安装已自动配置环境变量）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li></ol><h2 id="步骤3-安装git"><a href="#步骤3-安装git" class="headerlink" title="步骤3.安装git"></a>步骤3.安装git</h2><ol><li><p>打开<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网</a>下载对应操作系统版本及位数的git</p></li><li><p>安装完成后可通过一下命令验证是否配置成功（默认安装已自动配置环境变量,即选择use Git from the Windows Command Prompt）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li><li><p>配置git</p><ol><li><p>鼠标右键打开git bash here(以下命令都是在git bash下执行)</p></li><li><p>设置git的user name和email（第一次使用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "yourname"</span><br><span class="line">git config --global user.email "youremail"</span><br></pre></td></tr></table></figure></li><li><p>配置ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">生成密钥，默认存储路径：C:\User\Administrator\.ssh</span></span><br><span class="line">ssh-keygen -t rsa -C"youremail"</span><br></pre></td></tr></table></figure></li><li><p>在github上添加ssh key.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">步骤1</span></span><br><span class="line">登录github，点击头像下的settings</span><br><span class="line"><span class="meta">#</span><span class="bash">步骤2</span></span><br><span class="line">打开左侧的SSH and GPG keys</span><br><span class="line"><span class="meta">#</span><span class="bash">步骤3</span></span><br><span class="line">点击右侧的new SSH key</span><br><span class="line"><span class="meta">#</span><span class="bash">步骤4</span></span><br><span class="line">Title 自定义</span><br><span class="line">Key输入刚才生成的C:\User\Administrator\.ssh路径下的id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>验证ssh是否添加成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li><p>ssh-key配置失败解决方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">首先，清除所有的key-pair</span><br><span class="line">ssh-add -D</span><br><span class="line">rm -r ~/.ssh</span><br><span class="line">删除你在github中的public-key</span><br><span class="line"></span><br><span class="line">重新生成ssh密钥对</span><br><span class="line">ssh-keygen -t rsa -C "xxx@xxx.com"</span><br><span class="line"></span><br><span class="line">接下来正常操作</span><br><span class="line">在github上添加公钥public-key:</span><br><span class="line">1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板</span><br><span class="line">2、在github上添加公钥时，直接复制即可</span><br><span class="line">3、保存</span><br></pre></td></tr></table></figure></li></ol></li></ol><blockquote><p>小试牛刀</p></blockquote><h1 id="hexo-github设置"><a href="#hexo-github设置" class="headerlink" title="hexo+github设置"></a>hexo+github设置</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol><li><p>找到一个合适的位置创建一个新的文件夹，必须是空的。实例文件夹：D:\Blog</p></li><li><p>打开cmd，进入新建的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d:</span><br><span class="line">cd Blog</span><br></pre></td></tr></table></figure></li><li><p>安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure></li><li><p>验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><ol><li><p>初始化Blog文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li><p>安装必要的组件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>生成目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure></li><li><p>开启hexo服务,预览界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li><li><p>第一次访问</p><p>访问：localhost:4000,可看到加载的页面。</p></li></ol><h2 id="Hexo联系Github"><a href="#Hexo联系Github" class="headerlink" title="Hexo联系Github"></a>Hexo联系Github</h2><p>打开hexo配置文件；D:\Blog\_config.yml</p><p>文件末尾处配置：</p><p>repository:打开github仓库点击Clone or download，复制里面ssh对应的仓库地址；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>之后在cmd下执行下面的命令重新部署即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//安装自动部署工具</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">//更新</span><br><span class="line">hexo g</span><br><span class="line">//部署</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo静态博客主题配置</title>
      <link href="/2019/05/30/blog-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/05/30/blog-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h3><p>主题可参考：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> </p><p>hexo默认主题：Landscape</p><p>示例主题：Next</p><h4 id="下载Next主题"><a href="#下载Next主题" class="headerlink" title="下载Next主题"></a>下载Next主题</h4><ol><li><p>进入Blog所在目录，输入下载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入Blog所在目录</span></span><br><span class="line">d:</span><br><span class="line">cd Blog</span><br><span class="line"><span class="meta">#</span><span class="bash">下载</span></span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><p>启用Next主题</p><p>在Blog文件夹下打开配置文件_config.yml,找到theme字段，将默认的landscape修改为next。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>保存。</p></li><li><p>验证</p><p>命令行窗口输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure><p>浏览器输入：localhost:4000查看界面主题。</p></li></ol><h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><ol><li><p>主题配置文件在：/Blog/themes/next/_config.yml</p></li><li><p>打开主题配置文件，选择next提供的4种子主题,示例启动Mist</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h4><ol><li><p>打开主题配置文件，/Blog/themes/next/_config.yml；</p></li><li><p>找到menu settings</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  schedule:</span> <span class="string">/schedule/</span> <span class="string">||</span> <span class="string">calendar</span></span><br><span class="line"><span class="attr">  sitemap:</span> <span class="string">/sitemap.xml</span> <span class="string">||</span> <span class="string">sitemap</span></span><br><span class="line"> <span class="comment"># commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="comment">#icon name(和http://fontawesome.io/icons/ 上面图标name对应) </span></span><br><span class="line"><span class="comment">#上方||后面的即为menu_icon名称，不许在下面重复定义</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>关闭注释即可打开博客菜单。</p></li><li><p>创建菜单文件目录，打开菜单后需要创建菜单文件存放的目录；</p><p>一下命令是在命令窗口，Blog目录下执行：D:\Blog&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">标签菜单</span></span><br><span class="line">hexo new page tags</span><br><span class="line"><span class="meta">#</span><span class="bash">分类菜单</span></span><br><span class="line">hexo new page categories</span><br><span class="line"><span class="meta">#</span><span class="bash">关于菜单</span></span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>执行完上面的命令后，会在Blog/source目录下多出tags和categories文件夹，文件夹下的makedown文件即为标签和分类菜单的展示页面内容，下面为标签和分类添加配置。</p><p>打开/tags/index.md</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-05-30 14:07:09</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>打开/categories/index.md</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-05-30 14:07:09</span><br><span class="line">type: "categories"</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存后，即可在新的文章撰写前添加标签和分类。</p><p>标签分类示例：（新建文件参考上一篇start my blog）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: my first blog</span><br><span class="line">date: 2019-05-30 14:07:09</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>hexo</span><br><span class="line"><span class="bullet">- </span>example</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">- </span>Example</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">the blog content.</span><br></pre></td></tr></table></figure><p>上面新建文件标签为：<code>hexo</code>,<code>example</code>;分类为：<code>Example</code>.</p><p>其他菜单类似。</p></li></ol><h4 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h4><ol><li><p>打开主题配置文件，/Blog/themes/next/_config.yml；</p></li><li><p>找到sidebar settings</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social Links.</span></span><br><span class="line"><span class="comment">#取消注释即可打开社交网络链接</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/yourname</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="comment">#E-Mail: mailto:yourname@gmail.com || envelope</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#上方||后面的即为social_icon名称，不许在下面重复定义</span></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  icons_only:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>头像设置</p><p>在Blog/source目录下新建images文件夹，将自己喜欢的头像放在文件夹下，</p><p>Blog/source/head.jpg，</p><p>在主题配置文件中找到avatar，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="comment"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class="line"><span class="comment"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/images/head.jpg</span></span><br></pre></td></tr></table></figure></li><li><p>作者和简述及语言</p><p>打开hexo配置文件，/Blog/_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Tassel</span>   <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">blog.</span> <span class="comment">#描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">tassel</span> <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="comment">#语言：简体中文</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="首页文章设置"><a href="#首页文章设置" class="headerlink" title="首页文章设置"></a>首页文章设置</h4><p>​    控制在首页文章显示字数，next主题默认显示文章所有内容，可以通过以下配置实现缩略显示，并给出显示更多按钮。</p><ol><li><p>方法一：</p><p>在每一篇文章任意位置添加</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>方法二：</p><p>在文章的front-matter（即头部添加标签和分类的地方）中添加description，并提供文章摘录。</p></li><li><p>方法三：</p><p>自动形成摘要，在主题配置文件中(/Blog/themes/next/config.yml)修改如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt. Not recommend.</span></span><br><span class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure></li></ol><p>修改完配置后需要重新生成并部署到github</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p>其他更多更高级配置参考next主题官方网站：<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">Next</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo新建提交流程</title>
      <link href="/2019/05/30/start-my-blog/"/>
      <url>/2019/05/30/start-my-blog/</url>
      
        <content type="html"><![CDATA[<p>记录一下如何新建-编写-生成-部署博客的全过程</p><h3 id="1、使用cmd完成"><a href="#1、使用cmd完成" class="headerlink" title="1、使用cmd完成"></a>1、使用cmd完成</h3><ol><li><p>打开命令提示符[win+r输入cmd]</p></li><li><p>切换到自己本地blog目录</p></li><li><p>创建md文件，以供后面的文章编写</p></li><li><p>创建好的文件在D:\Blog\source_posts下，打开后即可进行编辑</p></li><li><p>编辑完成后进行对文章的页面生成及部署</p></li><li><p>成功访问</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.打开命令提示符cmd</span></span><br><span class="line">win+r :cmd</span><br><span class="line"><span class="meta">#</span><span class="bash">2.切换到本地目录</span></span><br><span class="line">d:</span><br><span class="line">cd Blog</span><br><span class="line"><span class="meta">#</span><span class="bash">3.创建可编辑的文件</span></span><br><span class="line">hexo new post "blog-name"</span><br><span class="line"><span class="meta">#</span><span class="bash">4.进入到文件所在目录双击编辑</span></span><br><span class="line"><span class="meta">#</span><span class="bash">5.对文章进行生成部署</span></span><br><span class="line">hexo d -g</span><br><span class="line"><span class="meta">#</span><span class="bash">5.1.需要的扩展：</span></span><br><span class="line">npm install hexo-deployer-git</span><br><span class="line"><span class="meta">#</span><span class="bash">6.访问</span></span><br><span class="line">https://zsy0216.github.io</span><br></pre></td></tr></table></figure><h3 id="2-在git-bash下完成"><a href="#2-在git-bash下完成" class="headerlink" title="2.在git bash下完成"></a>2.在git bash下完成</h3><ol><li>编辑文章同上</li><li>发布时进入文章所在目录</li><li>生成与部署</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.</span></span><br><span class="line">win+r :cmd</span><br><span class="line">d:</span><br><span class="line">cd Blog</span><br><span class="line">hexo new post "blog-name"</span><br><span class="line"><span class="meta">#</span><span class="bash">1.1.进入到文件所在目录双击编辑</span></span><br><span class="line"><span class="meta">#</span><span class="bash">2.进入文章所在目录鼠标右键选择git bash here</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3.生成部署</span></span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>### </p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2019/05/30/%E8%A8%80%E8%AE%BA/"/>
      <url>/2019/05/30/%E8%A8%80%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="鲁迅"><a href="#鲁迅" class="headerlink" title="鲁迅"></a>鲁迅</h3><ul><li>当我沉默的时候，我觉得很充实，当我开口说话，就感到了空虚。</li><li>从来如此，便对么？</li><li>哀其不幸，怒其不争。</li><li>其实地上本没有路，走的人多了，也便成了路。</li><li>贪安稳就没有自由，要自由就要历些危险。只有这两条路。</li><li>中国人的性情是总喜欢调和折中的，譬如你说，这屋子太暗，须在这里开一个窗，大家一定不允许的。但如果你主张拆掉屋顶他们就来调和，愿意开窗了。</li><li>猛兽总是独行，牛羊才成群结队。</li></ul><h3 id="王小波"><a href="#王小波" class="headerlink" title="王小波"></a>王小波</h3><ul><li>假设有一个领悟，谦虚的人、明理的人以为它太困难、太暧昧，不肯说话，那么开口说话的就必然是浅薄之徒，狂妄之辈。这导致一种负筛选：越是傻子越敢叫唤——马上我就要说到，这些傻子也不见得真的傻，但喊出来的都是假话。</li><li>人生唯一的不幸就是自己的无能。</li><li>当你一步步回溯一件过去的事时，当然会知道下一步会发生什么。但是假如你在一步步经历意见当前逾期的事，你就会对未来一无所知。</li><li></li></ul><h3 id="老舍"><a href="#老舍" class="headerlink" title="老舍"></a>老舍</h3><ul><li>明天只是今天的继续，明天承继着今天的委屈。</li><li>苦人的懒是努力而落了空的自然结果，苦人的耍刺儿含着一些公理。</li><li>自己的路既走不通，便没法不承认别人做得对。</li><li>人间的真话本来就不多，一个女子的脸红胜过一大片话。</li><li>悲哀中的礼貌是虚伪。</li><li>其实，雨并不公道，因为下落在一个没有公道的世界上。</li><li></li></ul><h3 id="胡适"><a href="#胡适" class="headerlink" title="胡适"></a>胡适</h3><ul><li>成功不必在我，而功力必不唐捐。</li><li>生活的”为什么“，就是生活的意思。</li><li>生活本没有意义，你要能给他什么意义，他就有什么意义。逾期终日冥想人生有何意义，不如试用此生做点有意义的事。</li><li></li></ul><ol><li>你剥夺了我的理智，却要我清醒的去思考。  ——《高老头》</li><li>狐狸用尾巴扫干净蘑菇上的灰尘，刺猬们也把肚子露了出来，蜗牛也害羞地钻进自己的壳里，长颈鹿不停地吃掉颜色不好的叶子，因为你到我的森林里来了。</li><li>不乱于心，不困于情，不畏将来，不念过往，如此，安好。无愧于天，无愧于地，无怍于人，无惧于鬼，这样，人生。  ——丰子恺</li><li>如果有来生，要做一棵树，站成永恒。没有悲欢的姿势，一半在尘土里安详，一半在风中飞扬；一半洒落荫凉，一半沐浴阳光。  ——三毛</li><li>只缘感君一回顾，使我思君朝与暮。</li><li>我将于茫茫人海寻找我唯一之灵魂伴侣，得之，我幸，不得，我命。</li><li>寒山云：世人谤我、欺我、辱我、笑我、轻我、贱我、恶我、骗我、如何处置乎？拾得云：只是忍他、让他、由他、避他、耐他、敬他、不要理他、再待几年你且看他。</li><li>友谊悖论：你总是觉得，自己的朋友比自己有更多的朋友。</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
